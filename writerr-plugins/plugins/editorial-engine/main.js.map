{
  "version": 3,
  "sources": ["src/main.ts", "src/settings.ts", "src/ruleset-compiler.ts", "src/constraint-processor.ts", "src/mode-registry.ts", "src/adapter-manager.ts", "src/platform-manager.ts", "src/performance-monitor.ts", "src/event-bus.ts"],
  "sourcesContent": ["import { Plugin, Notice } from 'obsidian';\nimport { EditorialEngineSettingsTab, DEFAULT_SETTINGS } from './settings';\nimport { ConstraintProcessor } from './constraint-processor';\nimport { ModeRegistry } from './mode-registry';\nimport { AdapterManager } from './adapter-manager';\nimport { PlatformManager } from './platform-manager';\nimport { PerformanceMonitor } from './performance-monitor';\nimport { WritterrEventBus } from './event-bus';\nimport { \n  EditorialEngineSettings, \n  IntakePayload, \n  JobResult, \n  ModeDefinition,\n  EditorialEngineEvent\n} from './types';\n\n// Editorial Engine API Interface\nexport interface EditorialEngineAPI {\n  process(intake: IntakePayload): Promise<JobResult>;\n  registerMode(mode: ModeDefinition): Promise<void>;\n  getModes(): ModeDefinition[];\n  getMode(id: string): ModeDefinition | undefined;\n  registerAdapter(adapter: any): void;\n  getStatus(): any;\n  getPerformanceMetrics(): any;\n}\n\nexport default class EditorialEnginePlugin extends Plugin {\n  settings: EditorialEngineSettings;\n  constraintProcessor: ConstraintProcessor;\n  modeRegistry: ModeRegistry;\n  adapterManager: AdapterManager;\n  platformManager: PlatformManager;\n  performanceMonitor: PerformanceMonitor;\n  eventBus: WritterrEventBus;\n  api: EditorialEngineAPI;\n\n  async onload() {\n    console.log('Loading Editorial Engine plugin...');\n\n    // Load settings\n    await this.loadSettings();\n\n    // Initialize event bus first (other components depend on it)\n    this.eventBus = new WritterrEventBus();\n\n    // Initialize core components\n    this.initializeComponents();\n\n    // Set up platform integration\n    this.setupPlatformAPI();\n\n    // Register settings tab\n    this.addSettingTab(new EditorialEngineSettingsTab(this.app, this));\n\n    // Add status bar\n    this.addStatusBarItem().setText('\uD83D\uDCDD Editorial Engine Ready');\n\n    console.log('Editorial Engine plugin loaded successfully');\n  }\n\n  async onunload() {\n    console.log('Unloading Editorial Engine plugin...');\n    \n    // Cleanup components\n    this.cleanupComponents();\n    \n    // Remove platform API\n    this.cleanupPlatformAPI();\n    \n    console.log('Editorial Engine plugin unloaded');\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n  }\n\n  private initializeComponents() {\n    // Initialize performance monitor\n    this.performanceMonitor = new PerformanceMonitor(this.eventBus);\n\n    // Initialize mode registry\n    this.modeRegistry = new ModeRegistry(this.eventBus, this.settings);\n\n    // Initialize adapter manager\n    this.adapterManager = new AdapterManager(this.eventBus, this.settings);\n\n    // Initialize constraint processor (depends on mode registry and adapter manager)\n    this.constraintProcessor = new ConstraintProcessor(\n      this.modeRegistry,\n      this.adapterManager,\n      this.performanceMonitor,\n      this.eventBus,\n      this.settings\n    );\n\n    // Initialize platform manager\n    this.platformManager = new PlatformManager();\n\n    // Load default modes\n    this.loadDefaultModes();\n\n    // Set up default adapters\n    this.setupDefaultAdapters();\n  }\n\n  private setupPlatformAPI() {\n    // Create the API interface\n    this.api = {\n      process: this.processRequest.bind(this),\n      registerMode: this.registerMode.bind(this),\n      getModes: this.getModes.bind(this),\n      getMode: this.getMode.bind(this),\n      registerAdapter: this.registerAdapter.bind(this),\n      getStatus: this.getStatus.bind(this),\n      getPerformanceMetrics: this.getPerformanceMetrics.bind(this)\n    };\n\n    // Register with platform manager\n    this.platformManager.registerPlugin('editorial', this, this.api);\n\n    // Emit platform ready event\n    this.eventBus.emit('platform-ready', { \n      plugin: 'editorial-engine',\n      api: this.api \n    });\n  }\n\n  private cleanupComponents() {\n    // Stop performance monitoring\n    if (this.performanceMonitor) {\n      this.performanceMonitor.cleanup();\n    }\n\n    // Cleanup adapters\n    if (this.adapterManager) {\n      this.adapterManager.cleanup();\n    }\n\n    // Clear event bus\n    if (this.eventBus) {\n      this.eventBus.cleanup();\n    }\n  }\n\n  private cleanupPlatformAPI() {\n    if (this.platformManager) {\n      this.platformManager.unregisterPlugin('editorial');\n    }\n  }\n\n  private async loadDefaultModes() {\n    // Load built-in editing modes\n    const defaultModes: ModeDefinition[] = [\n      {\n        id: 'proofreader',\n        name: 'Proofreader',\n        description: 'Fix grammar, spelling, and basic clarity issues',\n        version: '1.0.0',\n        author: 'Writerr Platform',\n        naturalLanguageRules: {\n          allowed: [\n            'Fix spelling and grammar errors',\n            'Correct punctuation mistakes',\n            'Fix basic clarity issues',\n            'Standardize formatting'\n          ],\n          forbidden: [\n            'Never change the author\\'s voice or style',\n            'Don\\'t alter the meaning or intent',\n            'Don\\'t rewrite sentences unless grammatically incorrect',\n            'Don\\'t change technical terminology'\n          ],\n          focus: [\n            'Focus on mechanical correctness',\n            'Preserve original phrasing when possible',\n            'Make minimal necessary changes'\n          ],\n          boundaries: [\n            'Change no more than 10% of the original text',\n            'Keep changes at word or phrase level',\n            'Maintain original sentence structure'\n          ]\n        },\n        examples: [\n          {\n            input: 'The quick brown fox jump over the lazy dog.',\n            expectedBehavior: 'Fix \"jump\" to \"jumps\" for subject-verb agreement',\n            shouldNotDo: 'Don\\'t rewrite as \"A fast brown fox leaps over the sleepy dog\"',\n            explanation: 'Only fix the grammatical error, preserve original style'\n          }\n        ],\n        constraints: [],\n        metadata: {\n          category: 'basic-editing',\n          difficulty: 'beginner',\n          tags: ['grammar', 'spelling', 'proofreading'],\n          useCase: 'Final review before publishing'\n        }\n      },\n      {\n        id: 'copy-editor',\n        name: 'Copy Editor',\n        description: 'Improve style, flow, and consistency while preserving voice',\n        version: '1.0.0',\n        author: 'Writerr Platform',\n        naturalLanguageRules: {\n          allowed: [\n            'Improve sentence flow and rhythm',\n            'Enhance clarity and conciseness',\n            'Fix consistency issues',\n            'Suggest better word choices',\n            'Improve paragraph transitions'\n          ],\n          forbidden: [\n            'Don\\'t change the author\\'s fundamental voice',\n            'Don\\'t alter factual content or arguments',\n            'Don\\'t impose a different writing style',\n            'Don\\'t change specialized terminology'\n          ],\n          focus: [\n            'Focus on readability and flow',\n            'Improve sentence variety',\n            'Enhance overall coherence'\n          ],\n          boundaries: [\n            'Change no more than 25% of the original text',\n            'Preserve key phrases and expressions',\n            'Maintain the document\\'s tone and purpose'\n          ]\n        },\n        examples: [],\n        constraints: [],\n        metadata: {\n          category: 'style-editing',\n          difficulty: 'intermediate',\n          tags: ['style', 'flow', 'consistency'],\n          useCase: 'Improving published drafts'\n        }\n      },\n      {\n        id: 'developmental-editor',\n        name: 'Developmental Editor',\n        description: 'Enhance structure, argumentation, and content development',\n        version: '1.0.0',\n        author: 'Writerr Platform',\n        naturalLanguageRules: {\n          allowed: [\n            'Suggest structural improvements',\n            'Recommend content additions',\n            'Identify gaps in argumentation',\n            'Propose better organization',\n            'Enhance logical flow between ideas'\n          ],\n          forbidden: [\n            'Don\\'t rewrite the author\\'s content',\n            'Don\\'t change the fundamental argument',\n            'Don\\'t impose different viewpoints',\n            'Don\\'t make changes without explanation'\n          ],\n          focus: [\n            'Focus on big-picture structure',\n            'Improve logical progression',\n            'Enhance content effectiveness'\n          ],\n          boundaries: [\n            'Suggest rather than directly change',\n            'Provide explanations for recommendations',\n            'Preserve the author\\'s intentions'\n          ]\n        },\n        examples: [],\n        constraints: [],\n        metadata: {\n          category: 'content-editing',\n          difficulty: 'advanced',\n          tags: ['structure', 'development', 'argumentation'],\n          useCase: 'Early draft improvement'\n        }\n      }\n    ];\n\n    // Register each default mode\n    for (const mode of defaultModes) {\n      try {\n        await this.modeRegistry.registerMode(mode);\n      } catch (error) {\n        console.error(`Failed to register default mode ${mode.id}:`, error);\n      }\n    }\n  }\n\n  private setupDefaultAdapters() {\n    // Track Edits adapter will be set up when Track Edits plugin loads\n    // For now, just ensure the adapter manager is ready\n    console.log('Editorial Engine ready for adapter registration');\n  }\n\n  // Public API Methods\n  public async processRequest(intake: IntakePayload): Promise<JobResult> {\n    try {\n      this.eventBus.emit('processing-started', { intakeId: intake.id });\n      \n      const result = await this.constraintProcessor.process(intake);\n      \n      this.eventBus.emit('processing-completed', { \n        intakeId: intake.id, \n        result \n      });\n      \n      return result;\n    } catch (error) {\n      this.eventBus.emit('processing-failed', { \n        intakeId: intake.id, \n        error: error.message \n      });\n      \n      throw error;\n    }\n  }\n\n  public async registerMode(mode: ModeDefinition): Promise<void> {\n    return await this.modeRegistry.registerMode(mode);\n  }\n\n  public getModes(): ModeDefinition[] {\n    return this.modeRegistry.getAllModes();\n  }\n\n  public getMode(id: string): ModeDefinition | undefined {\n    return this.modeRegistry.getMode(id);\n  }\n\n  public registerAdapter(adapter: any): void {\n    this.adapterManager.registerAdapter(adapter);\n  }\n\n  public getStatus(): any {\n    return {\n      loaded: true,\n      modesCount: this.modeRegistry.getAllModes().length,\n      adaptersCount: this.adapterManager.getAdapterCount(),\n      settings: {\n        defaultMode: this.settings.defaultMode,\n        strictMode: this.settings.constraintValidation.strictMode\n      },\n      performance: this.performanceMonitor.getCurrentMetrics()\n    };\n  }\n\n  public getPerformanceMetrics(): any {\n    return this.performanceMonitor.getDetailedMetrics();\n  }\n\n  // Utility method for other components\n  public emitEvent(event: EditorialEngineEvent): void {\n    this.eventBus.emit(event.type, event.data);\n  }\n}", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport EditorialEnginePlugin from './main';\nimport { EditorialEngineSettings } from './types';\n\nexport const DEFAULT_SETTINGS: EditorialEngineSettings = {\n  version: '1.0.0',\n  enabledModes: ['proofreader', 'copy-editor', 'developmental-editor'],\n  defaultMode: 'proofreader',\n  constraintValidation: {\n    strictMode: true,\n    maxProcessingTime: 10000, // 10 seconds\n    memoryLimits: {\n      maxRulesetSize: 1000,\n      maxConcurrentJobs: 3\n    }\n  },\n  adapters: {\n    'track-edits': {\n      enabled: true,\n      config: {\n        batchSize: 10,\n        timeout: 5000\n      },\n      priority: 1\n    }\n  },\n  performance: {\n    enableCaching: true,\n    cacheSize: 100,\n    backgroundProcessing: true\n  }\n};\n\nexport class EditorialEngineSettingsTab extends PluginSettingTab {\n  plugin: EditorialEnginePlugin;\n\n  constructor(app: App, plugin: EditorialEnginePlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display(): void {\n    const { containerEl } = this;\n\n    containerEl.empty();\n\n    containerEl.createEl('h2', { text: 'Editorial Engine Settings' });\n\n    // General Settings\n    this.createGeneralSettings(containerEl);\n    \n    // Mode Settings\n    this.createModeSettings(containerEl);\n    \n    // Adapter Settings\n    this.createAdapterSettings(containerEl);\n    \n    // Performance Settings\n    this.createPerformanceSettings(containerEl);\n  }\n\n  private createGeneralSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'General Settings' });\n\n    new Setting(containerEl)\n      .setName('Default Mode')\n      .setDesc('The default editing mode to use when no specific mode is selected')\n      .addDropdown(dropdown => dropdown\n        .addOption('proofreader', 'Proofreader')\n        .addOption('copy-editor', 'Copy Editor')\n        .addOption('developmental-editor', 'Developmental Editor')\n        .setValue(this.plugin.settings.defaultMode)\n        .onChange(async (value) => {\n          this.plugin.settings.defaultMode = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Strict Mode')\n      .setDesc('Enable strict constraint validation (recommended)')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.constraintValidation.strictMode)\n        .onChange(async (value) => {\n          this.plugin.settings.constraintValidation.strictMode = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Max Processing Time')\n      .setDesc('Maximum time (in seconds) to wait for processing completion')\n      .addSlider(slider => slider\n        .setLimits(5, 60, 5)\n        .setValue(this.plugin.settings.constraintValidation.maxProcessingTime / 1000)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.constraintValidation.maxProcessingTime = value * 1000;\n          await this.plugin.saveSettings();\n        }));\n  }\n\n  private createModeSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'Mode Configuration' });\n\n    const modesContainer = containerEl.createDiv('modes-container');\n    modesContainer.style.cssText = `\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      padding: 15px;\n      margin: 10px 0;\n    `;\n\n    const enabledModes = this.plugin.settings.enabledModes;\n    const allModes = [\n      { id: 'proofreader', name: 'Proofreader', desc: 'Grammar, spelling, and basic clarity fixes' },\n      { id: 'copy-editor', name: 'Copy Editor', desc: 'Style, flow, and consistency improvements' },\n      { id: 'developmental-editor', name: 'Developmental Editor', desc: 'Structure and content development' },\n      { id: 'academic-mode', name: 'Academic Mode', desc: 'Academic writing standards and conventions' },\n      { id: 'business-mode', name: 'Business Mode', desc: 'Professional business communication' }\n    ];\n\n    for (const mode of allModes) {\n      new Setting(modesContainer)\n        .setName(mode.name)\n        .setDesc(mode.desc)\n        .addToggle(toggle => toggle\n          .setValue(enabledModes.includes(mode.id))\n          .onChange(async (value) => {\n            if (value) {\n              if (!enabledModes.includes(mode.id)) {\n                enabledModes.push(mode.id);\n              }\n            } else {\n              const index = enabledModes.indexOf(mode.id);\n              if (index > -1) {\n                enabledModes.splice(index, 1);\n              }\n            }\n            await this.plugin.saveSettings();\n          }));\n    }\n  }\n\n  private createAdapterSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'Adapter Configuration' });\n\n    const adaptersContainer = containerEl.createDiv('adapters-container');\n    adaptersContainer.style.cssText = `\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      padding: 15px;\n      margin: 10px 0;\n    `;\n\n    // Track Edits Adapter\n    const trackEditsConfig = this.plugin.settings.adapters['track-edits'];\n    \n    new Setting(adaptersContainer)\n      .setName('Track Edits Integration')\n      .setDesc('Enable integration with Track Edits plugin for change management')\n      .addToggle(toggle => toggle\n        .setValue(trackEditsConfig.enabled)\n        .onChange(async (value) => {\n          trackEditsConfig.enabled = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(adaptersContainer)\n      .setName('Batch Size')\n      .setDesc('Number of changes to batch together for Track Edits')\n      .addSlider(slider => slider\n        .setLimits(1, 50, 1)\n        .setValue(trackEditsConfig.config.batchSize)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          trackEditsConfig.config.batchSize = value;\n          await this.plugin.saveSettings();\n        }));\n  }\n\n  private createPerformanceSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'Performance Settings' });\n\n    new Setting(containerEl)\n      .setName('Enable Caching')\n      .setDesc('Cache processing results to improve performance')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.performance.enableCaching)\n        .onChange(async (value) => {\n          this.plugin.settings.performance.enableCaching = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Cache Size')\n      .setDesc('Maximum number of results to keep in cache')\n      .addSlider(slider => slider\n        .setLimits(10, 500, 10)\n        .setValue(this.plugin.settings.performance.cacheSize)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.performance.cacheSize = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Background Processing')\n      .setDesc('Process long-running tasks in the background')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.performance.backgroundProcessing)\n        .onChange(async (value) => {\n          this.plugin.settings.performance.backgroundProcessing = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Performance monitoring display\n    const performanceContainer = containerEl.createDiv('performance-monitor');\n    performanceContainer.style.cssText = `\n      background: var(--background-secondary);\n      border-radius: 4px;\n      padding: 15px;\n      margin: 15px 0;\n    `;\n    \n    performanceContainer.createEl('h4', { text: 'Performance Metrics' });\n    \n    const metricsEl = performanceContainer.createDiv();\n    this.updatePerformanceMetrics(metricsEl);\n  }\n\n  private updatePerformanceMetrics(container: HTMLElement): void {\n    container.empty();\n    \n    const metrics = this.plugin.getPerformanceMetrics();\n    \n    if (metrics) {\n      const metricsGrid = container.createDiv();\n      metricsGrid.style.cssText = `\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 10px;\n        margin-top: 10px;\n      `;\n      \n      const metricItems = [\n        { label: 'Avg Processing Time', value: `${metrics.avgProcessingTime.toFixed(2)}ms` },\n        { label: 'Success Rate', value: `${(metrics.successRate * 100).toFixed(1)}%` },\n        { label: 'Total Requests', value: metrics.totalRequests.toString() },\n        { label: 'Cache Hit Rate', value: `${(metrics.cacheHitRate * 100).toFixed(1)}%` }\n      ];\n      \n      for (const item of metricItems) {\n        const metricEl = metricsGrid.createDiv();\n        metricEl.style.cssText = `\n          padding: 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 3px;\n        `;\n        metricEl.createEl('div', { text: item.label, cls: 'metric-label' });\n        const valueEl = metricEl.createEl('div', { text: item.value, cls: 'metric-value' });\n        valueEl.style.fontWeight = 'bold';\n      }\n    } else {\n      container.createEl('p', { text: 'No performance data available yet.' });\n    }\n  }\n}", "import { \n  ModeDefinition, \n  CompiledRuleset, \n  ProcessingIntent, \n  ExecutionRuleset,\n  CompiledConstraint,\n  ConstraintType,\n  ValidationRule,\n  ExecutionParameters,\n  ParsedRule,\n  NaturalLanguageRules \n} from './types';\n\nexport class RulesetCompiler {\n  private nlProcessor: NaturalLanguageProcessor;\n\n  constructor() {\n    this.nlProcessor = new NaturalLanguageProcessor();\n  }\n\n  async compile(intent: ProcessingIntent, mode: ModeDefinition): Promise<ExecutionRuleset> {\n    // Use the mode's compiled constraints if available\n    if (mode.constraints && mode.constraints.length > 0) {\n      return {\n        constraints: mode.constraints,\n        validationRules: this.generateValidationRules(mode.constraints),\n        executionParams: this.deriveExecutionParams(intent),\n        compiledAt: Date.now()\n      };\n    }\n\n    // Otherwise, compile from natural language rules\n    return await this.compileMode(mode);\n  }\n\n  async compileMode(mode: ModeDefinition): Promise<CompiledRuleset> {\n    // Parse natural language rules\n    const parsedRules = await this.parseNaturalLanguage(mode.naturalLanguageRules);\n    \n    // Extract constraints from parsed rules\n    const constraints = await this.mapToConstraints(parsedRules);\n    \n    // Generate validation rules\n    const validationRules = this.generateValidationRules(constraints);\n    \n    // Create default execution parameters\n    const executionParams: ExecutionParameters = {\n      timeout: 10000, // 10 seconds default\n      maxRetries: 2,\n      preferredAdapters: ['track-edits'],\n      fallbackStrategy: 'graceful-degradation'\n    };\n    \n    return {\n      constraints,\n      validationRules,\n      executionParams,\n      compiledAt: Date.now()\n    };\n  }\n\n  private async parseNaturalLanguage(rules: NaturalLanguageRules): Promise<ParsedRule[]> {\n    const results: ParsedRule[] = [];\n\n    // Parse allowed rules (permissions)\n    for (const rule of rules.allowed) {\n      const parsed = await this.nlProcessor.parse(rule, 'permission');\n      results.push(parsed);\n    }\n\n    // Parse forbidden rules (prohibitions)\n    for (const rule of rules.forbidden) {\n      const parsed = await this.nlProcessor.parse(rule, 'prohibition');\n      results.push(parsed);\n    }\n\n    // Parse focus rules (guidance)\n    for (const rule of rules.focus) {\n      const parsed = await this.nlProcessor.parse(rule, 'focus');\n      results.push(parsed);\n    }\n\n    // Parse boundary rules (limits)\n    for (const rule of rules.boundaries) {\n      const parsed = await this.nlProcessor.parse(rule, 'boundary');\n      results.push(parsed);\n    }\n\n    return results;\n  }\n\n  private async mapToConstraints(parsedRules: ParsedRule[]): Promise<CompiledConstraint[]> {\n    const constraints: CompiledConstraint[] = [];\n\n    for (const rule of parsedRules) {\n      const constraint = this.ruleToConstraint(rule);\n      if (constraint) {\n        constraints.push(constraint);\n      }\n    }\n\n    return constraints;\n  }\n\n  private ruleToConstraint(rule: ParsedRule): CompiledConstraint | null {\n    // Map parsed natural language rules to programmatic constraints\n    \n    switch (rule.type) {\n      case 'permission':\n        return this.createPermissionConstraint(rule);\n      \n      case 'prohibition':\n        return this.createProhibitionConstraint(rule);\n      \n      case 'boundary':\n        return this.createBoundaryConstraint(rule);\n      \n      case 'focus':\n        return this.createFocusConstraint(rule);\n      \n      default:\n        console.warn(`Unknown rule type: ${rule.type}`);\n        return null;\n    }\n  }\n\n  private createPermissionConstraint(rule: ParsedRule): CompiledConstraint {\n    // Example: \"Fix spelling and grammar errors\" -> GRAMMAR_ONLY constraint\n    const intent = rule.intent.toLowerCase();\n    \n    if (intent.includes('grammar') || intent.includes('spelling')) {\n      return {\n        type: ConstraintType.GRAMMAR_ONLY,\n        parameters: { \n          allowSpelling: true,\n          allowGrammar: true,\n          allowPunctuation: true\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'output-validation',\n          condition: 'minimal-content-change',\n          message: 'Changes should be limited to grammar and spelling'\n        }]\n      };\n    }\n\n    // Default permission constraint\n    return {\n      type: ConstraintType.STYLE_CONSISTENCY,\n      parameters: { allowedOperations: [rule.intent] },\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private createProhibitionConstraint(rule: ParsedRule): CompiledConstraint {\n    // Example: \"Never change the author's voice\" -> PRESERVE_TONE constraint\n    const intent = rule.intent.toLowerCase();\n    \n    if (intent.includes('voice') || intent.includes('style') || intent.includes('tone')) {\n      return {\n        type: ConstraintType.PRESERVE_TONE,\n        parameters: { \n          preserveVoice: true,\n          preserveStyle: true,\n          allowMinorAdjustments: false\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'tone-analysis',\n          condition: 'tone-similarity > 0.9',\n          message: 'Must preserve original tone and voice'\n        }]\n      };\n    }\n\n    if (intent.includes('content') || intent.includes('meaning')) {\n      return {\n        type: ConstraintType.NO_CONTENT_CHANGE,\n        parameters: { \n          preserveMeaning: true,\n          allowClarification: false\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'semantic-analysis',\n          condition: 'meaning-similarity > 0.95',\n          message: 'Must preserve original meaning'\n        }]\n      };\n    }\n\n    // Default prohibition\n    return {\n      type: ConstraintType.NO_CONTENT_CHANGE,\n      parameters: { prohibitedAction: rule.intent },\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private createBoundaryConstraint(rule: ParsedRule): CompiledConstraint {\n    // Example: \"Change no more than 15% of words\" -> LENGTH_LIMIT constraint\n    const intent = rule.intent.toLowerCase();\n    \n    // Extract percentage limits\n    const percentageMatch = intent.match(/(\\d+)%/);\n    if (percentageMatch) {\n      const percentage = parseInt(percentageMatch[1]) / 100;\n      \n      return {\n        type: ConstraintType.LENGTH_LIMIT,\n        parameters: { \n          maxChangeRatio: percentage,\n          measurementType: 'words'\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'change-ratio-check',\n          condition: `change-ratio <= ${percentage}`,\n          message: `Changes must not exceed ${percentageMatch[1]}% of original text`\n        }]\n      };\n    }\n\n    // Default boundary constraint\n    return {\n      type: ConstraintType.LENGTH_LIMIT,\n      parameters: { maxChangeRatio: 0.25 }, // 25% default limit\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private createFocusConstraint(rule: ParsedRule): CompiledConstraint {\n    // Focus constraints guide the editing process\n    return {\n      type: ConstraintType.STYLE_CONSISTENCY,\n      parameters: { \n        focusArea: rule.intent,\n        priority: 'high'\n      },\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private generateValidationRules(constraints: CompiledConstraint[]): ValidationRule[] {\n    const rules: ValidationRule[] = [];\n\n    // Collect validation rules from all constraints\n    for (const constraint of constraints) {\n      rules.push(...constraint.validation);\n    }\n\n    // Add default validation rules\n    rules.push({\n      type: 'basic-validation',\n      condition: 'output-not-empty',\n      message: 'Output must not be empty'\n    });\n\n    return rules;\n  }\n\n  private deriveExecutionParams(intent: ProcessingIntent): ExecutionParameters {\n    // Adjust execution parameters based on intent\n    let timeout = 10000; // Default 10 seconds\n    \n    if (intent.type === 'summarization') {\n      timeout = 15000; // Summarization might take longer\n    } else if (intent.type === 'grammar-check') {\n      timeout = 5000; // Grammar checking should be fast\n    }\n\n    return {\n      timeout,\n      maxRetries: 2,\n      preferredAdapters: ['track-edits'],\n      fallbackStrategy: 'graceful-degradation'\n    };\n  }\n}\n\nclass NaturalLanguageProcessor {\n  async parse(rule: string, ruleType: string): Promise<ParsedRule> {\n    // Simple rule parsing - in a real implementation, this would use NLP libraries\n    const confidence = this.calculateConfidence(rule);\n    const intent = this.extractIntent(rule);\n    const parameters = this.extractParameters(rule);\n\n    return {\n      type: ruleType,\n      intent,\n      confidence,\n      parameters\n    };\n  }\n\n  private calculateConfidence(rule: string): number {\n    // Simple confidence calculation based on rule clarity and keywords\n    let confidence = 0.5; // Base confidence\n\n    // Increase confidence for specific, clear rules\n    const specificKeywords = [\n      'grammar', 'spelling', 'punctuation', 'voice', 'tone', 'style',\n      'meaning', 'content', 'structure', 'flow', 'clarity'\n    ];\n\n    for (const keyword of specificKeywords) {\n      if (rule.toLowerCase().includes(keyword)) {\n        confidence += 0.1;\n      }\n    }\n\n    // Increase confidence for quantifiable rules\n    if (rule.match(/\\d+%/) || rule.match(/\\d+\\s*(words?|characters?)/)) {\n      confidence += 0.2;\n    }\n\n    // Cap at 1.0\n    return Math.min(confidence, 1.0);\n  }\n\n  private extractIntent(rule: string): string {\n    // Extract the main intent from the rule\n    // This is a simplified implementation\n    \n    const rule_lower = rule.toLowerCase();\n    \n    if (rule_lower.includes('fix') || rule_lower.includes('correct')) {\n      return 'correction';\n    }\n    \n    if (rule_lower.includes('improve') || rule_lower.includes('enhance')) {\n      return 'improvement';\n    }\n    \n    if (rule_lower.includes('preserve') || rule_lower.includes('maintain')) {\n      return 'preservation';\n    }\n    \n    if (rule_lower.includes('never') || rule_lower.includes('don\\'t') || rule_lower.includes('avoid')) {\n      return 'prohibition';\n    }\n    \n    // Default to the rule text itself\n    return rule.trim();\n  }\n\n  private extractParameters(rule: string): Record<string, any> {\n    const parameters: Record<string, any> = {};\n    \n    // Extract percentages\n    const percentageMatch = rule.match(/(\\d+)%/);\n    if (percentageMatch) {\n      parameters.percentage = parseInt(percentageMatch[1]);\n    }\n    \n    // Extract word/character counts\n    const countMatch = rule.match(/(\\d+)\\s*(words?|characters?)/i);\n    if (countMatch) {\n      parameters.count = parseInt(countMatch[1]);\n      parameters.unit = countMatch[2].toLowerCase();\n    }\n    \n    return parameters;\n  }\n}", "import { \n  IntakePayload, \n  JobResult, \n  ProcessingIntent, \n  ExecutionRuleset,\n  Change,\n  ProvenanceChain,\n  ExecutionSummary,\n  EditorialEngineSettings\n} from './types';\nimport { ModeRegistry } from './mode-registry';\nimport { AdapterManager } from './adapter-manager';\nimport { PerformanceMonitor } from './performance-monitor';\nimport { WritterrEventBus } from './event-bus';\nimport { RulesetCompiler } from './ruleset-compiler';\n\nexport class ConstraintProcessor {\n  private compiler: RulesetCompiler;\n\n  constructor(\n    private modeRegistry: ModeRegistry,\n    private adapterManager: AdapterManager,\n    private performanceMonitor: PerformanceMonitor,\n    private eventBus: WritterrEventBus,\n    private settings: EditorialEngineSettings\n  ) {\n    this.compiler = new RulesetCompiler();\n  }\n\n  async process(intake: IntakePayload): Promise<JobResult> {\n    const startTime = performance.now();\n    \n    try {\n      // 1. Intake Normalization\n      const normalized = await this.normalizeIntake(intake);\n      \n      // 2. Intent Recognition\n      const intent = await this.recognizeIntent(normalized);\n      \n      // 3. Mode Validation\n      const mode = this.modeRegistry.getMode(intake.mode);\n      if (!mode) {\n        throw new Error(`Unknown mode: ${intake.mode}`);\n      }\n      \n      // 4. Constraint Compilation\n      const ruleset = await this.compileConstraints(intent, mode);\n      \n      // 5. Validation\n      const validation = await this.validateConstraints(ruleset);\n      if (!validation.valid) {\n        throw new Error(`Constraint validation failed: ${validation.errors.join(', ')}`);\n      }\n      \n      // 6. Execution Planning\n      const executionPlan = await this.createExecutionPlan(ruleset, intake);\n      \n      // 7. Adapter Routing\n      const results = await this.executeViaAdapters(executionPlan);\n      \n      // 8. Result Assembly\n      const finalResult = await this.assembleResults(results, intake, startTime);\n      \n      // 9. Post-Processing Validation\n      await this.validateResults(finalResult, ruleset);\n      \n      return finalResult;\n    } catch (error) {\n      // Return error result\n      return this.createErrorResult(intake, error, startTime);\n    }\n  }\n\n  private async normalizeIntake(intake: IntakePayload): Promise<IntakePayload> {\n    // Basic normalization - trim whitespace, validate structure\n    return {\n      ...intake,\n      instructions: intake.instructions.trim(),\n      sourceText: intake.sourceText.trim()\n    };\n  }\n\n  private async recognizeIntent(intake: IntakePayload): Promise<ProcessingIntent> {\n    // Simple intent recognition for now\n    // TODO: Implement sophisticated NLP intent recognition\n    \n    const instructions = intake.instructions.toLowerCase();\n    let type = 'general-edit';\n    let confidence = 0.8;\n    \n    if (instructions.includes('grammar') || instructions.includes('spelling')) {\n      type = 'grammar-check';\n      confidence = 0.9;\n    } else if (instructions.includes('style') || instructions.includes('improve')) {\n      type = 'style-enhancement';\n      confidence = 0.85;\n    } else if (instructions.includes('summarize') || instructions.includes('summary')) {\n      type = 'summarization';\n      confidence = 0.95;\n    }\n    \n    return {\n      type,\n      confidence,\n      parameters: {\n        originalInstructions: intake.instructions,\n        textLength: intake.sourceText.length,\n        mode: intake.mode\n      }\n    };\n  }\n\n  private async compileConstraints(intent: ProcessingIntent, mode: any): Promise<ExecutionRuleset> {\n    return await this.compiler.compile(intent, mode);\n  }\n\n  private async validateConstraints(ruleset: ExecutionRuleset): Promise<{ valid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n    \n    // Basic validation\n    if (!ruleset.constraints || ruleset.constraints.length === 0) {\n      errors.push('No constraints defined');\n    }\n    \n    if (ruleset.executionParams.timeout <= 0) {\n      errors.push('Invalid timeout value');\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  private async createExecutionPlan(ruleset: ExecutionRuleset, intake: IntakePayload): Promise<any> {\n    return {\n      id: `plan-${Date.now()}`,\n      ruleset,\n      intake,\n      steps: [\n        {\n          type: 'process-text',\n          adapter: 'track-edits',\n          payload: {\n            text: intake.sourceText,\n            instructions: intake.instructions,\n            constraints: ruleset.constraints\n          }\n        }\n      ]\n    };\n  }\n\n  private async executeViaAdapters(executionPlan: any): Promise<any[]> {\n    const results = [];\n    \n    for (const step of executionPlan.steps) {\n      try {\n        const result = await this.adapterManager.execute({\n          id: `job-${Date.now()}`,\n          type: step.type as any,\n          payload: step.payload,\n          constraints: executionPlan.ruleset.constraints,\n          context: executionPlan.intake.context,\n          timeout: executionPlan.ruleset.executionParams.timeout\n        });\n        \n        results.push(result);\n      } catch (error) {\n        console.error('Adapter execution failed:', error);\n        results.push({\n          success: false,\n          error: error.message,\n          data: null\n        });\n      }\n    }\n    \n    return results;\n  }\n\n  private async assembleResults(results: any[], intake: IntakePayload, startTime: number): Promise<JobResult> {\n    const processingTime = performance.now() - startTime;\n    \n    // For now, create a simple successful result\n    // TODO: Implement sophisticated result assembly from multiple adapters\n    \n    const changes: Change[] = [];\n    const hasSuccessfulResult = results.some(r => r.success);\n    \n    if (hasSuccessfulResult) {\n      // Create a mock change for demonstration\n      changes.push({\n        id: `change-${Date.now()}`,\n        type: 'replace',\n        range: { start: 0, end: intake.sourceText.length },\n        originalText: intake.sourceText,\n        newText: intake.sourceText, // Placeholder - actual processing would modify this\n        confidence: 0.85,\n        reasoning: `Applied ${intake.mode} mode constraints`,\n        source: 'editorial-engine',\n        timestamp: Date.now()\n      });\n    }\n    \n    const provenance: ProvenanceChain = {\n      steps: [\n        {\n          stage: 'constraint-processing',\n          input: intake,\n          output: results,\n          processingTime,\n          adapter: 'editorial-engine'\n        }\n      ],\n      totalTime: processingTime\n    };\n    \n    const summary: ExecutionSummary = {\n      totalChanges: changes.length,\n      changeSummary: { 'replace': changes.length },\n      confidence: 0.85,\n      warnings: []\n    };\n    \n    return {\n      id: `result-${Date.now()}`,\n      intakeId: intake.id,\n      success: hasSuccessfulResult,\n      processingTime,\n      changes,\n      conflicts: [],\n      provenance,\n      summary,\n      metadata: {\n        mode: intake.mode,\n        adapterResults: results.length\n      }\n    };\n  }\n\n  private async validateResults(result: JobResult, ruleset: ExecutionRuleset): Promise<void> {\n    // Basic result validation\n    if (this.settings.constraintValidation.strictMode) {\n      // Perform strict validation\n      if (result.changes.length > 100) {\n        throw new Error('Too many changes - possible constraint violation');\n      }\n      \n      // Check processing time\n      if (result.processingTime > this.settings.constraintValidation.maxProcessingTime) {\n        console.warn(`Processing time exceeded limit: ${result.processingTime}ms`);\n      }\n    }\n  }\n\n  private createErrorResult(intake: IntakePayload, error: Error, startTime: number): JobResult {\n    return {\n      id: `error-result-${Date.now()}`,\n      intakeId: intake.id,\n      success: false,\n      processingTime: performance.now() - startTime,\n      changes: [],\n      conflicts: [],\n      provenance: {\n        steps: [{\n          stage: 'error',\n          input: intake,\n          output: { error: error.message },\n          processingTime: performance.now() - startTime\n        }],\n        totalTime: performance.now() - startTime\n      },\n      summary: {\n        totalChanges: 0,\n        changeSummary: {},\n        confidence: 0,\n        warnings: [error.message]\n      },\n      metadata: {\n        error: error.message,\n        mode: intake.mode\n      }\n    };\n  }\n}", "import { ModeDefinition, CompiledConstraint } from './types';\nimport { WritterrEventBus } from './event-bus';\nimport { RulesetCompiler } from './ruleset-compiler';\n\nexport class ModeRegistry {\n  private modes: Map<string, ModeDefinition> = new Map();\n  private compiler: RulesetCompiler;\n\n  constructor(\n    private eventBus: WritterrEventBus,\n    private settings: any\n  ) {\n    this.compiler = new RulesetCompiler();\n  }\n\n  async registerMode(mode: ModeDefinition): Promise<void> {\n    // Validate mode definition\n    const validation = await this.validateMode(mode);\n    if (!validation.valid) {\n      throw new Error(`Mode validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Compile natural language rules if not already compiled\n    if (!mode.constraints || mode.constraints.length === 0) {\n      try {\n        const compiled = await this.compiler.compileMode(mode);\n        mode.constraints = compiled.constraints;\n      } catch (error) {\n        console.warn(`Failed to compile constraints for mode ${mode.id}:`, error);\n        mode.constraints = [];\n      }\n    }\n\n    // Store mode\n    this.modes.set(mode.id, mode);\n    \n    // Emit registration event\n    this.eventBus.emit('mode-registered', { mode });\n    \n    console.log(`Registered mode: ${mode.name} (${mode.id})`);\n  }\n\n  getMode(id: string): ModeDefinition | undefined {\n    return this.modes.get(id);\n  }\n\n  getAllModes(): ModeDefinition[] {\n    return Array.from(this.modes.values());\n  }\n\n  getModesByCategory(category: string): ModeDefinition[] {\n    return this.getAllModes().filter(mode => mode.metadata.category === category);\n  }\n\n  async updateMode(id: string, updates: Partial<ModeDefinition>): Promise<void> {\n    const existingMode = this.modes.get(id);\n    if (!existingMode) {\n      throw new Error(`Mode not found: ${id}`);\n    }\n\n    const updatedMode = { ...existingMode, ...updates };\n    \n    // Re-validate and recompile if rules changed\n    if (updates.naturalLanguageRules) {\n      const compiled = await this.compiler.compileMode(updatedMode);\n      updatedMode.constraints = compiled.constraints;\n    }\n\n    this.modes.set(id, updatedMode);\n    this.eventBus.emit('mode-updated', { mode: updatedMode });\n  }\n\n  removeMode(id: string): void {\n    if (this.modes.has(id)) {\n      const mode = this.modes.get(id)!;\n      this.modes.delete(id);\n      this.eventBus.emit('mode-removed', { modeId: id, mode });\n    }\n  }\n\n  private async validateMode(mode: ModeDefinition): Promise<{ valid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n\n    // Required fields\n    if (!mode.id) errors.push('Mode ID is required');\n    if (!mode.name) errors.push('Mode name is required');\n    if (!mode.description) errors.push('Mode description is required');\n    if (!mode.version) errors.push('Mode version is required');\n\n    // Check for duplicate ID\n    if (mode.id && this.modes.has(mode.id)) {\n      errors.push(`Mode ID already exists: ${mode.id}`);\n    }\n\n    // Validate natural language rules\n    if (!mode.naturalLanguageRules) {\n      errors.push('Natural language rules are required');\n    } else {\n      if (!mode.naturalLanguageRules.allowed || mode.naturalLanguageRules.allowed.length === 0) {\n        errors.push('At least one allowed rule is required');\n      }\n      \n      // Check for empty rules\n      const allRules = [\n        ...mode.naturalLanguageRules.allowed,\n        ...mode.naturalLanguageRules.forbidden,\n        ...mode.naturalLanguageRules.focus,\n        ...mode.naturalLanguageRules.boundaries\n      ];\n      \n      for (const rule of allRules) {\n        if (!rule.trim()) {\n          errors.push('Rules cannot be empty');\n          break;\n        }\n      }\n    }\n\n    // Validate metadata\n    if (!mode.metadata) {\n      errors.push('Mode metadata is required');\n    } else {\n      if (!mode.metadata.category) {\n        errors.push('Mode category is required');\n      }\n      if (!mode.metadata.difficulty) {\n        errors.push('Mode difficulty is required');\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Export modes for sharing/backup\n  exportModes(): string {\n    const modesArray = Array.from(this.modes.values());\n    return JSON.stringify(modesArray, null, 2);\n  }\n\n  // Import modes from JSON\n  async importModes(modesJson: string): Promise<{ imported: number; errors: string[] }> {\n    const errors: string[] = [];\n    let imported = 0;\n\n    try {\n      const modes: ModeDefinition[] = JSON.parse(modesJson);\n      \n      if (!Array.isArray(modes)) {\n        throw new Error('Invalid format: expected array of modes');\n      }\n\n      for (const mode of modes) {\n        try {\n          await this.registerMode(mode);\n          imported++;\n        } catch (error) {\n          errors.push(`Failed to import mode ${mode.id || 'unknown'}: ${error.message}`);\n        }\n      }\n    } catch (error) {\n      errors.push(`JSON parsing failed: ${error.message}`);\n    }\n\n    return { imported, errors };\n  }\n}", "import { \n  EngineAdapter, \n  ExecutionJob, \n  EngineResult, \n  OperationType,\n  AdapterStatus,\n  EditorialEngineSettings \n} from './types';\nimport { WritterrEventBus } from './event-bus';\n\nexport class AdapterManager {\n  private adapters: Map<string, EngineAdapter> = new Map();\n  private router: AdapterRouter;\n  private healthMonitor: AdapterHealthMonitor;\n\n  constructor(\n    private eventBus: WritterrEventBus,\n    private settings: EditorialEngineSettings\n  ) {\n    this.router = new AdapterRouter();\n    this.healthMonitor = new AdapterHealthMonitor(this.eventBus);\n  }\n\n  async registerAdapter(adapter: EngineAdapter): Promise<void> {\n    try {\n      // Get configuration for this adapter\n      const config = this.getAdapterConfig(adapter.name);\n      \n      // Initialize adapter\n      await adapter.initialize(config);\n      \n      // Register with router\n      this.router.registerAdapter(adapter);\n      \n      // Store adapter\n      this.adapters.set(adapter.name, adapter);\n      \n      // Start health monitoring\n      this.healthMonitor.startMonitoring(adapter);\n      \n      // Emit registration event\n      this.eventBus.emit('adapter-registered', { \n        name: adapter.name, \n        adapter \n      });\n      \n      console.log(`Registered adapter: ${adapter.name} v${adapter.version}`);\n    } catch (error) {\n      console.error(`Failed to register adapter ${adapter.name}:`, error);\n      throw error;\n    }\n  }\n\n  async execute(job: ExecutionJob): Promise<EngineResult> {\n    const startTime = performance.now();\n    \n    try {\n      // Find suitable adapters\n      const suitableAdapters = this.router.findSuitableAdapters(job);\n      \n      if (suitableAdapters.length === 0) {\n        throw new Error(`No suitable adapter found for job type: ${job.type}`);\n      }\n\n      // Try adapters in priority order\n      let lastError: Error | null = null;\n      \n      for (const adapter of suitableAdapters) {\n        try {\n          const result = await this.executeWithAdapter(adapter, job);\n          \n          // Record successful execution\n          this.recordExecution(adapter.name, true, performance.now() - startTime);\n          \n          return result;\n        } catch (error) {\n          console.warn(`Adapter ${adapter.name} failed for job ${job.id}:`, error);\n          lastError = error;\n          \n          // Record failed execution\n          this.recordExecution(adapter.name, false, performance.now() - startTime);\n          \n          // Continue to next adapter\n        }\n      }\n      \n      // All adapters failed\n      throw lastError || new Error('All suitable adapters failed');\n    } catch (error) {\n      // Emit failure event\n      this.eventBus.emit('adapter-execution-failed', { \n        jobId: job.id, \n        error: error.message \n      });\n      \n      throw error;\n    }\n  }\n\n  private async executeWithAdapter(adapter: EngineAdapter, job: ExecutionJob): Promise<EngineResult> {\n    // Check adapter health before execution\n    const status = adapter.getStatus();\n    if (!status.healthy) {\n      throw new Error(`Adapter ${adapter.name} is not healthy: ${status.error}`);\n    }\n\n    // Set timeout\n    const timeoutPromise = new Promise<EngineResult>((_, reject) => {\n      setTimeout(() => reject(new Error('Adapter execution timeout')), job.timeout);\n    });\n\n    // Execute with timeout\n    const executionPromise = adapter.execute(job);\n    \n    const result = await Promise.race([executionPromise, timeoutPromise]);\n    \n    if (!result.success) {\n      throw new Error(`Adapter execution failed: ${result.errors?.map(e => e.message).join(', ')}`);\n    }\n    \n    return result;\n  }\n\n  getAdapter(name: string): EngineAdapter | undefined {\n    return this.adapters.get(name);\n  }\n\n  getAllAdapters(): EngineAdapter[] {\n    return Array.from(this.adapters.values());\n  }\n\n  getAdapterCount(): number {\n    return this.adapters.size;\n  }\n\n  getAdapterStatus(name: string): AdapterStatus | undefined {\n    const adapter = this.adapters.get(name);\n    return adapter?.getStatus();\n  }\n\n  getAllAdapterStatuses(): Record<string, AdapterStatus> {\n    const statuses: Record<string, AdapterStatus> = {};\n    \n    for (const [name, adapter] of this.adapters) {\n      statuses[name] = adapter.getStatus();\n    }\n    \n    return statuses;\n  }\n\n  private getAdapterConfig(adapterName: string): any {\n    return this.settings.adapters[adapterName]?.config || {};\n  }\n\n  private recordExecution(adapterName: string, success: boolean, responseTime: number): void {\n    this.eventBus.emit('adapter-execution-recorded', {\n      adapterName,\n      success,\n      responseTime,\n      timestamp: Date.now()\n    });\n  }\n\n  async cleanup(): Promise<void> {\n    // Stop health monitoring\n    this.healthMonitor.cleanup();\n    \n    // Cleanup all adapters\n    for (const [name, adapter] of this.adapters) {\n      try {\n        await adapter.cleanup();\n      } catch (error) {\n        console.error(`Error cleaning up adapter ${name}:`, error);\n      }\n    }\n    \n    // Clear adapters\n    this.adapters.clear();\n  }\n}\n\nclass AdapterRouter {\n  private adapters: EngineAdapter[] = [];\n\n  registerAdapter(adapter: EngineAdapter): void {\n    this.adapters.push(adapter);\n    \n    // Sort by priority (assuming higher priority = higher config priority value)\n    this.adapters.sort((a, b) => {\n      // For now, just keep registration order\n      // TODO: Implement proper priority sorting\n      return 0;\n    });\n  }\n\n  findSuitableAdapters(job: ExecutionJob): EngineAdapter[] {\n    return this.adapters.filter(adapter => {\n      // Check if adapter supports the operation type\n      if (!adapter.supportedOperations.includes(job.type)) {\n        return false;\n      }\n      \n      // Check if adapter is healthy\n      const status = adapter.getStatus();\n      if (!status.healthy) {\n        return false;\n      }\n      \n      // Check payload size limits\n      if (job.payload && typeof job.payload.text === 'string') {\n        const textLength = job.payload.text.length;\n        if (textLength > adapter.capabilities.maxTextLength) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  }\n}\n\nclass AdapterHealthMonitor {\n  private intervals: Map<string, NodeJS.Timeout> = new Map();\n  private readonly HEALTH_CHECK_INTERVAL = 30000; // 30 seconds\n\n  constructor(private eventBus: WritterrEventBus) {}\n\n  startMonitoring(adapter: EngineAdapter): void {\n    // Clear existing monitoring for this adapter\n    this.stopMonitoring(adapter.name);\n    \n    // Start new monitoring\n    const interval = setInterval(() => {\n      this.checkAdapterHealth(adapter);\n    }, this.HEALTH_CHECK_INTERVAL);\n    \n    this.intervals.set(adapter.name, interval);\n  }\n\n  stopMonitoring(adapterName: string): void {\n    const interval = this.intervals.get(adapterName);\n    if (interval) {\n      clearInterval(interval);\n      this.intervals.delete(adapterName);\n    }\n  }\n\n  private async checkAdapterHealth(adapter: EngineAdapter): Promise<void> {\n    try {\n      const status = adapter.getStatus();\n      \n      if (!status.healthy) {\n        this.eventBus.emit('adapter-health-warning', {\n          adapterName: adapter.name,\n          status,\n          timestamp: Date.now()\n        });\n      }\n    } catch (error) {\n      this.eventBus.emit('adapter-health-error', {\n        adapterName: adapter.name,\n        error: error.message,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  cleanup(): void {\n    // Stop all health monitoring\n    for (const [name, interval] of this.intervals) {\n      clearInterval(interval);\n    }\n    this.intervals.clear();\n  }\n}", "// Platform Manager for Global API Registration\nimport { WritterrPlatformAPI } from '@shared/types';\n\ninterface PluginInfo {\n  version: string;\n  loaded: boolean;\n  api?: any;\n}\n\nexport class PlatformManager {\n  private static instance?: PlatformManager;\n  private plugins: Map<string, any> = new Map();\n  \n  static getInstance(): PlatformManager {\n    if (!PlatformManager.instance) {\n      PlatformManager.instance = new PlatformManager();\n    }\n    return PlatformManager.instance;\n  }\n\n  registerPlugin(name: string, plugin: any, api: any): void {\n    this.plugins.set(name, { plugin, api });\n    \n    // Update or create global platform object\n    const platform = this.getPlatform();\n    (platform as any)[name] = api;\n    \n    // Update plugin info\n    if (plugin.manifest) {\n      platform.plugins[name as keyof typeof platform.plugins] = {\n        version: plugin.manifest.version,\n        loaded: true,\n        api\n      };\n    }\n    \n    console.log(`Registered ${name} plugin with platform API`);\n  }\n\n  unregisterPlugin(name: string): void {\n    if (this.plugins.has(name)) {\n      this.plugins.delete(name);\n      \n      const platform = this.getPlatform();\n      delete (platform as any)[name];\n      \n      if (platform.plugins[name as keyof typeof platform.plugins]) {\n        platform.plugins[name as keyof typeof platform.plugins] = {\n          version: '',\n          loaded: false\n        };\n      }\n      \n      console.log(`Unregistered ${name} plugin from platform API`);\n    }\n  }\n\n  getPlatform(): WritterrPlatformAPI {\n    if (!window.Writerr) {\n      this.createPlatform();\n    }\n    return window.Writerr as WritterrPlatformAPI;\n  }\n\n  getPlugin(name: string): any {\n    return this.plugins.get(name);\n  }\n\n  isPluginRegistered(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getAllPlugins(): string[] {\n    return Array.from(this.plugins.keys());\n  }\n\n  private createPlatform(): void {\n    const platform: WritterrPlatformAPI = {\n      version: '1.0.0',\n      plugins: {}\n    };\n\n    (window as any).Writerr = platform;\n    \n    console.log('Created Writerr platform object');\n  }\n\n  // Utility methods for cross-plugin communication\n  async waitForPlugin(name: string, timeout: number = 10000): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const checkPlugin = () => {\n        const plugin = this.plugins.get(name);\n        if (plugin) {\n          resolve(plugin.api);\n          return;\n        }\n        \n        // Check again in 100ms\n        setTimeout(checkPlugin, 100);\n      };\n      \n      // Set timeout\n      setTimeout(() => {\n        reject(new Error(`Plugin ${name} not registered within ${timeout}ms`));\n      }, timeout);\n      \n      checkPlugin();\n    });\n  }\n\n  notifyPluginReady(name: string): void {\n    const platform = this.getPlatform();\n    \n    // Emit event if event bus is available\n    if (platform.events && typeof platform.events.emit === 'function') {\n      platform.events.emit('plugin-ready', { name });\n    }\n  }\n}\n\n// Global declaration is already handled in shared types", "import { WritterrEventBus } from './event-bus';\n\nexport interface PerformanceMetrics {\n  avgProcessingTime: number;\n  successRate: number;\n  totalRequests: number;\n  cacheHitRate: number;\n  memoryUsage?: number;\n  lastUpdated: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  requestsPerMinute: number;\n  errorCount: number;\n  timeDistribution: {\n    fast: number;    // < 1s\n    medium: number;  // 1-5s\n    slow: number;    // > 5s\n  };\n  adapterMetrics: Record<string, {\n    requests: number;\n    successRate: number;\n    avgResponseTime: number;\n  }>;\n}\n\nexport class PerformanceMonitor {\n  private metrics: {\n    totalRequests: number;\n    successfulRequests: number;\n    totalProcessingTime: number;\n    cacheHits: number;\n    cacheRequests: number;\n    requestTimes: number[];\n    adapterStats: Map<string, {\n      requests: number;\n      successful: number;\n      totalTime: number;\n    }>;\n  } = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    totalProcessingTime: 0,\n    cacheHits: 0,\n    cacheRequests: 0,\n    requestTimes: [],\n    adapterStats: new Map()\n  };\n\n  private readonly MAX_REQUEST_TIMES = 1000; // Keep last 1000 request times\n\n  constructor(private eventBus: WritterrEventBus) {\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    this.eventBus.on('processing-completed', (data: any) => {\n      this.recordRequest(data.result.processingTime, true);\n    });\n\n    this.eventBus.on('processing-failed', (data: any) => {\n      this.recordRequest(0, false);\n    });\n\n    this.eventBus.on('adapter-execution-recorded', (data: any) => {\n      this.recordAdapterExecution(\n        data.adapterName,\n        data.responseTime,\n        data.success\n      );\n    });\n\n    // Emit metrics updates periodically\n    setInterval(() => {\n      this.emitMetricsUpdate();\n    }, 30000); // Every 30 seconds\n  }\n\n  recordRequest(processingTime: number, success: boolean): void {\n    this.metrics.totalRequests++;\n    \n    if (success) {\n      this.metrics.successfulRequests++;\n      this.metrics.totalProcessingTime += processingTime;\n      \n      // Store request time (keep only last MAX_REQUEST_TIMES)\n      this.metrics.requestTimes.push(processingTime);\n      if (this.metrics.requestTimes.length > this.MAX_REQUEST_TIMES) {\n        this.metrics.requestTimes.shift();\n      }\n    }\n  }\n\n  recordCacheHit(): void {\n    this.metrics.cacheRequests++;\n    this.metrics.cacheHits++;\n  }\n\n  recordCacheMiss(): void {\n    this.metrics.cacheRequests++;\n  }\n\n  private recordAdapterExecution(adapterName: string, responseTime: number, success: boolean): void {\n    if (!this.metrics.adapterStats.has(adapterName)) {\n      this.metrics.adapterStats.set(adapterName, {\n        requests: 0,\n        successful: 0,\n        totalTime: 0\n      });\n    }\n\n    const stats = this.metrics.adapterStats.get(adapterName)!;\n    stats.requests++;\n    stats.totalTime += responseTime;\n    \n    if (success) {\n      stats.successful++;\n    }\n  }\n\n  getCurrentMetrics(): PerformanceMetrics {\n    const avgProcessingTime = this.metrics.successfulRequests > 0\n      ? this.metrics.totalProcessingTime / this.metrics.successfulRequests\n      : 0;\n\n    const successRate = this.metrics.totalRequests > 0\n      ? this.metrics.successfulRequests / this.metrics.totalRequests\n      : 0;\n\n    const cacheHitRate = this.metrics.cacheRequests > 0\n      ? this.metrics.cacheHits / this.metrics.cacheRequests\n      : 0;\n\n    return {\n      avgProcessingTime,\n      successRate,\n      totalRequests: this.metrics.totalRequests,\n      cacheHitRate,\n      lastUpdated: Date.now()\n    };\n  }\n\n  getDetailedMetrics(): DetailedMetrics {\n    const basicMetrics = this.getCurrentMetrics();\n    \n    // Calculate time distribution\n    const timeDistribution = {\n      fast: 0,\n      medium: 0,\n      slow: 0\n    };\n\n    for (const time of this.metrics.requestTimes) {\n      if (time < 1000) {\n        timeDistribution.fast++;\n      } else if (time < 5000) {\n        timeDistribution.medium++;\n      } else {\n        timeDistribution.slow++;\n      }\n    }\n\n    // Calculate requests per minute (based on last hour of data)\n    const recentRequests = this.metrics.requestTimes.filter(\n      time => time > Date.now() - 3600000 // Last hour\n    );\n    const requestsPerMinute = recentRequests.length / 60;\n\n    // Adapter metrics\n    const adapterMetrics: Record<string, any> = {};\n    for (const [name, stats] of this.metrics.adapterStats) {\n      adapterMetrics[name] = {\n        requests: stats.requests,\n        successRate: stats.requests > 0 ? stats.successful / stats.requests : 0,\n        avgResponseTime: stats.requests > 0 ? stats.totalTime / stats.requests : 0\n      };\n    }\n\n    return {\n      ...basicMetrics,\n      requestsPerMinute,\n      errorCount: this.metrics.totalRequests - this.metrics.successfulRequests,\n      timeDistribution,\n      adapterMetrics\n    };\n  }\n\n  private emitMetricsUpdate(): void {\n    const metrics = this.getCurrentMetrics();\n    this.eventBus.emit('performance-metrics-updated', { metrics });\n  }\n\n  // Memory usage tracking (if available)\n  updateMemoryUsage(): void {\n    if (typeof (performance as any).memory !== 'undefined') {\n      const memInfo = (performance as any).memory;\n      // Store memory usage for reporting\n      // This is a Chrome-specific API\n    }\n  }\n\n  // Reset metrics (useful for testing)\n  reset(): void {\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      totalProcessingTime: 0,\n      cacheHits: 0,\n      cacheRequests: 0,\n      requestTimes: [],\n      adapterStats: new Map()\n    };\n  }\n\n  cleanup(): void {\n    // Remove event listeners would be done here if we stored references\n    // For now, just reset metrics\n    this.reset();\n  }\n\n  // Export metrics for external monitoring\n  exportMetrics(): string {\n    const detailed = this.getDetailedMetrics();\n    return JSON.stringify(detailed, null, 2);\n  }\n\n  // Alert thresholds\n  checkThresholds(): { alerts: string[]; warnings: string[] } {\n    const metrics = this.getCurrentMetrics();\n    const alerts: string[] = [];\n    const warnings: string[] = [];\n\n    // Check processing time\n    if (metrics.avgProcessingTime > 5000) {\n      alerts.push(`High average processing time: ${metrics.avgProcessingTime.toFixed(0)}ms`);\n    } else if (metrics.avgProcessingTime > 2000) {\n      warnings.push(`Elevated processing time: ${metrics.avgProcessingTime.toFixed(0)}ms`);\n    }\n\n    // Check success rate\n    if (metrics.successRate < 0.8) {\n      alerts.push(`Low success rate: ${(metrics.successRate * 100).toFixed(1)}%`);\n    } else if (metrics.successRate < 0.95) {\n      warnings.push(`Reduced success rate: ${(metrics.successRate * 100).toFixed(1)}%`);\n    }\n\n    return { alerts, warnings };\n  }\n}", "// Event Bus Implementation for Editorial Engine\n\nexport interface WritterrEventBus {\n  emit<T = any>(event: string, data: T): void;\n  on<T = any>(event: string, handler: (data: T) => void): void;\n  off(event: string, handler: Function): void;\n  once<T = any>(event: string, handler: (data: T) => void): void;\n  cleanup(): void;\n}\n\nexport class WritterrEventBus implements WritterrEventBus {\n  private handlers: Map<string, Set<Function>> = new Map();\n  private debugMode: boolean = false;\n\n  emit<T = any>(event: string, data: T): void {\n    if (this.debugMode) {\n      console.debug(`[WritterrEventBus] Emitting: ${event}`, data);\n    }\n\n    const eventHandlers = this.handlers.get(event);\n    if (eventHandlers) {\n      // Create array to avoid modification during iteration\n      const handlersArray = Array.from(eventHandlers);\n      \n      for (const handler of handlersArray) {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`[WritterrEventBus] Error in handler for ${event}:`, error);\n          // Don't let one handler failure break others\n        }\n      }\n    }\n  }\n\n  on<T = any>(event: string, handler: (data: T) => void): void {\n    if (!this.handlers.has(event)) {\n      this.handlers.set(event, new Set());\n    }\n    this.handlers.get(event)!.add(handler);\n    \n    if (this.debugMode) {\n      console.debug(`[WritterrEventBus] Registered handler for: ${event}`);\n    }\n  }\n\n  off(event: string, handler: Function): void {\n    const eventHandlers = this.handlers.get(event);\n    if (eventHandlers) {\n      eventHandlers.delete(handler);\n      \n      // Clean up empty handler sets\n      if (eventHandlers.size === 0) {\n        this.handlers.delete(event);\n      }\n    }\n  }\n\n  once<T = any>(event: string, handler: (data: T) => void): void {\n    const onceWrapper = (data: T) => {\n      handler(data);\n      this.off(event, onceWrapper);\n    };\n    \n    this.on(event, onceWrapper);\n  }\n\n  cleanup(): void {\n    this.handlers.clear();\n    \n    if (this.debugMode) {\n      console.debug('[WritterrEventBus] Cleaned up all handlers');\n    }\n  }\n\n  // Debug and monitoring methods\n  setDebugMode(enabled: boolean): void {\n    this.debugMode = enabled;\n  }\n\n  getEventCounts(): Record<string, number> {\n    const counts: Record<string, number> = {};\n    \n    for (const [event, handlers] of this.handlers) {\n      counts[event] = handlers.size;\n    }\n    \n    return counts;\n  }\n\n  getAllEvents(): string[] {\n    return Array.from(this.handlers.keys());\n  }\n\n  hasListeners(event: string): boolean {\n    const handlers = this.handlers.get(event);\n    return handlers ? handlers.size > 0 : false;\n  }\n\n  getListenerCount(event: string): number {\n    const handlers = this.handlers.get(event);\n    return handlers ? handlers.size : 0;\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.handlers.delete(event);\n    } else {\n      this.handlers.clear();\n    }\n  }\n}\n\n// Event type definitions for better type safety\nexport interface EditorialEngineEvents {\n  'platform-ready': { plugin: string; api: any };\n  'mode-registered': { mode: any };\n  'mode-updated': { mode: any };\n  'mode-removed': { modeId: string; mode: any };\n  'adapter-registered': { name: string; adapter: any };\n  'adapter-execution-failed': { jobId: string; error: string };\n  'adapter-execution-recorded': { \n    adapterName: string; \n    success: boolean; \n    responseTime: number; \n    timestamp: number;\n  };\n  'adapter-health-warning': { adapterName: string; status: any; timestamp: number };\n  'adapter-health-error': { adapterName: string; error: string; timestamp: number };\n  'processing-started': { intakeId: string };\n  'processing-completed': { intakeId: string; result: any };\n  'processing-failed': { intakeId: string; error: string };\n  'performance-metrics-updated': { metrics: any };\n}\n\n// Typed event bus that provides better IntelliSense\nexport class TypedWritterrEventBus {\n  private bus: WritterrEventBus;\n\n  constructor(bus: WritterrEventBus) {\n    this.bus = bus;\n  }\n\n  emit<K extends keyof EditorialEngineEvents>(\n    event: K, \n    data: EditorialEngineEvents[K]\n  ): void {\n    this.bus.emit(event, data);\n  }\n\n  on<K extends keyof EditorialEngineEvents>(\n    event: K, \n    handler: (data: EditorialEngineEvents[K]) => void\n  ): void {\n    this.bus.on(event, handler);\n  }\n\n  once<K extends keyof EditorialEngineEvents>(\n    event: K, \n    handler: (data: EditorialEngineEvents[K]) => void\n  ): void {\n    this.bus.once(event, handler);\n  }\n\n  off(event: keyof EditorialEngineEvents, handler: Function): void {\n    this.bus.off(event, handler);\n  }\n}"],
  "mappings": "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",
  "names": ["import_obsidian"]
}
