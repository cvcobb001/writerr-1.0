{
  "version": 3,
  "sources": ["src/adapters/track-edits-adapter.ts", "src/main.ts", "src/settings.ts", "src/ruleset-compiler.ts", "src/constraint-processor.ts", "src/mode-registry.ts", "src/adapter-manager.ts", "src/platform-manager.ts", "src/performance-monitor.ts", "src/event-bus.ts"],
  "sourcesContent": ["// Track Edits Adapter - Editorial Engine Integration\nimport { EngineAdapter, ExecutionJob, EngineResult, OperationType, AdapterCapabilities, AdapterStatus, AdapterMetrics, AdapterConfig } from '../types';\nimport { EditChange } from '../../../../shared/types';\n\nexport class TrackEditsAdapter implements EngineAdapter {\n  name = 'track-edits';\n  version = '1.0.0';\n  supportedOperations: OperationType[] = ['text-edit', 'content-modification', 'proofreading', 'editing'];\n  capabilities: AdapterCapabilities = {\n    batchProcessing: true,\n    realTimeProcessing: true,\n    undoSupport: true,\n    provenance: true,\n    streaming: false\n  };\n\n  private initialized = false;\n  private config: AdapterConfig = {};\n  private metrics: AdapterMetrics = {\n    executionsCount: 0,\n    successRate: 1.0,\n    averageLatency: 0,\n    errorCount: 0,\n    lastExecution: Date.now()\n  };\n  private executionTimes: number[] = [];\n  private errors: string[] = [];\n\n  async initialize(config: AdapterConfig): Promise<void> {\n    this.config = config;\n    \n    // Verify Track Edits plugin is available\n    if (!window.WriterrlAPI?.trackEdits) {\n      throw new Error('Track Edits plugin is not loaded or accessible');\n    }\n\n    // Test connectivity\n    const currentSession = window.WriterrlAPI.trackEdits.getCurrentSession();\n    console.log('Track Edits Adapter initialized, current session:', currentSession ? 'active' : 'none');\n    \n    this.initialized = true;\n  }\n\n  async execute(job: ExecutionJob): Promise<EngineResult> {\n    const startTime = performance.now();\n    \n    try {\n      if (!this.initialized) {\n        throw new Error('Track Edits Adapter not initialized');\n      }\n\n      // Ensure we have an active tracking session\n      await this.ensureTrackingSession();\n\n      // Convert Editorial Engine job to Track Edits format\n      const trackEditsChanges = this.convertToTrackEditsFormat(job);\n      \n      // Process changes through Track Edits\n      const result = await this.processChangesWithTrackEdits(trackEditsChanges, job);\n      \n      // Record successful execution\n      const executionTime = performance.now() - startTime;\n      this.recordExecution(executionTime, true);\n\n      // Convert Track Edits result back to Editorial Engine format\n      return this.convertFromTrackEditsFormat(result, job);\n\n    } catch (error) {\n      const executionTime = performance.now() - startTime;\n      this.recordExecution(executionTime, false, error.message);\n      \n      return {\n        success: false,\n        jobId: job.id,\n        timestamp: Date.now(),\n        executionTime,\n        errors: [{\n          type: 'adapter-error',\n          message: error.message,\n          timestamp: Date.now()\n        }],\n        metadata: {\n          adapter: this.name,\n          version: this.version\n        }\n      };\n    }\n  }\n\n  async cleanup(): Promise<void> {\n    this.initialized = false;\n    this.config = {};\n    console.log('Track Edits Adapter cleaned up');\n  }\n\n  getStatus(): AdapterStatus {\n    const isTrackEditsAvailable = !!window.WriterrlAPI?.trackEdits;\n    const hasActiveSession = !!window.WriterrlAPI?.trackEdits?.getCurrentSession();\n    \n    return {\n      healthy: this.initialized && isTrackEditsAvailable,\n      ready: this.initialized && isTrackEditsAvailable && hasActiveSession,\n      error: !isTrackEditsAvailable ? 'Track Edits plugin not available' : \n             !hasActiveSession ? 'No active tracking session' : undefined,\n      lastHealthCheck: Date.now(),\n      currentLoad: 0\n    };\n  }\n\n  getMetrics(): AdapterMetrics {\n    return { ...this.metrics };\n  }\n\n  // Private implementation methods\n  private async ensureTrackingSession(): Promise<void> {\n    if (!window.WriterrlAPI?.trackEdits) {\n      throw new Error('Track Edits API not available');\n    }\n\n    const currentSession = window.WriterrlAPI.trackEdits.getCurrentSession();\n    if (!currentSession) {\n      // Start tracking if no session is active\n      window.WriterrlAPI.trackEdits.startTracking();\n      \n      // Verify session was created\n      const newSession = window.WriterrlAPI.trackEdits.getCurrentSession();\n      if (!newSession) {\n        throw new Error('Failed to start Track Edits session');\n      }\n      \n      console.log('Started Track Edits session:', newSession.id);\n    }\n  }\n\n  private convertToTrackEditsFormat(job: ExecutionJob): EditChange[] {\n    const changes: EditChange[] = [];\n    \n    // Convert job payload to Track Edits change format\n    if (job.payload.changes) {\n      // If the job already contains Track Edits format changes\n      return job.payload.changes as EditChange[];\n    }\n    \n    // Convert from Editorial Engine format\n    if (job.payload.text && job.payload.edits) {\n      for (const edit of job.payload.edits) {\n        changes.push({\n          id: `${job.id}-${edit.id || Date.now()}`,\n          timestamp: Date.now(),\n          type: edit.type === 'addition' ? 'insert' : edit.type === 'deletion' ? 'delete' : 'replace',\n          from: edit.start || 0,\n          to: edit.end || edit.start || 0,\n          text: edit.newText || '',\n          removedText: edit.oldText || '',\n          author: 'editorial-engine',\n          metadata: {\n            jobId: job.id,\n            mode: job.payload.mode,\n            provenance: 'editorial-engine'\n          }\n        });\n      }\n    } else if (job.payload.text) {\n      // Create a single change for the entire text\n      changes.push({\n        id: `${job.id}-full-text`,\n        timestamp: Date.now(),\n        type: 'replace',\n        from: 0,\n        to: job.payload.originalText?.length || 0,\n        text: job.payload.text,\n        removedText: job.payload.originalText || '',\n        author: 'editorial-engine',\n        metadata: {\n          jobId: job.id,\n          mode: job.payload.mode,\n          provenance: 'editorial-engine'\n        }\n      });\n    }\n    \n    return changes;\n  }\n\n  private async processChangesWithTrackEdits(changes: EditChange[], job: ExecutionJob): Promise<TrackEditsResult> {\n    // Submit changes to Track Edits for visualization and management\n    const trackEditsAPI = window.WriterrlAPI.trackEdits!;\n    const currentSession = trackEditsAPI.getCurrentSession()!;\n    \n    // Enhanced integration: Check if changes should be applied sequentially\n    const useSequentialProcessing = job.metadata?.sequentialProcessing || false;\n    const processedChanges: EditChange[] = [];\n    const rejectedChanges: EditChange[] = [];\n    \n    if (useSequentialProcessing) {\n      // For sequential processing, we work with the Chat plugin's integration\n      // The changes have already been applied via SequentialTextProcessor\n      // We just need to record them for tracking\n      for (const change of changes) {\n        try {\n          // Record the change without applying it (already applied sequentially)\n          if (trackEditsAPI.recordChange) {\n            await trackEditsAPI.recordChange(change);\n          }\n          processedChanges.push(change);\n        } catch (error) {\n          console.warn(`Failed to record sequential change ${change.id}:`, error);\n          rejectedChanges.push(change);\n        }\n      }\n    } else {\n      // Traditional processing: Apply changes via Track Edits API\n      for (const change of changes) {\n        try {\n          if (trackEditsAPI.applyChange) {\n            await trackEditsAPI.applyChange(change);\n          }\n          processedChanges.push(change);\n        } catch (error) {\n          console.warn(`Failed to apply change ${change.id}:`, error);\n          rejectedChanges.push(change);\n        }\n      }\n    }\n    \n    return {\n      success: true,\n      sessionId: currentSession.id,\n      appliedChanges: processedChanges,\n      rejectedChanges: rejectedChanges,\n      timestamp: Date.now(),\n      metadata: {\n        jobId: job.id,\n        mode: job.payload.mode,\n        processingTime: performance.now() - (job.metadata?.startTime || Date.now()),\n        sequentialProcessing: useSequentialProcessing,\n        totalChanges: changes.length,\n        successfulChanges: processedChanges.length,\n        failedChanges: rejectedChanges.length\n      }\n    };\n  }\n\n  private convertFromTrackEditsFormat(trackEditsResult: TrackEditsResult, job: ExecutionJob): EngineResult {\n    const executionTime = performance.now() - (job.metadata?.startTime || Date.now());\n    \n    if (!trackEditsResult.success) {\n      return {\n        success: false,\n        jobId: job.id,\n        timestamp: Date.now(),\n        executionTime,\n        errors: [{\n          type: 'track-edits-error',\n          message: 'Track Edits processing failed',\n          timestamp: Date.now()\n        }],\n        metadata: {\n          adapter: this.name,\n          version: this.version,\n          trackEditsSession: trackEditsResult.sessionId\n        }\n      };\n    }\n\n    return {\n      success: true,\n      jobId: job.id,\n      timestamp: Date.now(),\n      executionTime,\n      result: {\n        processedText: job.payload.text, // In real implementation, get processed text from Track Edits\n        changes: trackEditsResult.appliedChanges,\n        rejectedChanges: trackEditsResult.rejectedChanges,\n        sessionId: trackEditsResult.sessionId\n      },\n      metadata: {\n        adapter: this.name,\n        version: this.version,\n        trackEditsSession: trackEditsResult.sessionId,\n        appliedChanges: trackEditsResult.appliedChanges.length,\n        rejectedChanges: trackEditsResult.rejectedChanges.length\n      },\n      provenance: {\n        adapter: this.name,\n        timestamp: Date.now(),\n        jobId: job.id,\n        sessionId: trackEditsResult.sessionId,\n        changes: trackEditsResult.appliedChanges.map(change => ({\n          id: change.id,\n          type: change.type,\n          position: { from: change.from, to: change.to },\n          author: change.author\n        }))\n      }\n    };\n  }\n\n  private recordExecution(executionTime: number, success: boolean, error?: string): void {\n    this.metrics.executionsCount++;\n    this.metrics.lastExecution = Date.now();\n    \n    this.executionTimes.push(executionTime);\n    if (this.executionTimes.length > 100) {\n      this.executionTimes = this.executionTimes.slice(-100); // Keep last 100\n    }\n    \n    this.metrics.averageLatency = this.executionTimes.reduce((sum, time) => sum + time, 0) / this.executionTimes.length;\n    \n    if (success) {\n      this.metrics.successRate = (this.metrics.successRate * (this.metrics.executionsCount - 1) + 1) / this.metrics.executionsCount;\n    } else {\n      this.metrics.errorCount++;\n      this.metrics.successRate = (this.metrics.successRate * (this.metrics.executionsCount - 1)) / this.metrics.executionsCount;\n      \n      if (error) {\n        this.errors.push(error);\n        if (this.errors.length > 50) {\n          this.errors = this.errors.slice(-50); // Keep last 50 errors\n        }\n      }\n    }\n  }\n}\n\n// Internal types for Track Edits communication\ninterface TrackEditsResult {\n  success: boolean;\n  sessionId: string;\n  appliedChanges: EditChange[];\n  rejectedChanges: EditChange[];\n  timestamp: number;\n  metadata: {\n    jobId: string;\n    mode: string;\n    processingTime: number;\n  };\n}", "import { Plugin, Notice } from 'obsidian';\nimport { EditorialEngineSettingsTab, DEFAULT_SETTINGS } from './settings';\nimport { ConstraintProcessor } from './constraint-processor';\nimport { ModeRegistry } from './mode-registry';\nimport { AdapterManager } from './adapter-manager';\nimport { PlatformManager } from './platform-manager';\nimport { PerformanceMonitor } from './performance-monitor';\nimport { WritterrEventBus } from './event-bus';\nimport { \n  EditorialEngineSettings, \n  IntakePayload, \n  JobResult, \n  ModeDefinition,\n  EditorialEngineEvent\n} from './types';\n\n// Editorial Engine API Interface\nexport interface EditorialEngineAPI {\n  process(intake: IntakePayload): Promise<JobResult>;\n  registerMode(mode: ModeDefinition): Promise<void>;\n  getModes(): ModeDefinition[];\n  getEnabledModes(): ModeDefinition[];\n  getMode(id: string): ModeDefinition | undefined;\n  registerAdapter(adapter: any): void;\n  getStatus(): any;\n  getPerformanceMetrics(): any;\n}\n\nexport default class EditorialEnginePlugin extends Plugin {\n  settings: EditorialEngineSettings;\n  constraintProcessor: ConstraintProcessor;\n  modeRegistry: ModeRegistry;\n  adapterManager: AdapterManager;\n  platformManager: PlatformManager;\n  performanceMonitor: PerformanceMonitor;\n  eventBus: WritterrEventBus;\n  api: EditorialEngineAPI;\n\n  async onload() {\n    console.log('Loading Editorial Engine plugin...');\n\n    // Load settings\n    await this.loadSettings();\n\n    // Initialize event bus first (other components depend on it)\n    this.eventBus = new WritterrEventBus();\n\n    // Initialize core components\n    this.initializeComponents();\n\n    // Set up platform integration\n    this.setupPlatformAPI();\n\n    // Set up default adapters (Track Edits integration)\n    await this.setupDefaultAdapters();\n\n    // Register settings tab\n    this.addSettingTab(new EditorialEngineSettingsTab(this.app, this));\n\n    // Add status bar\n    this.addStatusBarItem().setText('\uD83D\uDCDD Editorial Engine Ready');\n\n    // Listen for Track Edits plugin loading (delayed registration)\n    this.eventBus.on('plugin-ready', async (data) => {\n      if (data.name === 'track-edits' && !this.adapterManager.getAdapter('track-edits')) {\n        console.log('Track Edits plugin became available, registering adapter...');\n        await this.setupDefaultAdapters();\n      }\n    });\n\n    console.log('Editorial Engine plugin loaded successfully');\n  }\n\n  async onunload() {\n    console.log('Unloading Editorial Engine plugin...');\n    \n    // Cleanup components\n    this.cleanupComponents();\n    \n    // Remove platform API\n    this.cleanupPlatformAPI();\n    \n    console.log('Editorial Engine plugin unloaded');\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n  }\n\n  private initializeComponents() {\n    // Initialize performance monitor\n    this.performanceMonitor = new PerformanceMonitor(this.eventBus);\n\n    // Initialize mode registry\n    this.modeRegistry = new ModeRegistry(this.eventBus, this.settings);\n\n    // Initialize adapter manager\n    this.adapterManager = new AdapterManager(this.eventBus, this.settings);\n\n    // Initialize constraint processor (depends on mode registry and adapter manager)\n    this.constraintProcessor = new ConstraintProcessor(\n      this.modeRegistry,\n      this.adapterManager,\n      this.performanceMonitor,\n      this.eventBus,\n      this.settings\n    );\n\n    // Initialize platform manager\n    this.platformManager = new PlatformManager();\n\n    // Load default modes\n    this.loadDefaultModes();\n\n    // Set up default adapters\n    this.setupDefaultAdapters();\n  }\n\n  private setupPlatformAPI() {\n    // Create the API interface\n    this.api = {\n      process: this.processRequest.bind(this),\n      registerMode: this.registerMode.bind(this),\n      getModes: this.getModes.bind(this),\n      getEnabledModes: this.getEnabledModes.bind(this),\n      getMode: this.getMode.bind(this),\n      registerAdapter: this.registerAdapter.bind(this),\n      getStatus: this.getStatus.bind(this),\n      getPerformanceMetrics: this.getPerformanceMetrics.bind(this)\n    };\n\n    // Register with platform manager\n    this.platformManager.registerPlugin('editorial', this, this.api);\n\n    // CRITICAL: Expose API to global WriterrlAPI for Chat integration\n    if (!window.WriterrlAPI) {\n      window.WriterrlAPI = {} as any;\n    }\n    \n    window.WriterrlAPI.editorialEngine = this.api;\n    console.log('Editorial Engine API exposed to window.WriterrlAPI.editorialEngine');\n\n    // Emit platform ready event\n    this.eventBus.emit('platform-ready', { \n      plugin: 'editorial-engine',\n      api: this.api \n    });\n  }\n\n  private cleanupComponents() {\n    // Stop performance monitoring\n    if (this.performanceMonitor) {\n      this.performanceMonitor.cleanup();\n    }\n\n    // Cleanup adapters\n    if (this.adapterManager) {\n      this.adapterManager.cleanup();\n    }\n\n    // Clear event bus\n    if (this.eventBus) {\n      this.eventBus.cleanup();\n    }\n  }\n\n  private cleanupPlatformAPI() {\n    if (this.platformManager) {\n      this.platformManager.unregisterPlugin('editorial');\n    }\n    \n    // Cleanup global API\n    if (window.WriterrlAPI && window.WriterrlAPI.editorialEngine) {\n      delete window.WriterrlAPI.editorialEngine;\n    }\n  }\n\n  private async loadDefaultModes() {\n    // Load user-defined modes from markdown files in the modes folder\n    const modesFolder = '.obsidian/plugins/editorial-engine/modes';\n    \n    try {\n      // Check if modes folder exists, create if not\n      const folderExists = await this.app.vault.adapter.exists(modesFolder);\n      if (!folderExists) {\n        await this.app.vault.adapter.mkdir(modesFolder);\n        console.log('Created Editorial Engine modes folder');\n        \n        // Create initial example mode files\n        await this.createExampleModeFiles(modesFolder);\n      }\n      \n      // Load all .md files from the modes folder\n      const files = await this.app.vault.adapter.list(modesFolder);\n      const modeFiles = files.files.filter(file => file.endsWith('.md'));\n      \n      let loadedCount = 0;\n      for (const filePath of modeFiles) {\n        try {\n          const modeContent = await this.app.vault.adapter.read(filePath);\n          const modeDefinition = this.parseModeFile(filePath, modeContent);\n          \n          if (modeDefinition) {\n            await this.modeRegistry.registerMode(modeDefinition);\n            loadedCount++;\n            console.log(`Loaded mode from file: ${filePath}`);\n          }\n        } catch (error) {\n          console.error(`Failed to load mode file ${filePath}:`, error);\n        }\n      }\n      \n      console.log(`Loaded ${loadedCount} modes from user-defined files`);\n      \n    } catch (error) {\n      console.error('Failed to load modes from files, falling back to defaults:', error);\n      // Fallback to basic proofreader mode if file loading fails\n      await this.loadFallbackMode();\n    }\n  }\n\n  private async createExampleModeFiles(modesFolder: string) {\n    const exampleModes = [\n      {\n        filename: 'proofreader.md',\n        content: `# Proofreader Mode\n\n**Description:** Fix grammar, spelling, and basic clarity issues without changing the author's voice\n\n## What I Can Do\n- Fix spelling and grammar errors\n- Correct punctuation mistakes\n- Fix basic clarity issues\n- Standardize formatting\n- Improve sentence structure for clarity\n\n## What I Cannot Do  \n- Never change the author's voice or style\n- Don't alter the meaning or intent\n- Don't rewrite sentences unless grammatically incorrect\n- Don't change technical terminology\n- Don't make major structural changes\n\n## Focus Areas\n- Focus on mechanical correctness\n- Preserve original phrasing when possible  \n- Make minimal necessary changes\n- Maintain the author's intended tone\n\n## Boundaries\n- Change no more than 10% of the original text\n- Keep changes at word or phrase level\n- Maintain original sentence structure when possible\n- Only fix clear errors, don't impose style preferences\n\n## Examples\n**Input:** \"The quick brown fox jump over the lazy dog, it was very quick.\"\n**Expected:** \"The quick brown fox jumps over the lazy dog. It was very quick.\"\n**Explanation:** Fix subject-verb agreement and run-on sentence, but preserve simple style.\n`\n      },\n      {\n        filename: 'copy-editor.md', \n        content: `# Copy Editor Mode\n\n**Description:** Improve style, flow, and consistency while preserving the author's voice\n\n## What I Can Do\n- Improve sentence flow and rhythm\n- Enhance clarity and conciseness  \n- Fix consistency issues in tone and style\n- Suggest better word choices for precision\n- Improve paragraph transitions and connections\n- Eliminate redundancy and wordiness\n\n## What I Cannot Do\n- Don't change the author's fundamental voice\n- Don't alter factual content or arguments  \n- Don't impose a completely different writing style\n- Don't change specialized terminology without reason\n- Don't remove the author's personality from the text\n\n## Focus Areas\n- Focus on readability and flow\n- Improve sentence variety and rhythm\n- Enhance overall coherence and unity\n- Strengthen transitions between ideas\n- Maintain consistent tone throughout\n\n## Boundaries  \n- Change no more than 25% of the original text\n- Preserve key phrases and distinctive expressions\n- Maintain the document's purpose and audience\n- Keep the author's level of formality\n- Preserve technical accuracy\n\n## Examples\n**Input:** \"The meeting was very productive and we got a lot done. We talked about many things. It was good.\"\n**Expected:** \"The meeting proved highly productive, covering multiple key topics and yielding concrete progress on our objectives.\"  \n**Explanation:** Improved flow and precision while maintaining the positive, straightforward tone.\n`\n      },\n      {\n        filename: 'my-custom-mode-template.md',\n        content: `# My Custom Mode Template\n\n**Description:** [Describe what this mode does - e.g., \"Enhance creative writing for fantasy novels\"]\n\n## What I Can Do\n- [List specific things this mode should do]\n- [Be specific about the type of improvements]\n- [Include any special focus areas]\n- [Add domain-specific capabilities if needed]\n\n## What I Cannot Do  \n- [List things this mode should never do]\n- [Include boundaries about voice/style preservation]  \n- [Specify content that shouldn't be changed]\n- [Add any domain-specific restrictions]\n\n## Focus Areas\n- [What should this mode prioritize?]\n- [What aspects of writing should it focus on?]\n- [Any specific techniques or approaches?]\n\n## Boundaries\n- [How much of the text can be changed? (e.g., \"no more than 15%\")]\n- [What level of changes are appropriate? (word/phrase/sentence/paragraph)]\n- [What must always be preserved?]\n- [Any specific limitations?]\n\n## Examples\n**Input:** [Provide a sample of text this mode would work on]\n**Expected:** [Show what the improved version should look like]\n**Explanation:** [Explain why these specific changes align with the mode's purpose]\n\n---\n**Instructions:** \n1. Copy this template to create new modes\n2. Replace all bracketed placeholders with your specific requirements  \n3. Save as a new .md file in the modes folder\n4. The Editorial Engine will automatically detect and load your new mode\n`\n      }\n    ];\n\n    // Create each example mode file\n    for (const mode of exampleModes) {\n      const filePath = `${modesFolder}/${mode.filename}`;\n      try {\n        await this.app.vault.adapter.write(filePath, mode.content);\n        console.log(`Created example mode file: ${mode.filename}`);\n      } catch (error) {\n        console.error(`Failed to create ${mode.filename}:`, error);\n      }\n    }\n  }\n\n  private parseModeFile(filePath: string, content: string): ModeDefinition | null {\n    try {\n      const lines = content.split('\\n');\n      const modeId = filePath.split('/').pop()?.replace('.md', '') || 'unknown';\n      \n      let modeName = '';\n      let description = '';\n      const allowed: string[] = [];\n      const forbidden: string[] = [];\n      const focus: string[] = [];\n      const boundaries: string[] = [];\n      \n      let currentSection = '';\n      \n      for (let line of lines) {\n        line = line.trim();\n        \n        // Extract title (mode name)\n        if (line.startsWith('# ') && !modeName) {\n          modeName = line.substring(2).replace(' Mode', '').trim();\n        }\n        \n        // Extract description\n        if (line.startsWith('**Description:**')) {\n          description = line.replace('**Description:**', '').trim();\n        }\n        \n        // Track current section\n        if (line.startsWith('## What I Can Do')) {\n          currentSection = 'allowed';\n        } else if (line.startsWith('## What I Cannot Do')) {\n          currentSection = 'forbidden';\n        } else if (line.startsWith('## Focus Areas')) {\n          currentSection = 'focus';\n        } else if (line.startsWith('## Boundaries')) {\n          currentSection = 'boundaries';\n        } else if (line.startsWith('## Examples') || line.startsWith('---')) {\n          currentSection = ''; // Stop processing at examples or end\n        }\n        \n        // Extract bullet points for current section\n        if (line.startsWith('- ') && currentSection) {\n          const rule = line.substring(2).trim();\n          switch (currentSection) {\n            case 'allowed':\n              allowed.push(rule);\n              break;\n            case 'forbidden':\n              forbidden.push(rule);\n              break;\n            case 'focus':\n              focus.push(rule);\n              break;\n            case 'boundaries':\n              boundaries.push(rule);\n              break;\n          }\n        }\n      }\n      \n      // Validate required fields\n      if (!modeName || !description || allowed.length === 0) {\n        console.warn(`Invalid mode file ${filePath}: missing required fields`);\n        return null;\n      }\n      \n      return {\n        id: modeId,\n        name: modeName,\n        description: description,\n        version: '1.0.0',\n        author: 'User Defined',\n        naturalLanguageRules: {\n          allowed,\n          forbidden,\n          focus,\n          boundaries\n        },\n        examples: [], // Could be enhanced to parse examples from markdown\n        constraints: [], // Will be compiled from natural language rules\n        metadata: {\n          category: 'user-defined',\n          difficulty: 'custom',\n          tags: [modeId],\n          useCase: description\n        }\n      };\n      \n    } catch (error) {\n      console.error(`Failed to parse mode file ${filePath}:`, error);\n      return null;\n    }\n  }\n\n  private async loadFallbackMode() {\n    // Minimal fallback mode if file loading fails completely\n    const fallbackMode: ModeDefinition = {\n      id: 'basic-proofreader',\n      name: 'Basic Proofreader',\n      description: 'Basic grammar and spelling fixes',\n      version: '1.0.0',\n      author: 'Writerr Platform',\n      naturalLanguageRules: {\n        allowed: ['Fix spelling and grammar errors'],\n        forbidden: ['Don\\'t change the author\\'s voice'],\n        focus: ['Focus on mechanical correctness'],\n        boundaries: ['Make minimal necessary changes']\n      },\n      examples: [],\n      constraints: [],\n      metadata: {\n        category: 'fallback',\n        difficulty: 'basic',\n        tags: ['grammar'],\n        useCase: 'Emergency fallback mode'\n      }\n    };\n    \n    await this.modeRegistry.registerMode(fallbackMode);\n    console.log('Loaded fallback proofreader mode');\n  }\n\n  private async setupDefaultAdapters() {\n    // Register Track Edits adapter if Track Edits plugin is available\n    if (window.WriterrlAPI?.trackEdits) {\n      try {\n        const { TrackEditsAdapter } = await import('./adapters/track-edits-adapter');\n        const trackEditsAdapter = new TrackEditsAdapter();\n        await this.adapterManager.registerAdapter(trackEditsAdapter);\n        console.log('Track Edits adapter registered successfully');\n      } catch (error) {\n        console.error('Failed to register Track Edits adapter:', error);\n      }\n    } else {\n      console.log('Track Edits plugin not available, adapter registration skipped');\n    }\n    \n    console.log('Editorial Engine adapter setup complete');\n  }\n\n  // Public API Methods\n  public async processRequest(intake: IntakePayload): Promise<JobResult> {\n    try {\n      this.eventBus.emit('processing-started', { intakeId: intake.id });\n      \n      const result = await this.constraintProcessor.process(intake);\n      \n      this.eventBus.emit('processing-completed', { \n        intakeId: intake.id, \n        result \n      });\n      \n      return result;\n    } catch (error) {\n      this.eventBus.emit('processing-failed', { \n        intakeId: intake.id, \n        error: error.message \n      });\n      \n      throw error;\n    }\n  }\n\n  public async registerMode(mode: ModeDefinition): Promise<void> {\n    return await this.modeRegistry.registerMode(mode);\n  }\n\n  public getModes(): ModeDefinition[] {\n    return this.modeRegistry.getAllModes();\n  }\n\n  public getEnabledModes(): ModeDefinition[] {\n    const allModes = this.modeRegistry.getAllModes();\n    return allModes.filter(mode => this.settings.enabledModes.includes(mode.id));\n  }\n\n  public getMode(id: string): ModeDefinition | undefined {\n    return this.modeRegistry.getMode(id);\n  }\n\n  public registerAdapter(adapter: any): void {\n    this.adapterManager.registerAdapter(adapter);\n  }\n\n  public getStatus(): any {\n    return {\n      loaded: true,\n      modesCount: this.modeRegistry.getAllModes().length,\n      adaptersCount: this.adapterManager.getAdapterCount(),\n      settings: {\n        defaultMode: this.settings.defaultMode,\n        strictMode: this.settings.constraintValidation.strictMode\n      },\n      performance: this.performanceMonitor.getCurrentMetrics()\n    };\n  }\n\n  public getPerformanceMetrics(): any {\n    return this.performanceMonitor.getDetailedMetrics();\n  }\n\n  // Utility method for other components\n  public emitEvent(event: EditorialEngineEvent): void {\n    this.eventBus.emit(event.type, event.data);\n  }\n}", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport EditorialEnginePlugin from './main';\nimport { EditorialEngineSettings } from './types';\n\nexport const DEFAULT_SETTINGS: EditorialEngineSettings = {\n  version: '1.0.0',\n  enabledModes: ['proofreader', 'copy-editor', 'developmental-editor'],\n  defaultMode: 'proofreader',\n  constraintValidation: {\n    strictMode: true,\n    maxProcessingTime: 10000, // 10 seconds\n    memoryLimits: {\n      maxRulesetSize: 1000,\n      maxConcurrentJobs: 3\n    }\n  },\n  adapters: {\n    'track-edits': {\n      enabled: true,\n      config: {\n        batchSize: 10,\n        timeout: 5000\n      },\n      priority: 1\n    }\n  },\n  performance: {\n    enableCaching: true,\n    cacheSize: 100,\n    backgroundProcessing: true\n  }\n};\n\nexport class EditorialEngineSettingsTab extends PluginSettingTab {\n  plugin: EditorialEnginePlugin;\n\n  constructor(app: App, plugin: EditorialEnginePlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  async display(): Promise<void> {\n    const { containerEl } = this;\n\n    containerEl.empty();\n\n    containerEl.createEl('h2', { text: 'Editorial Engine Settings' });\n\n    // General Settings\n    this.createGeneralSettings(containerEl);\n    \n    // Mode Settings\n    await this.createModeSettings(containerEl);\n    \n    // Adapter Settings\n    this.createAdapterSettings(containerEl);\n    \n    // Performance Settings\n    this.createPerformanceSettings(containerEl);\n  }\n\n  private createGeneralSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'General Settings' });\n\n    // Get available modes dynamically\n    const availableModes = this.plugin.modeRegistry.getAllModes();\n\n    new Setting(containerEl)\n      .setName('Default Mode')\n      .setDesc('The default editing mode to use when no specific mode is selected')\n      .addDropdown(dropdown => {\n        // Add dynamic modes to dropdown\n        for (const mode of availableModes) {\n          dropdown.addOption(mode.id, mode.name);\n        }\n        \n        dropdown\n          .setValue(this.plugin.settings.defaultMode)\n          .onChange(async (value) => {\n            this.plugin.settings.defaultMode = value;\n            await this.plugin.saveSettings();\n          });\n      });\n\n    new Setting(containerEl)\n      .setName('Strict Mode')\n      .setDesc('Enable strict constraint validation (recommended)')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.constraintValidation.strictMode)\n        .onChange(async (value) => {\n          this.plugin.settings.constraintValidation.strictMode = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Max Processing Time')\n      .setDesc('Maximum time (in seconds) to wait for processing completion')\n      .addSlider(slider => slider\n        .setLimits(5, 60, 5)\n        .setValue(this.plugin.settings.constraintValidation.maxProcessingTime / 1000)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.constraintValidation.maxProcessingTime = value * 1000;\n          await this.plugin.saveSettings();\n        }));\n  }\n\n  private async createModeSettings(containerEl: HTMLElement): Promise<void> {\n    containerEl.createEl('h3', { text: 'Mode Configuration' });\n\n    const modesContainer = containerEl.createDiv('modes-container');\n    modesContainer.style.cssText = `\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      padding: 15px;\n      margin: 10px 0;\n    `;\n\n    // Add info about file-based mode system\n    const infoEl = modesContainer.createEl('p', { \n      text: 'Modes are loaded from .obsidian/plugins/editorial-engine/modes/ folder. Add or edit .md files to create custom modes.',\n      cls: 'setting-item-description'\n    });\n    infoEl.style.cssText = `\n      color: var(--text-muted);\n      font-size: 0.9em;\n      margin-bottom: 15px;\n      padding: 8px;\n      background: var(--background-secondary);\n      border-radius: 3px;\n    `;\n\n    const enabledModes = this.plugin.settings.enabledModes;\n    \n    // Get modes dynamically from the mode registry\n    const availableModes = this.plugin.modeRegistry.getAllModes();\n    \n    if (availableModes.length === 0) {\n      modesContainer.createEl('p', { \n        text: 'No modes found. Add mode files to .obsidian/plugins/editorial-engine/modes/ folder.',\n        cls: 'setting-item-description'\n      });\n      return;\n    }\n\n    for (const mode of availableModes) {\n      new Setting(modesContainer)\n        .setName(mode.name)\n        .setDesc(mode.description || `${mode.name} mode`)\n        .addToggle(toggle => toggle\n          .setValue(enabledModes.includes(mode.id))\n          .onChange(async (value) => {\n            if (value) {\n              if (!enabledModes.includes(mode.id)) {\n                enabledModes.push(mode.id);\n              }\n            } else {\n              const index = enabledModes.indexOf(mode.id);\n              if (index > -1) {\n                enabledModes.splice(index, 1);\n              }\n            }\n            await this.plugin.saveSettings();\n          }));\n    }\n  }\n\n  private createAdapterSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'Adapter Configuration' });\n\n    const adaptersContainer = containerEl.createDiv('adapters-container');\n    adaptersContainer.style.cssText = `\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      padding: 15px;\n      margin: 10px 0;\n    `;\n\n    // Track Edits Adapter\n    const trackEditsConfig = this.plugin.settings.adapters['track-edits'];\n    \n    new Setting(adaptersContainer)\n      .setName('Track Edits Integration')\n      .setDesc('Enable integration with Track Edits plugin for change management')\n      .addToggle(toggle => toggle\n        .setValue(trackEditsConfig.enabled)\n        .onChange(async (value) => {\n          trackEditsConfig.enabled = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(adaptersContainer)\n      .setName('Batch Size')\n      .setDesc('Number of changes to batch together for Track Edits')\n      .addSlider(slider => slider\n        .setLimits(1, 50, 1)\n        .setValue(trackEditsConfig.config.batchSize)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          trackEditsConfig.config.batchSize = value;\n          await this.plugin.saveSettings();\n        }));\n  }\n\n  private createPerformanceSettings(containerEl: HTMLElement): void {\n    containerEl.createEl('h3', { text: 'Performance Settings' });\n\n    new Setting(containerEl)\n      .setName('Enable Caching')\n      .setDesc('Cache processing results to improve performance')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.performance.enableCaching)\n        .onChange(async (value) => {\n          this.plugin.settings.performance.enableCaching = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Cache Size')\n      .setDesc('Maximum number of results to keep in cache')\n      .addSlider(slider => slider\n        .setLimits(10, 500, 10)\n        .setValue(this.plugin.settings.performance.cacheSize)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.performance.cacheSize = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Background Processing')\n      .setDesc('Process long-running tasks in the background')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.performance.backgroundProcessing)\n        .onChange(async (value) => {\n          this.plugin.settings.performance.backgroundProcessing = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Performance monitoring display\n    const performanceContainer = containerEl.createDiv('performance-monitor');\n    performanceContainer.style.cssText = `\n      background: var(--background-secondary);\n      border-radius: 4px;\n      padding: 15px;\n      margin: 15px 0;\n    `;\n    \n    performanceContainer.createEl('h4', { text: 'Performance Metrics' });\n    \n    const metricsEl = performanceContainer.createDiv();\n    this.updatePerformanceMetrics(metricsEl);\n  }\n\n  private updatePerformanceMetrics(container: HTMLElement): void {\n    container.empty();\n    \n    const metrics = this.plugin.getPerformanceMetrics();\n    \n    if (metrics) {\n      const metricsGrid = container.createDiv();\n      metricsGrid.style.cssText = `\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 10px;\n        margin-top: 10px;\n      `;\n      \n      const metricItems = [\n        { label: 'Avg Processing Time', value: `${metrics.avgProcessingTime.toFixed(2)}ms` },\n        { label: 'Success Rate', value: `${(metrics.successRate * 100).toFixed(1)}%` },\n        { label: 'Total Requests', value: metrics.totalRequests.toString() },\n        { label: 'Cache Hit Rate', value: `${(metrics.cacheHitRate * 100).toFixed(1)}%` }\n      ];\n      \n      for (const item of metricItems) {\n        const metricEl = metricsGrid.createDiv();\n        metricEl.style.cssText = `\n          padding: 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 3px;\n        `;\n        metricEl.createEl('div', { text: item.label, cls: 'metric-label' });\n        const valueEl = metricEl.createEl('div', { text: item.value, cls: 'metric-value' });\n        valueEl.style.fontWeight = 'bold';\n      }\n    } else {\n      container.createEl('p', { text: 'No performance data available yet.' });\n    }\n  }\n}", "import { \n  ModeDefinition, \n  CompiledRuleset, \n  ProcessingIntent, \n  ExecutionRuleset,\n  CompiledConstraint,\n  ConstraintType,\n  ValidationRule,\n  ExecutionParameters,\n  ParsedRule,\n  NaturalLanguageRules \n} from './types';\n\nexport class RulesetCompiler {\n  private nlProcessor: NaturalLanguageProcessor;\n\n  constructor() {\n    this.nlProcessor = new NaturalLanguageProcessor();\n  }\n\n  async compile(intent: ProcessingIntent, mode: ModeDefinition): Promise<ExecutionRuleset> {\n    // Use the mode's compiled constraints if available\n    if (mode.constraints && mode.constraints.length > 0) {\n      return {\n        constraints: mode.constraints,\n        validationRules: this.generateValidationRules(mode.constraints),\n        executionParams: this.deriveExecutionParams(intent),\n        compiledAt: Date.now()\n      };\n    }\n\n    // Otherwise, compile from natural language rules\n    return await this.compileMode(mode);\n  }\n\n  async compileMode(mode: ModeDefinition): Promise<CompiledRuleset> {\n    // Parse natural language rules\n    const parsedRules = await this.parseNaturalLanguage(mode.naturalLanguageRules);\n    \n    // Extract constraints from parsed rules\n    const constraints = await this.mapToConstraints(parsedRules);\n    \n    // Generate validation rules\n    const validationRules = this.generateValidationRules(constraints);\n    \n    // Create default execution parameters\n    const executionParams: ExecutionParameters = {\n      timeout: 10000, // 10 seconds default\n      maxRetries: 2,\n      preferredAdapters: ['track-edits'],\n      fallbackStrategy: 'graceful-degradation'\n    };\n    \n    return {\n      constraints,\n      validationRules,\n      executionParams,\n      compiledAt: Date.now()\n    };\n  }\n\n  private async parseNaturalLanguage(rules: NaturalLanguageRules): Promise<ParsedRule[]> {\n    const results: ParsedRule[] = [];\n\n    // Parse allowed rules (permissions)\n    for (const rule of rules.allowed) {\n      const parsed = await this.nlProcessor.parse(rule, 'permission');\n      results.push(parsed);\n    }\n\n    // Parse forbidden rules (prohibitions)\n    for (const rule of rules.forbidden) {\n      const parsed = await this.nlProcessor.parse(rule, 'prohibition');\n      results.push(parsed);\n    }\n\n    // Parse focus rules (guidance)\n    for (const rule of rules.focus) {\n      const parsed = await this.nlProcessor.parse(rule, 'focus');\n      results.push(parsed);\n    }\n\n    // Parse boundary rules (limits)\n    for (const rule of rules.boundaries) {\n      const parsed = await this.nlProcessor.parse(rule, 'boundary');\n      results.push(parsed);\n    }\n\n    return results;\n  }\n\n  private async mapToConstraints(parsedRules: ParsedRule[]): Promise<CompiledConstraint[]> {\n    const constraints: CompiledConstraint[] = [];\n\n    for (const rule of parsedRules) {\n      const constraint = this.ruleToConstraint(rule);\n      if (constraint) {\n        constraints.push(constraint);\n      }\n    }\n\n    return constraints;\n  }\n\n  private ruleToConstraint(rule: ParsedRule): CompiledConstraint | null {\n    // Map parsed natural language rules to programmatic constraints\n    \n    switch (rule.type) {\n      case 'permission':\n        return this.createPermissionConstraint(rule);\n      \n      case 'prohibition':\n        return this.createProhibitionConstraint(rule);\n      \n      case 'boundary':\n        return this.createBoundaryConstraint(rule);\n      \n      case 'focus':\n        return this.createFocusConstraint(rule);\n      \n      default:\n        console.warn(`Unknown rule type: ${rule.type}`);\n        return null;\n    }\n  }\n\n  private createPermissionConstraint(rule: ParsedRule): CompiledConstraint {\n    // Example: \"Fix spelling and grammar errors\" -> GRAMMAR_ONLY constraint\n    const intent = rule.intent.toLowerCase();\n    \n    if (intent.includes('grammar') || intent.includes('spelling')) {\n      return {\n        type: ConstraintType.GRAMMAR_ONLY,\n        parameters: { \n          allowSpelling: true,\n          allowGrammar: true,\n          allowPunctuation: true\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'output-validation',\n          condition: 'minimal-content-change',\n          message: 'Changes should be limited to grammar and spelling'\n        }]\n      };\n    }\n\n    // Default permission constraint\n    return {\n      type: ConstraintType.STYLE_CONSISTENCY,\n      parameters: { allowedOperations: [rule.intent] },\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private createProhibitionConstraint(rule: ParsedRule): CompiledConstraint {\n    // Example: \"Never change the author's voice\" -> PRESERVE_TONE constraint\n    const intent = rule.intent.toLowerCase();\n    \n    if (intent.includes('voice') || intent.includes('style') || intent.includes('tone')) {\n      return {\n        type: ConstraintType.PRESERVE_TONE,\n        parameters: { \n          preserveVoice: true,\n          preserveStyle: true,\n          allowMinorAdjustments: false\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'tone-analysis',\n          condition: 'tone-similarity > 0.9',\n          message: 'Must preserve original tone and voice'\n        }]\n      };\n    }\n\n    if (intent.includes('content') || intent.includes('meaning')) {\n      return {\n        type: ConstraintType.NO_CONTENT_CHANGE,\n        parameters: { \n          preserveMeaning: true,\n          allowClarification: false\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'semantic-analysis',\n          condition: 'meaning-similarity > 0.95',\n          message: 'Must preserve original meaning'\n        }]\n      };\n    }\n\n    // Default prohibition\n    return {\n      type: ConstraintType.NO_CONTENT_CHANGE,\n      parameters: { prohibitedAction: rule.intent },\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private createBoundaryConstraint(rule: ParsedRule): CompiledConstraint {\n    // Example: \"Change no more than 15% of words\" -> LENGTH_LIMIT constraint\n    const intent = rule.intent.toLowerCase();\n    \n    // Extract percentage limits\n    const percentageMatch = intent.match(/(\\d+)%/);\n    if (percentageMatch) {\n      const percentage = parseInt(percentageMatch[1]) / 100;\n      \n      return {\n        type: ConstraintType.LENGTH_LIMIT,\n        parameters: { \n          maxChangeRatio: percentage,\n          measurementType: 'words'\n        },\n        priority: rule.confidence * 10,\n        validation: [{\n          type: 'change-ratio-check',\n          condition: `change-ratio <= ${percentage}`,\n          message: `Changes must not exceed ${percentageMatch[1]}% of original text`\n        }]\n      };\n    }\n\n    // Default boundary constraint\n    return {\n      type: ConstraintType.LENGTH_LIMIT,\n      parameters: { maxChangeRatio: 0.25 }, // 25% default limit\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private createFocusConstraint(rule: ParsedRule): CompiledConstraint {\n    // Focus constraints guide the editing process\n    return {\n      type: ConstraintType.STYLE_CONSISTENCY,\n      parameters: { \n        focusArea: rule.intent,\n        priority: 'high'\n      },\n      priority: rule.confidence * 10,\n      validation: []\n    };\n  }\n\n  private generateValidationRules(constraints: CompiledConstraint[]): ValidationRule[] {\n    const rules: ValidationRule[] = [];\n\n    // Collect validation rules from all constraints\n    for (const constraint of constraints) {\n      rules.push(...constraint.validation);\n    }\n\n    // Add default validation rules\n    rules.push({\n      type: 'basic-validation',\n      condition: 'output-not-empty',\n      message: 'Output must not be empty'\n    });\n\n    return rules;\n  }\n\n  private deriveExecutionParams(intent: ProcessingIntent): ExecutionParameters {\n    // Adjust execution parameters based on intent\n    let timeout = 10000; // Default 10 seconds\n    \n    if (intent.type === 'summarization') {\n      timeout = 15000; // Summarization might take longer\n    } else if (intent.type === 'grammar-check') {\n      timeout = 5000; // Grammar checking should be fast\n    }\n\n    return {\n      timeout,\n      maxRetries: 2,\n      preferredAdapters: ['track-edits'],\n      fallbackStrategy: 'graceful-degradation'\n    };\n  }\n}\n\nclass NaturalLanguageProcessor {\n  // Common patterns for better rule parsing\n  private readonly QUANTIFIER_PATTERNS = [\n    /(\\d+)\\s*%/i,                           // \"25%\", \"50%\"\n    /no more than\\s+(\\d+)\\s*%/i,           // \"no more than 15%\"\n    /less than\\s+(\\d+)\\s*%/i,              // \"less than 20%\"\n    /under\\s+(\\d+)\\s*%/i,                  // \"under 10%\"\n    /(\\d+)\\s*(words?|characters?|sentences?)/i, // \"100 words\", \"50 characters\"\n    /minimal(?:ly)?/i,                     // \"minimal changes\"\n    /maximum\\s+(\\d+)/i                     // \"maximum 3 sentences\"\n  ];\n\n  private readonly PERMISSION_KEYWORDS = [\n    'allow', 'permit', 'enable', 'fix', 'correct', 'improve', 'enhance', \n    'adjust', 'modify', 'update', 'refine', 'polish', 'standardize'\n  ];\n\n  private readonly PROHIBITION_KEYWORDS = [\n    'never', 'don\\'t', 'avoid', 'prevent', 'prohibit', 'forbid', \n    'exclude', 'reject', 'disallow', 'no', 'not'\n  ];\n\n  private readonly FOCUS_KEYWORDS = [\n    'focus', 'emphasize', 'prioritize', 'concentrate', 'target', \n    'highlight', 'stress', 'feature'\n  ];\n\n  private readonly BOUNDARY_KEYWORDS = [\n    'limit', 'restrict', 'bound', 'constrain', 'cap', 'maximum', \n    'minimum', 'within', 'under', 'over'\n  ];\n\n  async parse(rule: string, ruleType: string): Promise<ParsedRule> {\n    // Enhanced rule parsing with better NLP analysis\n    const confidence = this.calculateConfidence(rule);\n    const intent = this.extractIntent(rule, ruleType);\n    const parameters = this.extractParameters(rule);\n    const context = this.extractContext(rule);\n    const constraints = this.extractConstraintHints(rule);\n\n    return {\n      type: ruleType,\n      intent,\n      confidence,\n      parameters: {\n        ...parameters,\n        context,\n        constraints,\n        originalRule: rule\n      }\n    };\n  }\n\n  private calculateConfidence(rule: string): number {\n    let confidence = 0.4; // Base confidence (reduced from 0.5)\n\n    // Rule clarity indicators\n    const clarityIndicators = [\n      /specific|exact|precisely|clearly|explicitly/i,\n      /always|never|must|should|shall/i,\n      /\\d+/,  // Contains numbers\n      /grammar|spelling|punctuation|style|tone|voice|meaning/i\n    ];\n\n    for (const indicator of clarityIndicators) {\n      if (indicator.test(rule)) {\n        confidence += 0.1;\n      }\n    }\n\n    // Quantifiable rules get higher confidence\n    if (this.hasQuantifiers(rule)) {\n      confidence += 0.2;\n    }\n\n    // Technical specificity\n    const technicalTerms = [\n      'subject-verb agreement', 'passive voice', 'sentence structure',\n      'paragraph transitions', 'logical flow', 'argumentation',\n      'semantic analysis', 'syntactic correctness'\n    ];\n\n    for (const term of technicalTerms) {\n      if (rule.toLowerCase().includes(term)) {\n        confidence += 0.15;\n        break; // Only add once for technical specificity\n      }\n    }\n\n    // Rule structure quality\n    if (rule.length > 20 && rule.length < 200) { // Reasonable length\n      confidence += 0.05;\n    }\n\n    return Math.min(confidence, 1.0);\n  }\n\n  private extractIntent(rule: string, ruleType: string): string {\n    const lowerRule = rule.toLowerCase();\n    \n    // Action-based intent extraction\n    const actionPatterns = [\n      { pattern: /fix|correct|repair/, intent: 'correction' },\n      { pattern: /improve|enhance|refine|polish/, intent: 'enhancement' },\n      { pattern: /preserve|maintain|keep|retain/, intent: 'preservation' },\n      { pattern: /check|validate|verify|ensure/, intent: 'validation' },\n      { pattern: /rewrite|restructure|reorganize/, intent: 'restructuring' },\n      { pattern: /summarize|condense|shorten/, intent: 'summarization' },\n      { pattern: /expand|elaborate|develop/, intent: 'expansion' },\n      { pattern: /standardize|normalize|format/, intent: 'standardization' }\n    ];\n\n    for (const { pattern, intent } of actionPatterns) {\n      if (pattern.test(lowerRule)) {\n        return intent;\n      }\n    }\n\n    // Domain-specific intent extraction\n    if (lowerRule.includes('grammar') || lowerRule.includes('spelling')) {\n      return 'grammatical-correction';\n    }\n    \n    if (lowerRule.includes('style') || lowerRule.includes('flow')) {\n      return 'stylistic-improvement';\n    }\n    \n    if (lowerRule.includes('structure') || lowerRule.includes('organization')) {\n      return 'structural-editing';\n    }\n\n    if (lowerRule.includes('voice') || lowerRule.includes('tone')) {\n      return 'voice-preservation';\n    }\n\n    // Fallback based on rule type\n    const typeBasedIntents: Record<string, string> = {\n      'permission': 'allow-operation',\n      'prohibition': 'prevent-operation',\n      'boundary': 'limit-operation',\n      'focus': 'prioritize-operation'\n    };\n\n    return typeBasedIntents[ruleType] || rule.trim();\n  }\n\n  private extractParameters(rule: string): Record<string, any> {\n    const parameters: Record<string, any> = {};\n    \n    // Extract percentages with context\n    const percentageMatches = rule.match(/(\\d+)\\s*%/g);\n    if (percentageMatches) {\n      parameters.percentages = percentageMatches.map(m => parseInt(m));\n      parameters.primaryPercentage = parameters.percentages[0];\n    }\n\n    // Extract word/character/sentence counts\n    const countMatches = rule.matchAll(/(\\d+)\\s*(words?|characters?|sentences?)/gi);\n    for (const match of countMatches) {\n      const count = parseInt(match[1]);\n      const unit = match[2].toLowerCase();\n      parameters[`${unit}Count`] = count;\n    }\n\n    // Extract comparison operators\n    const comparisonPatterns = [\n      { pattern: /no more than|less than|under|below/, operator: 'lte' },\n      { pattern: /more than|greater than|above|over/, operator: 'gte' },\n      { pattern: /exactly|precisely/, operator: 'eq' },\n      { pattern: /approximately|around|about/, operator: 'approx' }\n    ];\n\n    for (const { pattern, operator } of comparisonPatterns) {\n      if (pattern.test(rule.toLowerCase())) {\n        parameters.comparisonOperator = operator;\n        break;\n      }\n    }\n\n    // Extract scope indicators\n    const scopePatterns = [\n      { pattern: /entire|whole|complete|full/, scope: 'document' },\n      { pattern: /paragraph|section/, scope: 'paragraph' },\n      { pattern: /sentence/, scope: 'sentence' },\n      { pattern: /word|phrase/, scope: 'word' }\n    ];\n\n    for (const { pattern, scope } of scopePatterns) {\n      if (pattern.test(rule.toLowerCase())) {\n        parameters.scope = scope;\n        break;\n      }\n    }\n\n    // Extract priority/urgency indicators\n    const priorityPatterns = [\n      { pattern: /critical|essential|vital|must/, priority: 'high' },\n      { pattern: /important|should|recommended/, priority: 'medium' },\n      { pattern: /optional|consider|might/, priority: 'low' }\n    ];\n\n    for (const { pattern, priority } of priorityPatterns) {\n      if (pattern.test(rule.toLowerCase())) {\n        parameters.priority = priority;\n        break;\n      }\n    }\n\n    return parameters;\n  }\n\n  private extractContext(rule: string): Record<string, any> {\n    const context: Record<string, any> = {};\n    const lowerRule = rule.toLowerCase();\n\n    // Document type context\n    const documentTypes = [\n      'academic', 'business', 'creative', 'technical', 'legal', \n      'marketing', 'journalistic', 'scientific'\n    ];\n\n    for (const type of documentTypes) {\n      if (lowerRule.includes(type)) {\n        context.documentType = type;\n        break;\n      }\n    }\n\n    // Audience context\n    const audienceTypes = [\n      'professional', 'academic', 'general', 'technical', 'casual', \n      'formal', 'informal', 'expert', 'beginner'\n    ];\n\n    for (const audience of audienceTypes) {\n      if (lowerRule.includes(audience)) {\n        context.audience = audience;\n        break;\n      }\n    }\n\n    // Style context\n    const styleTypes = [\n      'formal', 'informal', 'conversational', 'authoritative', \n      'persuasive', 'descriptive', 'narrative', 'expository'\n    ];\n\n    for (const style of styleTypes) {\n      if (lowerRule.includes(style)) {\n        context.style = style;\n        break;\n      }\n    }\n\n    // Language features to preserve/modify\n    const languageFeatures = [\n      'terminology', 'jargon', 'idioms', 'metaphors', 'analogies',\n      'voice', 'tone', 'perspective', 'tense', 'person'\n    ];\n\n    context.languageFeatures = [];\n    for (const feature of languageFeatures) {\n      if (lowerRule.includes(feature)) {\n        context.languageFeatures.push(feature);\n      }\n    }\n\n    return context;\n  }\n\n  private extractConstraintHints(rule: string): string[] {\n    const hints: string[] = [];\n    const lowerRule = rule.toLowerCase();\n\n    // Constraint type hints\n    const constraintPatterns = [\n      { pattern: /grammar|spelling|punctuation/, hint: 'grammatical' },\n      { pattern: /style|flow|readability/, hint: 'stylistic' },\n      { pattern: /length|word count|character count/, hint: 'length-based' },\n      { pattern: /tone|voice|perspective/, hint: 'tonal' },\n      { pattern: /structure|organization|format/, hint: 'structural' },\n      { pattern: /content|meaning|intent/, hint: 'semantic' },\n      { pattern: /consistency|uniformity/, hint: 'consistency' },\n      { pattern: /clarity|comprehension/, hint: 'clarity' }\n    ];\n\n    for (const { pattern, hint } of constraintPatterns) {\n      if (pattern.test(lowerRule)) {\n        hints.push(hint);\n      }\n    }\n\n    // Processing approach hints\n    if (lowerRule.includes('minimal') || lowerRule.includes('conservative')) {\n      hints.push('conservative-editing');\n    }\n\n    if (lowerRule.includes('aggressive') || lowerRule.includes('extensive')) {\n      hints.push('extensive-editing');\n    }\n\n    if (lowerRule.includes('preserve') || lowerRule.includes('maintain')) {\n      hints.push('preservation-focused');\n    }\n\n    return hints;\n  }\n\n  private hasQuantifiers(rule: string): boolean {\n    return this.QUANTIFIER_PATTERNS.some(pattern => pattern.test(rule));\n  }\n\n  // Advanced parsing methods for specific domains\n\n  parseGrammarRule(rule: string): Record<string, any> {\n    const grammarAspects = {\n      'subject-verb agreement': /subject.?verb|agreement/i,\n      'tense consistency': /tense|past|present|future/i,\n      'pronoun reference': /pronoun|reference|antecedent/i,\n      'modifier placement': /modifier|dangling|misplaced/i,\n      'parallel structure': /parallel|series|list/i\n    };\n\n    const detected: Record<string, boolean> = {};\n    for (const [aspect, pattern] of Object.entries(grammarAspects)) {\n      detected[aspect] = pattern.test(rule);\n    }\n\n    return detected;\n  }\n\n  parseStyleRule(rule: string): Record<string, any> {\n    const styleAspects = {\n      'sentence variety': /sentence.*variety|varied.*sentence/i,\n      'word choice': /word.*choice|vocabulary|diction/i,\n      'transitions': /transition|flow|connection/i,\n      'conciseness': /concise|wordiness|brevity/i,\n      'active voice': /active.*voice|passive.*voice/i,\n      'clarity': /clear|clarity|comprehension/i\n    };\n\n    const detected: Record<string, boolean> = {};\n    for (const [aspect, pattern] of Object.entries(styleAspects)) {\n      detected[aspect] = pattern.test(rule);\n    }\n\n    return detected;\n  }\n\n  parseStructuralRule(rule: string): Record<string, any> {\n    const structuralAspects = {\n      'paragraph structure': /paragraph.*structure|topic.*sentence/i,\n      'logical flow': /logical.*flow|sequence|order/i,\n      'argumentation': /argument|evidence|support|reasoning/i,\n      'introduction': /introduction|opening|hook/i,\n      'conclusion': /conclusion|ending|summary/i,\n      'headings': /heading|title|section/i\n    };\n\n    const detected: Record<string, boolean> = {};\n    for (const [aspect, pattern] of Object.entries(structuralAspects)) {\n      detected[aspect] = pattern.test(rule);\n    }\n\n    return detected;\n  }\n}", "import { \n  IntakePayload, \n  JobResult, \n  ProcessingIntent, \n  ExecutionRuleset,\n  Change,\n  ProvenanceChain,\n  ExecutionSummary,\n  EditorialEngineSettings,\n  CompiledConstraint,\n  ConstraintType,\n  ValidationRule\n} from './types';\nimport { ModeRegistry } from './mode-registry';\nimport { AdapterManager } from './adapter-manager';\nimport { PerformanceMonitor } from './performance-monitor';\nimport { WritterrEventBus } from './event-bus';\nimport { RulesetCompiler } from './ruleset-compiler';\n\nexport class ConstraintProcessor {\n  private compiler: RulesetCompiler;\n\n  constructor(\n    private modeRegistry: ModeRegistry,\n    private adapterManager: AdapterManager,\n    private performanceMonitor: PerformanceMonitor,\n    private eventBus: WritterrEventBus,\n    private settings: EditorialEngineSettings\n  ) {\n    this.compiler = new RulesetCompiler();\n  }\n\n  async process(intake: IntakePayload): Promise<JobResult> {\n    const startTime = performance.now();\n    \n    try {\n      // 1. Intake Normalization\n      const normalized = await this.normalizeIntake(intake);\n      \n      // 2. Intent Recognition\n      const intent = await this.recognizeIntent(normalized);\n      \n      // 3. Mode Validation\n      const mode = this.modeRegistry.getMode(intake.mode);\n      if (!mode) {\n        throw new Error(`Unknown mode: ${intake.mode}`);\n      }\n      \n      // 4. Constraint Compilation\n      const ruleset = await this.compileConstraints(intent, mode);\n      \n      // 5. Enhanced Validation\n      const validation = await this.validateConstraints(ruleset);\n      if (!validation.valid) {\n        throw new Error(`Constraint validation failed: ${validation.errors.join(', ')}`);\n      }\n      \n      // Log validation warnings if any\n      if (validation.warnings && validation.warnings.length > 0) {\n        console.warn('Constraint validation warnings:', validation.warnings);\n        this.eventBus.emit('constraint-validation-warnings', {\n          intakeId: intake.id,\n          warnings: validation.warnings\n        });\n      }\n      \n      // 6. Execution Planning\n      const executionPlan = await this.createExecutionPlan(ruleset, intake);\n      \n      // 7. Adapter Routing\n      const results = await this.executeViaAdapters(executionPlan);\n      \n      // 8. Result Assembly\n      const finalResult = await this.assembleResults(results, intake, startTime);\n      \n      // Add validation warnings to result summary\n      if (validation.warnings && validation.warnings.length > 0) {\n        finalResult.summary.warnings.push(...validation.warnings);\n      }\n      \n      // 9. Post-Processing Validation\n      await this.validateResults(finalResult, ruleset);\n      \n      return finalResult;\n    } catch (error) {\n      console.error('Constraint processing error:', error);\n      this.eventBus.emit('constraint-processing-error', {\n        intakeId: intake.id,\n        error: error.message,\n        stage: 'processing'\n      });\n      \n      // Return error result\n      return this.createErrorResult(intake, error, startTime);\n    }\n  }\n\n  private async normalizeIntake(intake: IntakePayload): Promise<IntakePayload> {\n    // Input validation to prevent undefined errors\n    if (!intake) {\n      throw new Error('Invalid input for constraint processing: intake payload is null or undefined');\n    }\n\n    if (!intake.instructions || typeof intake.instructions !== 'string') {\n      throw new Error(`Invalid instructions for constraint processing: received ${typeof intake.instructions}, expected string`);\n    }\n\n    if (!intake.sourceText || typeof intake.sourceText !== 'string') {\n      throw new Error(`Invalid source text for constraint processing: received ${typeof intake.sourceText}, expected string`);\n    }\n\n    // Enhanced normalization with validation\n    const instructionsTrimmed = intake.instructions.trim();\n    const sourceTextTrimmed = intake.sourceText.trim();\n\n    // Check for empty strings after trimming\n    if (instructionsTrimmed.length === 0) {\n      throw new Error('Instructions cannot be empty or whitespace-only');\n    }\n\n    if (sourceTextTrimmed.length === 0) {\n      throw new Error('Source text cannot be empty or whitespace-only');\n    }\n\n    const normalized = {\n      ...intake,\n      instructions: instructionsTrimmed,\n      sourceText: sourceTextTrimmed\n    };\n\n    // Set default mode if not provided\n    if (!normalized.mode) {\n      normalized.mode = this.settings.defaultMode || 'proofreader';\n    }\n\n    return normalized;\n  }\n\n  private async recognizeIntent(intake: IntakePayload): Promise<ProcessingIntent> {\n    // Enhanced intent recognition with better pattern matching\n    const instructions = intake.instructions.toLowerCase();\n    let type = 'general-edit';\n    let confidence = 0.7;\n\n    // Specific intent patterns\n    const intentPatterns = [\n      { pattern: /\\b(grammar|spelling|punctuation)\\b/g, intent: 'grammar-check', confidence: 0.9 },\n      { pattern: /\\b(style|flow|readability)\\b/g, intent: 'style-enhancement', confidence: 0.85 },\n      { pattern: /\\b(summarize|summary|condense)\\b/g, intent: 'summarization', confidence: 0.95 },\n      { pattern: /\\b(improve|enhance|polish)\\b/g, intent: 'improvement', confidence: 0.8 },\n      { pattern: /\\b(rewrite|restructure)\\b/g, intent: 'restructuring', confidence: 0.9 },\n      { pattern: /\\b(proofread|check|review)\\b/g, intent: 'proofreading', confidence: 0.85 }\n    ];\n\n    for (const { pattern, intent, confidence: patternConfidence } of intentPatterns) {\n      const matches = instructions.match(pattern);\n      if (matches) {\n        type = intent;\n        confidence = Math.min(patternConfidence + (matches.length - 1) * 0.05, 1.0);\n        break;\n      }\n    }\n\n    return {\n      type,\n      confidence,\n      parameters: {\n        originalInstructions: intake.instructions,\n        textLength: intake.sourceText.length,\n        mode: intake.mode,\n        detectedPatterns: instructions.match(/\\b(grammar|spelling|style|improve|summarize)\\b/g) || []\n      }\n    };\n  }\n\n  private async compileConstraints(intent: ProcessingIntent, mode: any): Promise<ExecutionRuleset> {\n    try {\n      return await this.compiler.compile(intent, mode);\n    } catch (error) {\n      console.error('Constraint compilation failed:', error);\n      throw new Error(`Failed to compile constraints: ${error.message}`);\n    }\n  }\n\n  private async validateConstraints(ruleset: ExecutionRuleset): Promise<{ valid: boolean; errors: string[]; warnings: string[] }> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    \n    // Basic structural validation\n    if (!ruleset.constraints || ruleset.constraints.length === 0) {\n      errors.push('No constraints defined in ruleset');\n    }\n    \n    if (ruleset.executionParams.timeout <= 0) {\n      errors.push('Invalid timeout value - must be positive');\n    }\n    \n    if (ruleset.executionParams.timeout > 60000) { // 1 minute\n      warnings.push('Timeout value is very high (>60s) - may affect user experience');\n    }\n    \n    if (!ruleset.executionParams.preferredAdapters || ruleset.executionParams.preferredAdapters.length === 0) {\n      warnings.push('No preferred adapters specified - execution may be unpredictable');\n    }\n\n    // Constraint-specific validation\n    if (ruleset.constraints && ruleset.constraints.length > 0) {\n      const constraintValidation = await this.validateIndividualConstraints(ruleset.constraints);\n      errors.push(...constraintValidation.errors);\n      warnings.push(...constraintValidation.warnings);\n\n      // Cross-constraint validation\n      const conflictValidation = this.validateConstraintConflicts(ruleset.constraints);\n      errors.push(...conflictValidation.errors);\n      warnings.push(...conflictValidation.warnings);\n    }\n\n    // Validation rules validation\n    if (ruleset.validationRules && ruleset.validationRules.length > 0) {\n      const ruleValidation = this.validateValidationRules(ruleset.validationRules);\n      errors.push(...ruleValidation.errors);\n      warnings.push(...ruleValidation.warnings);\n    }\n\n    // Performance validation\n    if (this.settings.constraintValidation.strictMode) {\n      const performanceValidation = this.validatePerformanceConstraints(ruleset);\n      errors.push(...performanceValidation.errors);\n      warnings.push(...performanceValidation.warnings);\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private async validateIndividualConstraints(constraints: CompiledConstraint[]): Promise<{ errors: string[]; warnings: string[] }> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    for (const constraint of constraints) {\n      // Validate constraint structure\n      if (!constraint.type) {\n        errors.push('Constraint missing type specification');\n        continue;\n      }\n\n      if (constraint.priority < 0 || constraint.priority > 100) {\n        warnings.push(`Constraint priority ${constraint.priority} outside recommended range (0-100)`);\n      }\n\n      // Type-specific validation\n      switch (constraint.type) {\n        case ConstraintType.LENGTH_LIMIT:\n          if (constraint.parameters.maxChangeRatio && \n              (constraint.parameters.maxChangeRatio < 0 || constraint.parameters.maxChangeRatio > 1)) {\n            errors.push('LENGTH_LIMIT maxChangeRatio must be between 0 and 1');\n          }\n          break;\n\n        case ConstraintType.GRAMMAR_ONLY:\n          if (!constraint.parameters.allowSpelling && !constraint.parameters.allowGrammar) {\n            warnings.push('GRAMMAR_ONLY constraint allows neither spelling nor grammar fixes');\n          }\n          break;\n\n        case ConstraintType.PRESERVE_TONE:\n          if (constraint.parameters.preserveVoice === false && constraint.parameters.preserveStyle === false) {\n            warnings.push('PRESERVE_TONE constraint preserves neither voice nor style');\n          }\n          break;\n\n        case ConstraintType.NO_CONTENT_CHANGE:\n          if (constraint.parameters.preserveMeaning === false) {\n            errors.push('NO_CONTENT_CHANGE constraint must preserve meaning');\n          }\n          break;\n      }\n\n      // Validate validation rules within constraints\n      if (constraint.validation && constraint.validation.length > 0) {\n        for (const validationRule of constraint.validation) {\n          if (!validationRule.type || !validationRule.condition) {\n            errors.push('Constraint validation rule missing type or condition');\n          }\n        }\n      }\n    }\n\n    return { errors, warnings };\n  }\n\n  private validateConstraintConflicts(constraints: CompiledConstraint[]): { errors: string[]; warnings: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const constraintTypes = constraints.map(c => c.type);\n    \n    // Grammar-only vs extensive editing conflicts\n    if (constraintTypes.includes(ConstraintType.GRAMMAR_ONLY) && \n        constraintTypes.includes(ConstraintType.STYLE_CONSISTENCY)) {\n      warnings.push('Potential conflict: Grammar-only and style consistency constraints may interfere');\n    }\n\n    // Content preservation vs improvement conflicts\n    if (constraintTypes.includes(ConstraintType.NO_CONTENT_CHANGE)) {\n      const improvementConstraints = constraints.filter(c => \n        c.parameters.allowedOperations?.includes('improvement') ||\n        c.parameters.allowedOperations?.includes('enhancement')\n      );\n      \n      if (improvementConstraints.length > 0) {\n        warnings.push('Potential conflict: Content preservation vs improvement constraints');\n      }\n    }\n\n    // Multiple length limits\n    const lengthConstraints = constraints.filter(c => c.type === ConstraintType.LENGTH_LIMIT);\n    if (lengthConstraints.length > 1) {\n      const ratios = lengthConstraints.map(c => c.parameters.maxChangeRatio).filter(r => r);\n      if (ratios.length > 0) {\n        const minRatio = Math.min(...ratios);\n        const maxRatio = Math.max(...ratios);\n        \n        if (minRatio !== maxRatio) {\n          warnings.push(`Conflicting length limits: ${minRatio * 100}% vs ${maxRatio * 100}%`);\n        }\n      }\n    }\n\n    // Priority conflicts\n    const highPriorityConstraints = constraints.filter(c => c.priority >= 80);\n    if (highPriorityConstraints.length > 3) {\n      warnings.push(`Many high-priority constraints (${highPriorityConstraints.length}) may create conflicts`);\n    }\n\n    return { errors, warnings };\n  }\n\n  private validateValidationRules(validationRules: ValidationRule[]): { errors: string[]; warnings: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    for (const rule of validationRules) {\n      if (!rule.type || !rule.condition) {\n        errors.push('Validation rule missing type or condition');\n        continue;\n      }\n\n      // Check condition syntax\n      if (rule.condition.includes('undefined') || rule.condition.includes('null')) {\n        warnings.push(`Validation rule condition may have undefined references: ${rule.condition}`);\n      }\n\n      // Check for common validation rule patterns\n      if (rule.type === 'change-ratio-check' && !rule.condition.includes('change-ratio')) {\n        errors.push('change-ratio-check rule must reference change-ratio in condition');\n      }\n\n      if (rule.type === 'semantic-analysis' && \n          !rule.condition.includes('meaning-similarity') && !rule.condition.includes('semantic-distance')) {\n        warnings.push('semantic-analysis rule should reference meaning-similarity or semantic-distance');\n      }\n\n      if (rule.type === 'tone-analysis' && !rule.condition.includes('tone-similarity')) {\n        warnings.push('tone-analysis rule should reference tone-similarity');\n      }\n    }\n\n    return { errors, warnings };\n  }\n\n  private validatePerformanceConstraints(ruleset: ExecutionRuleset): { errors: string[]; warnings: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const totalConstraints = ruleset.constraints.length;\n    const complexValidationRules = ruleset.validationRules.filter(r => \n      r.type.includes('semantic') || r.type.includes('tone')\n    ).length;\n\n    if (totalConstraints > 20) {\n      warnings.push(`High constraint count (${totalConstraints}) may impact performance`);\n    }\n\n    if (complexValidationRules > 10) {\n      warnings.push(`Many complex validation rules (${complexValidationRules}) may slow processing`);\n    }\n\n    // Check timeout vs complexity\n    const expectedComplexity = totalConstraints + (complexValidationRules * 2);\n    const recommendedTimeout = Math.max(5000, expectedComplexity * 200);\n\n    if (ruleset.executionParams.timeout < recommendedTimeout) {\n      warnings.push(\n        `Timeout (${ruleset.executionParams.timeout}ms) may be too short for complexity level ` +\n        `(recommended: ${recommendedTimeout}ms)`\n      );\n    }\n\n    return { errors, warnings };\n  }\n\n  private async createExecutionPlan(ruleset: ExecutionRuleset, intake: IntakePayload): Promise<any> {\n    return {\n      id: `plan-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      ruleset,\n      intake,\n      steps: [\n        {\n          type: this.modeToJobType(intake.mode),\n          adapter: 'track-edits',\n          payload: {\n            text: intake.sourceText,\n            instructions: intake.instructions,\n            constraints: ruleset.constraints,\n            mode: intake.mode\n          },\n          priority: 1\n        }\n      ],\n      createdAt: Date.now()\n    };\n  }\n\n  private modeToJobType(mode: string): string {\n    // Map Editorial Engine modes to adapter job types\n    const modeMapping: Record<string, string> = {\n      'proofreader': 'proofreading',\n      'copy-editor': 'editing',\n      'developmental-editor': 'editing',\n      'creative-writing-assistant': 'content-modification'\n    };\n    \n    return modeMapping[mode] || 'text-edit'; // fallback to text-edit if mode not found\n  }\n\n  private async executeViaAdapters(executionPlan: any): Promise<any[]> {\n    const results = [];\n    \n    for (const step of executionPlan.steps) {\n      try {\n        const result = await this.adapterManager.execute({\n          id: `job-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n          type: step.type as any,\n          payload: step.payload,\n          constraints: executionPlan.ruleset.constraints,\n          context: executionPlan.intake.context,\n          timeout: executionPlan.ruleset.executionParams.timeout\n        });\n        \n        results.push({\n          success: true,\n          data: result,\n          adapter: step.adapter,\n          processingTime: result.processingTime || 0\n        });\n      } catch (error) {\n        console.error(`Adapter execution failed for step ${step.type}:`, error);\n        results.push({\n          success: false,\n          error: error.message,\n          data: null,\n          adapter: step.adapter,\n          processingTime: 0\n        });\n      }\n    }\n    \n    return results;\n  }\n\n  private async assembleResults(results: any[], intake: IntakePayload, startTime: number): Promise<JobResult> {\n    const processingTime = performance.now() - startTime;\n    const changes: Change[] = [];\n    const hasSuccessfulResult = results.some(r => r.success);\n    \n    if (hasSuccessfulResult) {\n      // Create change based on successful results\n      for (const result of results.filter(r => r.success)) {\n        if (result.data && result.data.changes) {\n          changes.push(...result.data.changes);\n        } else {\n          // Create a placeholder change for demonstration\n          changes.push({\n            id: `change-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n            type: 'replace',\n            range: { start: 0, end: intake.sourceText.length },\n            originalText: intake.sourceText,\n            newText: intake.sourceText, // Would be modified by actual processing\n            confidence: 0.85,\n            reasoning: `Applied ${intake.mode} mode constraints via ${result.adapter}`,\n            source: 'editorial-engine',\n            timestamp: Date.now()\n          });\n        }\n      }\n    }\n    \n    const provenance: ProvenanceChain = {\n      steps: results.map((result, index) => ({\n        stage: `adapter-execution-${index}`,\n        input: intake,\n        output: result,\n        processingTime: result.processingTime,\n        adapter: result.adapter || 'unknown'\n      })),\n      totalTime: processingTime\n    };\n    \n    const summary: ExecutionSummary = {\n      totalChanges: changes.length,\n      changeSummary: changes.reduce((acc, change) => {\n        acc[change.type] = (acc[change.type] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>),\n      confidence: changes.length > 0 ? changes.reduce((sum, c) => sum + c.confidence, 0) / changes.length : 0,\n      warnings: []\n    };\n    \n    return {\n      id: `result-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      intakeId: intake.id,\n      success: hasSuccessfulResult,\n      processingTime,\n      changes,\n      conflicts: [],\n      provenance,\n      summary,\n      metadata: {\n        mode: intake.mode,\n        adapterResults: results.length,\n        successfulAdapters: results.filter(r => r.success).length,\n        failedAdapters: results.filter(r => !r.success).length\n      }\n    };\n  }\n\n  private async validateResults(result: JobResult, ruleset: ExecutionRuleset): Promise<void> {\n    // Enhanced result validation\n    if (this.settings.constraintValidation.strictMode) {\n      // Check change limits\n      if (result.changes.length > 100) {\n        throw new Error('Too many changes - possible constraint violation (>100 changes)');\n      }\n      \n      // Check processing time\n      if (result.processingTime > this.settings.constraintValidation.maxProcessingTime) {\n        console.warn(`Processing time exceeded limit: ${result.processingTime}ms`);\n      }\n\n      // Validate constraint adherence\n      for (const constraint of ruleset.constraints) {\n        if (constraint.type === ConstraintType.LENGTH_LIMIT) {\n          const changeRatio = this.calculateChangeRatio(result.changes);\n          if (changeRatio > constraint.parameters.maxChangeRatio) {\n            throw new Error(\n              `Change ratio ${(changeRatio * 100).toFixed(1)}% exceeds constraint limit ` +\n              `${(constraint.parameters.maxChangeRatio * 100).toFixed(1)}%`\n            );\n          }\n        }\n      }\n    }\n\n    // Emit validation complete event\n    this.eventBus.emit('result-validation-complete', {\n      resultId: result.id,\n      success: result.success,\n      changeCount: result.changes.length,\n      processingTime: result.processingTime\n    });\n  }\n\n  private calculateChangeRatio(changes: Change[]): number {\n    if (changes.length === 0) return 0;\n    \n    let totalOriginalLength = 0;\n    let totalNewLength = 0;\n    \n    for (const change of changes) {\n      totalOriginalLength += change.originalText.length;\n      totalNewLength += change.newText.length;\n    }\n    \n    if (totalOriginalLength === 0) return 0;\n    \n    return Math.abs(totalNewLength - totalOriginalLength) / totalOriginalLength;\n  }\n\n  private createErrorResult(intake: IntakePayload, error: Error, startTime: number): JobResult {\n    return {\n      id: `error-result-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      intakeId: intake.id,\n      success: false,\n      processingTime: performance.now() - startTime,\n      changes: [],\n      conflicts: [],\n      provenance: {\n        steps: [{\n          stage: 'error',\n          input: intake,\n          output: { error: error.message, stack: error.stack },\n          processingTime: performance.now() - startTime,\n          adapter: 'editorial-engine'\n        }],\n        totalTime: performance.now() - startTime\n      },\n      summary: {\n        totalChanges: 0,\n        changeSummary: {},\n        confidence: 0,\n        warnings: [error.message]\n      },\n      metadata: {\n        error: error.message,\n        mode: intake.mode,\n        stage: 'constraint-processing'\n      }\n    };\n  }\n}", "import { ModeDefinition, CompiledConstraint } from './types';\nimport { WritterrEventBus } from './event-bus';\nimport { RulesetCompiler } from './ruleset-compiler';\n\nexport class ModeRegistry {\n  private modes: Map<string, ModeDefinition> = new Map();\n  private compiler: RulesetCompiler;\n\n  constructor(\n    private eventBus: WritterrEventBus,\n    private settings: any\n  ) {\n    this.compiler = new RulesetCompiler();\n    this.loadPersistedModes();\n  }\n\n  async registerMode(mode: ModeDefinition): Promise<void> {\n    // Validate mode definition\n    const validation = await this.validateMode(mode);\n    if (!validation.valid) {\n      throw new Error(`Mode validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    // Check for version migration if mode already exists\n    if (this.modes.has(mode.id)) {\n      const existingMode = this.modes.get(mode.id)!;\n      mode = await this.migrateMode(mode, existingMode.version);\n    }\n\n    // Compile natural language rules if not already compiled\n    if (!mode.constraints || mode.constraints.length === 0) {\n      try {\n        const compiled = await this.compiler.compileMode(mode);\n        mode.constraints = compiled.constraints;\n      } catch (error) {\n        console.warn(`Failed to compile constraints for mode ${mode.id}:`, error);\n        mode.constraints = [];\n      }\n    }\n\n    // Store mode\n    this.modes.set(mode.id, mode);\n    \n    // Emit registration event\n    this.eventBus.emit('mode-registered', { mode });\n    \n    // Persist custom modes (skip default ones)\n    if (!['proofreader', 'copy-editor', 'developmental-editor', 'creative-writing-assistant'].includes(mode.id)) {\n      await this.persistModes();\n    }\n    \n    console.log(`Registered mode: ${mode.name} (${mode.id})`);\n  }\n\n  getMode(id: string): ModeDefinition | undefined {\n    return this.modes.get(id);\n  }\n\n  getAllModes(): ModeDefinition[] {\n    return Array.from(this.modes.values());\n  }\n\n  getModesByCategory(category: string): ModeDefinition[] {\n    return this.getAllModes().filter(mode => mode.metadata.category === category);\n  }\n\n  async updateMode(id: string, updates: Partial<ModeDefinition>): Promise<void> {\n    const existingMode = this.modes.get(id);\n    if (!existingMode) {\n      throw new Error(`Mode not found: ${id}`);\n    }\n\n    const updatedMode = { ...existingMode, ...updates };\n    \n    // Re-validate and recompile if rules changed\n    if (updates.naturalLanguageRules) {\n      const compiled = await this.compiler.compileMode(updatedMode);\n      updatedMode.constraints = compiled.constraints;\n    }\n\n    this.modes.set(id, updatedMode);\n    this.eventBus.emit('mode-updated', { mode: updatedMode });\n  }\n\n  async removeMode(id: string): Promise<void> {\n    if (this.modes.has(id)) {\n      const mode = this.modes.get(id)!;\n      \n      // Prevent removal of default modes\n      if (['proofreader', 'copy-editor', 'developmental-editor', 'creative-writing-assistant'].includes(id)) {\n        throw new Error(`Cannot remove default mode: ${id}`);\n      }\n      \n      this.modes.delete(id);\n      this.eventBus.emit('mode-removed', { modeId: id, mode });\n      \n      // Update persistence\n      await this.persistModes();\n      \n      console.log(`Removed mode: ${mode.name} (${id})`);\n    }\n  }\n\n  private async validateMode(mode: ModeDefinition): Promise<{ valid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n\n    // Required fields\n    if (!mode.id) errors.push('Mode ID is required');\n    if (!mode.name) errors.push('Mode name is required');\n    if (!mode.description) errors.push('Mode description is required');\n    if (!mode.version) errors.push('Mode version is required');\n\n    // Check for duplicate ID\n    if (mode.id && this.modes.has(mode.id)) {\n      errors.push(`Mode ID already exists: ${mode.id}`);\n    }\n\n    // Validate natural language rules\n    if (!mode.naturalLanguageRules) {\n      errors.push('Natural language rules are required');\n    } else {\n      if (!mode.naturalLanguageRules.allowed || mode.naturalLanguageRules.allowed.length === 0) {\n        errors.push('At least one allowed rule is required');\n      }\n      \n      // Check for empty rules\n      const allRules = [\n        ...mode.naturalLanguageRules.allowed,\n        ...mode.naturalLanguageRules.forbidden,\n        ...mode.naturalLanguageRules.focus,\n        ...mode.naturalLanguageRules.boundaries\n      ];\n      \n      for (const rule of allRules) {\n        if (!rule.trim()) {\n          errors.push('Rules cannot be empty');\n          break;\n        }\n      }\n    }\n\n    // Validate metadata\n    if (!mode.metadata) {\n      errors.push('Mode metadata is required');\n    } else {\n      if (!mode.metadata.category) {\n        errors.push('Mode category is required');\n      }\n      if (!mode.metadata.difficulty) {\n        errors.push('Mode difficulty is required');\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Export modes for sharing/backup\n  exportModes(): string {\n    const modesArray = Array.from(this.modes.values());\n    return JSON.stringify(modesArray, null, 2);\n  }\n\n  // Import modes from JSON\n  async importModes(modesJson: string): Promise<{ imported: number; errors: string[] }> {\n    const errors: string[] = [];\n    let imported = 0;\n\n    try {\n      const modes: ModeDefinition[] = JSON.parse(modesJson);\n      \n      if (!Array.isArray(modes)) {\n        throw new Error('Invalid format: expected array of modes');\n      }\n\n      for (const mode of modes) {\n        try {\n          await this.registerMode(mode);\n          imported++;\n        } catch (error) {\n          errors.push(`Failed to import mode ${mode.id || 'unknown'}: ${error.message}`);\n        }\n      }\n    } catch (error) {\n      errors.push(`JSON parsing failed: ${error.message}`);\n    }\n\n    return { imported, errors };\n  }\n\n  // Mode persistence for Obsidian restarts\n  private async loadPersistedModes(): Promise<void> {\n    if (this.settings?.app?.vault) {\n      try {\n        const data = await this.settings.app.vault.adapter.read('.obsidian/plugins/editorial-engine/modes.json');\n        if (data) {\n          const modes: ModeDefinition[] = JSON.parse(data);\n          for (const mode of modes) {\n            // Skip if mode is already registered (e.g., default modes)\n            if (!this.modes.has(mode.id)) {\n              await this.registerMode(mode);\n            }\n          }\n          console.log(`Loaded ${modes.length} persisted modes`);\n        }\n      } catch (error) {\n        // File doesn't exist or other error - this is normal on first run\n        console.log('No persisted modes found or failed to load');\n      }\n    }\n  }\n\n  private async persistModes(): Promise<void> {\n    if (this.settings?.app?.vault) {\n      try {\n        const customModes = Array.from(this.modes.values()).filter(mode => \n          !['proofreader', 'copy-editor', 'developmental-editor', 'creative-writing-assistant'].includes(mode.id)\n        );\n        \n        const data = JSON.stringify(customModes, null, 2);\n        await this.settings.app.vault.adapter.write('.obsidian/plugins/editorial-engine/modes.json', data);\n        console.log(`Persisted ${customModes.length} custom modes`);\n      } catch (error) {\n        console.error('Failed to persist modes:', error);\n      }\n    }\n  }\n\n  // Version migration support\n  private async migrateMode(mode: ModeDefinition, targetVersion: string): Promise<ModeDefinition> {\n    const currentVersion = mode.version || '1.0.0';\n    \n    if (this.compareVersions(currentVersion, targetVersion) >= 0) {\n      return mode; // Already up to date\n    }\n\n    // Create migration path\n    const migratedMode = { ...mode };\n    \n    // Example migration from 1.0.0 to 1.1.0\n    if (currentVersion === '1.0.0' && this.compareVersions(targetVersion, '1.1.0') >= 0) {\n      // Add new fields that were introduced in 1.1.0\n      if (!migratedMode.metadata.migrationHistory) {\n        migratedMode.metadata.migrationHistory = [\n          {\n            from: currentVersion,\n            to: '1.1.0',\n            timestamp: Date.now(),\n            changes: ['Added migration history tracking']\n          }\n        ];\n      }\n      migratedMode.version = '1.1.0';\n    }\n\n    this.eventBus.emit('mode-migrated', { \n      mode: migratedMode, \n      fromVersion: currentVersion, \n      toVersion: targetVersion \n    });\n\n    return migratedMode;\n  }\n\n  private compareVersions(a: string, b: string): number {\n    const aParts = a.split('.').map(Number);\n    const bParts = b.split('.').map(Number);\n    \n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      const aPart = aParts[i] || 0;\n      const bPart = bParts[i] || 0;\n      \n      if (aPart > bPart) return 1;\n      if (aPart < bPart) return -1;\n    }\n    \n    return 0;\n  }\n}", "import { \n  EngineAdapter, \n  ExecutionJob, \n  EngineResult, \n  OperationType,\n  AdapterStatus,\n  EditorialEngineSettings \n} from './types';\nimport { WritterrEventBus } from './event-bus';\n\nexport class AdapterManager {\n  private adapters: Map<string, EngineAdapter> = new Map();\n  private router: AdapterRouter;\n  private healthMonitor: AdapterHealthMonitor;\n\n  constructor(\n    private eventBus: WritterrEventBus,\n    private settings: EditorialEngineSettings\n  ) {\n    this.router = new AdapterRouter();\n    this.healthMonitor = new AdapterHealthMonitor(this.eventBus);\n  }\n\n  async registerAdapter(adapter: EngineAdapter): Promise<void> {\n    try {\n      // Get configuration for this adapter\n      const config = this.getAdapterConfig(adapter.name);\n      \n      // Initialize adapter\n      await adapter.initialize(config);\n      \n      // Register with router\n      this.router.registerAdapter(adapter);\n      \n      // Store adapter\n      this.adapters.set(adapter.name, adapter);\n      \n      // Start health monitoring\n      this.healthMonitor.startMonitoring(adapter);\n      \n      // Emit registration event\n      this.eventBus.emit('adapter-registered', { \n        name: adapter.name, \n        adapter \n      });\n      \n      console.log(`Registered adapter: ${adapter.name} v${adapter.version}`);\n    } catch (error) {\n      console.error(`Failed to register adapter ${adapter.name}:`, error);\n      throw error;\n    }\n  }\n\n  async execute(job: ExecutionJob): Promise<EngineResult> {\n    const startTime = performance.now();\n    \n    try {\n      // Find suitable adapters using enhanced routing\n      const suitableAdapters = this.router.findSuitableAdapters(job);\n      \n      if (suitableAdapters.length === 0) {\n        const error = new Error(\n          `No suitable adapter found for job type: ${job.type}. ` +\n          `Available adapters: ${this.adapters.size}, ` +\n          `Registered adapter types: ${Array.from(this.adapters.values()).map(a => a.supportedOperations).flat().join(', ')}`\n        );\n        \n        this.eventBus.emit('adapter-execution-failed', { \n          jobId: job.id, \n          error: error.message,\n          availableAdapters: Array.from(this.adapters.keys()),\n          requestedJobType: job.type\n        });\n        \n        throw error;\n      }\n\n      // Try adapters in order returned by routing strategy\n      let lastError: Error | null = null;\n      const attemptedAdapters: string[] = [];\n      \n      for (const adapter of suitableAdapters) {\n        attemptedAdapters.push(adapter.name);\n        \n        try {\n          // Update adapter load before execution\n          this.router.updateAdapterLoad(adapter.name, this.getCurrentAdapterLoad(adapter.name));\n          \n          const result = await this.executeWithAdapter(adapter, job);\n          const executionTime = performance.now() - startTime;\n          \n          // Record successful execution in router metrics\n          this.router.recordAdapterExecution(adapter.name, executionTime, true);\n          \n          // Record execution for performance monitoring\n          this.recordExecution(adapter.name, true, executionTime);\n          \n          // Emit success event\n          this.eventBus.emit('adapter-execution-success', {\n            jobId: job.id,\n            adapterName: adapter.name,\n            executionTime,\n            attemptedAdapters\n          });\n          \n          return result;\n        } catch (error) {\n          const executionTime = performance.now() - startTime;\n          \n          console.warn(`Adapter ${adapter.name} failed for job ${job.id}:`, error);\n          lastError = error;\n          \n          // Record failed execution in router metrics\n          this.router.recordAdapterExecution(adapter.name, executionTime, false);\n          \n          // Record failed execution for performance monitoring\n          this.recordExecution(adapter.name, false, executionTime);\n          \n          // Emit adapter failure event\n          this.eventBus.emit('adapter-execution-attempt-failed', {\n            jobId: job.id,\n            adapterName: adapter.name,\n            error: error.message,\n            executionTime,\n            remainingAdapters: suitableAdapters.length - attemptedAdapters.length\n          });\n          \n          // Continue to next adapter if available\n          continue;\n        }\n      }\n      \n      // All adapters failed\n      const finalError = new Error(\n        `All suitable adapters failed for job ${job.id}. ` +\n        `Attempted adapters: ${attemptedAdapters.join(', ')}. ` +\n        `Last error: ${lastError?.message || 'Unknown error'}`\n      );\n      \n      this.eventBus.emit('adapter-execution-failed', { \n        jobId: job.id, \n        error: finalError.message,\n        attemptedAdapters,\n        lastError: lastError?.message\n      });\n      \n      throw finalError;\n    } catch (error) {\n      // Ensure error event is emitted for any execution failure\n      if (error.message && !error.message.includes('No suitable adapter')) {\n        this.eventBus.emit('adapter-execution-failed', { \n          jobId: job.id, \n          error: error.message \n        });\n      }\n      \n      throw error;\n    }\n  }\n\n  private async executeWithAdapter(adapter: EngineAdapter, job: ExecutionJob): Promise<EngineResult> {\n    // Check adapter health before execution\n    const status = adapter.getStatus();\n    if (!status.healthy) {\n      throw new Error(`Adapter ${adapter.name} is not healthy: ${status.error}`);\n    }\n\n    // Set timeout\n    const timeoutPromise = new Promise<EngineResult>((_, reject) => {\n      setTimeout(() => reject(new Error('Adapter execution timeout')), job.timeout);\n    });\n\n    // Execute with timeout\n    const executionPromise = adapter.execute(job);\n    \n    const result = await Promise.race([executionPromise, timeoutPromise]);\n    \n    if (!result.success) {\n      throw new Error(`Adapter execution failed: ${result.errors?.map(e => e.message).join(', ')}`);\n    }\n    \n    return result;\n  }\n\n  getAdapter(name: string): EngineAdapter | undefined {\n    return this.adapters.get(name);\n  }\n\n  getAllAdapters(): EngineAdapter[] {\n    return Array.from(this.adapters.values());\n  }\n\n  getAdapterCount(): number {\n    return this.adapters.size;\n  }\n\n  getAdapterStatus(name: string): AdapterStatus | undefined {\n    const adapter = this.adapters.get(name);\n    return adapter?.getStatus();\n  }\n\n  getAllAdapterStatuses(): Record<string, AdapterStatus> {\n    const statuses: Record<string, AdapterStatus> = {};\n    \n    for (const [name, adapter] of this.adapters) {\n      statuses[name] = adapter.getStatus();\n    }\n    \n    return statuses;\n  }\n\n  private getAdapterConfig(adapterName: string): any {\n    return this.settings.adapters[adapterName]?.config || {};\n  }\n\n  private recordExecution(adapterName: string, success: boolean, responseTime: number): void {\n    this.eventBus.emit('adapter-execution-recorded', {\n      adapterName,\n      success,\n      responseTime,\n      timestamp: Date.now()\n    });\n  }\n\n  private getCurrentAdapterLoad(adapterName: string): number {\n    // Calculate current load based on pending operations\n    // This is a simplified implementation - in a real system you'd track active jobs\n    const adapter = this.adapters.get(adapterName);\n    if (!adapter) return 0;\n    \n    const status = adapter.getStatus();\n    return status.currentLoad || 0;\n  }\n\n  // Enhanced adapter management methods\n  setRoutingStrategy(strategy: 'priority' | 'round-robin' | 'load-balanced'): void {\n    this.router.setRoutingStrategy(strategy);\n    \n    this.eventBus.emit('routing-strategy-changed', {\n      newStrategy: strategy,\n      timestamp: Date.now()\n    });\n  }\n\n  getRoutingStrategy(): string {\n    return this.router.getRoutingStrategy();\n  }\n\n  getAdapterMetrics(): Record<string, any> {\n    return this.router.getAdapterMetrics();\n  }\n\n  getDetailedAdapterStatus(): Record<string, any> {\n    const detailedStatus: Record<string, any> = {};\n    \n    for (const [name, adapter] of this.adapters) {\n      const status = adapter.getStatus();\n      const metrics = this.router.getAdapterMetrics()[name];\n      \n      detailedStatus[name] = {\n        ...status,\n        metrics,\n        capabilities: adapter.capabilities,\n        supportedOperations: adapter.supportedOperations,\n        lastHealthCheck: status.lastHealthCheck || Date.now()\n      };\n    }\n    \n    return detailedStatus;\n  }\n\n  async cleanup(): Promise<void> {\n    // Stop health monitoring\n    this.healthMonitor.cleanup();\n    \n    // Cleanup all adapters\n    for (const [name, adapter] of this.adapters) {\n      try {\n        await adapter.cleanup();\n      } catch (error) {\n        console.error(`Error cleaning up adapter ${name}:`, error);\n      }\n    }\n    \n    // Clear adapters\n    this.adapters.clear();\n  }\n}\n\nclass AdapterRouter {\n  private adapters: EngineAdapter[] = [];\n  private routingStrategy: 'priority' | 'round-robin' | 'load-balanced' = 'priority';\n  private roundRobinIndex: number = 0;\n  private adapterMetrics: Map<string, AdapterMetrics> = new Map();\n\n  constructor(routingStrategy: 'priority' | 'round-robin' | 'load-balanced' = 'priority') {\n    this.routingStrategy = routingStrategy;\n  }\n\n  registerAdapter(adapter: EngineAdapter): void {\n    this.adapters.push(adapter);\n    \n    // Initialize metrics for this adapter\n    this.adapterMetrics.set(adapter.name, {\n      totalRequests: 0,\n      successfulRequests: 0,\n      averageResponseTime: 0,\n      currentLoad: 0,\n      lastUsed: 0,\n      priority: this.extractAdapterPriority(adapter)\n    });\n    \n    // Sort adapters by priority\n    this.sortAdaptersByPriority();\n  }\n\n  findSuitableAdapters(job: ExecutionJob): EngineAdapter[] {\n    // First filter by basic compatibility\n    const compatibleAdapters = this.adapters.filter(adapter => \n      this.isAdapterCompatible(adapter, job)\n    );\n\n    if (compatibleAdapters.length === 0) {\n      return [];\n    }\n\n    // Apply routing strategy\n    switch (this.routingStrategy) {\n      case 'priority':\n        return this.priorityRouting(compatibleAdapters, job);\n      \n      case 'round-robin':\n        return this.roundRobinRouting(compatibleAdapters);\n      \n      case 'load-balanced':\n        return this.loadBalancedRouting(compatibleAdapters, job);\n      \n      default:\n        return compatibleAdapters;\n    }\n  }\n\n  private isAdapterCompatible(adapter: EngineAdapter, job: ExecutionJob): boolean {\n    // Check if adapter supports the operation type\n    if (!adapter.supportedOperations.includes(job.type)) {\n      return false;\n    }\n    \n    // Check if adapter is healthy\n    const status = adapter.getStatus();\n    if (!status.healthy) {\n      return false;\n    }\n    \n    // Check payload size limits\n    if (job.payload && typeof job.payload.text === 'string') {\n      const textLength = job.payload.text.length;\n      if (textLength > adapter.capabilities.maxTextLength) {\n        return false;\n      }\n    }\n\n    // Check adapter-specific constraints\n    if (job.constraints && job.constraints.length > 0) {\n      const requiredCapabilities = this.extractRequiredCapabilities(job.constraints);\n      \n      for (const capability of requiredCapabilities) {\n        if (!adapter.capabilities.supportedConstraints?.includes(capability)) {\n          return false;\n        }\n      }\n    }\n\n    // Check timeout compatibility\n    if (job.timeout > adapter.capabilities.maxProcessingTime) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  private priorityRouting(adapters: EngineAdapter[], job: ExecutionJob): EngineAdapter[] {\n    // Sort by priority score (higher is better)\n    return adapters.sort((a, b) => {\n      const scoreA = this.calculateAdapterScore(a, job);\n      const scoreB = this.calculateAdapterScore(b, job);\n      return scoreB - scoreA;\n    });\n  }\n\n  private roundRobinRouting(adapters: EngineAdapter[]): EngineAdapter[] {\n    if (adapters.length === 0) return [];\n    \n    // Select next adapter in round-robin fashion\n    const selectedAdapter = adapters[this.roundRobinIndex % adapters.length];\n    this.roundRobinIndex = (this.roundRobinIndex + 1) % adapters.length;\n    \n    // Return selected adapter first, then others as fallbacks\n    const result = [selectedAdapter];\n    result.push(...adapters.filter(a => a.name !== selectedAdapter.name));\n    \n    return result;\n  }\n\n  private loadBalancedRouting(adapters: EngineAdapter[], job: ExecutionJob): EngineAdapter[] {\n    // Sort by current load and performance metrics\n    return adapters.sort((a, b) => {\n      const metricsA = this.adapterMetrics.get(a.name)!;\n      const metricsB = this.adapterMetrics.get(b.name)!;\n      \n      // Calculate load-adjusted priority\n      const loadScoreA = this.calculateLoadScore(metricsA);\n      const loadScoreB = this.calculateLoadScore(metricsB);\n      \n      return loadScoreB - loadScoreA;\n    });\n  }\n\n  private calculateAdapterScore(adapter: EngineAdapter, job: ExecutionJob): number {\n    const metrics = this.adapterMetrics.get(adapter.name);\n    if (!metrics) return 0;\n\n    let score = metrics.priority * 10; // Base priority weight\n\n    // Success rate bonus\n    const successRate = metrics.totalRequests > 0 \n      ? metrics.successfulRequests / metrics.totalRequests \n      : 0.5;\n    score += successRate * 20;\n\n    // Response time penalty (lower is better)\n    const responseTimePenalty = Math.min(metrics.averageResponseTime / 1000, 10);\n    score -= responseTimePenalty;\n\n    // Current load penalty\n    score -= metrics.currentLoad * 5;\n\n    // Recency bonus (prefer recently successful adapters)\n    const recencyBonus = Math.max(0, 10 - ((Date.now() - metrics.lastUsed) / 1000));\n    score += recencyBonus;\n\n    // Job-specific compatibility bonus\n    if (job.constraints) {\n      const compatibilityBonus = this.calculateCompatibilityBonus(adapter, job);\n      score += compatibilityBonus;\n    }\n\n    return Math.max(0, score);\n  }\n\n  private calculateLoadScore(metrics: AdapterMetrics): number {\n    const successRate = metrics.totalRequests > 0 \n      ? metrics.successfulRequests / metrics.totalRequests \n      : 0.5;\n    \n    const loadPenalty = metrics.currentLoad * 0.3;\n    const responsePenalty = metrics.averageResponseTime / 10000; // Convert to seconds\n    \n    return (successRate * 100) - loadPenalty - responsePenalty;\n  }\n\n  private calculateCompatibilityBonus(adapter: EngineAdapter, job: ExecutionJob): number {\n    let bonus = 0;\n\n    // Bonus for specific operation type expertise\n    const operationBonus: Record<string, number> = {\n      'grammar-check': adapter.name.includes('grammar') ? 5 : 0,\n      'style-enhancement': adapter.name.includes('style') ? 5 : 0,\n      'summarization': adapter.name.includes('summarize') ? 5 : 0\n    };\n\n    bonus += operationBonus[job.type] || 0;\n\n    // Bonus for constraint support\n    if (job.constraints) {\n      const supportedConstraints = job.constraints.filter(constraint => \n        adapter.capabilities.supportedConstraints?.includes(constraint.type)\n      );\n      \n      bonus += supportedConstraints.length * 2;\n    }\n\n    return bonus;\n  }\n\n  private extractRequiredCapabilities(constraints: any[]): string[] {\n    const capabilities = new Set<string>();\n    \n    for (const constraint of constraints) {\n      if (constraint.type === 'PRESERVE_TONE') {\n        capabilities.add('tone-analysis');\n      }\n      if (constraint.type === 'NO_CONTENT_CHANGE') {\n        capabilities.add('semantic-analysis');\n      }\n      if (constraint.type === 'GRAMMAR_ONLY') {\n        capabilities.add('grammar-checking');\n      }\n      if (constraint.type === 'STYLE_CONSISTENCY') {\n        capabilities.add('style-analysis');\n      }\n    }\n    \n    return Array.from(capabilities);\n  }\n\n  private extractAdapterPriority(adapter: EngineAdapter): number {\n    // Extract priority from adapter metadata or configuration\n    return adapter.metadata?.priority || 5; // Default priority\n  }\n\n  private sortAdaptersByPriority(): void {\n    this.adapters.sort((a, b) => {\n      const metricsA = this.adapterMetrics.get(a.name);\n      const metricsB = this.adapterMetrics.get(b.name);\n      \n      const priorityA = metricsA?.priority || 5;\n      const priorityB = metricsB?.priority || 5;\n      \n      return priorityB - priorityA;\n    });\n  }\n\n  // Metrics update methods\n  recordAdapterExecution(adapterName: string, responseTime: number, success: boolean): void {\n    const metrics = this.adapterMetrics.get(adapterName);\n    if (!metrics) return;\n\n    metrics.totalRequests++;\n    if (success) {\n      metrics.successfulRequests++;\n    }\n\n    // Update average response time\n    metrics.averageResponseTime = (\n      (metrics.averageResponseTime * (metrics.totalRequests - 1)) + responseTime\n    ) / metrics.totalRequests;\n\n    metrics.lastUsed = Date.now();\n  }\n\n  updateAdapterLoad(adapterName: string, currentLoad: number): void {\n    const metrics = this.adapterMetrics.get(adapterName);\n    if (metrics) {\n      metrics.currentLoad = currentLoad;\n    }\n  }\n\n  setRoutingStrategy(strategy: 'priority' | 'round-robin' | 'load-balanced'): void {\n    this.routingStrategy = strategy;\n    \n    if (strategy === 'round-robin') {\n      this.roundRobinIndex = 0; // Reset round-robin counter\n    }\n  }\n\n  getAdapterMetrics(): Record<string, AdapterMetrics> {\n    const result: Record<string, AdapterMetrics> = {};\n    for (const [name, metrics] of this.adapterMetrics) {\n      result[name] = { ...metrics };\n    }\n    return result;\n  }\n\n  getRoutingStrategy(): string {\n    return this.routingStrategy;\n  }\n}\n\n// Interface for adapter metrics\ninterface AdapterMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  averageResponseTime: number;\n  currentLoad: number;\n  lastUsed: number;\n  priority: number;\n}\n\nclass AdapterHealthMonitor {\n  private intervals: Map<string, NodeJS.Timeout> = new Map();\n  private readonly HEALTH_CHECK_INTERVAL = 30000; // 30 seconds\n\n  constructor(private eventBus: WritterrEventBus) {}\n\n  startMonitoring(adapter: EngineAdapter): void {\n    // Clear existing monitoring for this adapter\n    this.stopMonitoring(adapter.name);\n    \n    // Start new monitoring\n    const interval = setInterval(() => {\n      this.checkAdapterHealth(adapter);\n    }, this.HEALTH_CHECK_INTERVAL);\n    \n    this.intervals.set(adapter.name, interval);\n  }\n\n  stopMonitoring(adapterName: string): void {\n    const interval = this.intervals.get(adapterName);\n    if (interval) {\n      clearInterval(interval);\n      this.intervals.delete(adapterName);\n    }\n  }\n\n  private async checkAdapterHealth(adapter: EngineAdapter): Promise<void> {\n    try {\n      const status = adapter.getStatus();\n      \n      if (!status.healthy) {\n        this.eventBus.emit('adapter-health-warning', {\n          adapterName: adapter.name,\n          status,\n          timestamp: Date.now()\n        });\n      }\n    } catch (error) {\n      this.eventBus.emit('adapter-health-error', {\n        adapterName: adapter.name,\n        error: error.message,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  cleanup(): void {\n    // Stop all health monitoring\n    for (const [name, interval] of this.intervals) {\n      clearInterval(interval);\n    }\n    this.intervals.clear();\n  }\n}", "// Platform Manager for Global API Registration\nimport { WritterrPlatformAPI } from '@shared/types';\n\ninterface PluginInfo {\n  version: string;\n  loaded: boolean;\n  api?: any;\n}\n\nexport class PlatformManager {\n  private static instance?: PlatformManager;\n  private plugins: Map<string, any> = new Map();\n  \n  static getInstance(): PlatformManager {\n    if (!PlatformManager.instance) {\n      PlatformManager.instance = new PlatformManager();\n    }\n    return PlatformManager.instance;\n  }\n\n  registerPlugin(name: string, plugin: any, api: any): void {\n    this.plugins.set(name, { plugin, api });\n    \n    // Update or create global platform object\n    const platform = this.getPlatform();\n    (platform as any)[name] = api;\n    \n    // Update plugin info\n    if (plugin.manifest) {\n      platform.plugins[name as keyof typeof platform.plugins] = {\n        version: plugin.manifest.version,\n        loaded: true,\n        api\n      };\n    }\n    \n    console.log(`Registered ${name} plugin with platform API`);\n  }\n\n  unregisterPlugin(name: string): void {\n    if (this.plugins.has(name)) {\n      this.plugins.delete(name);\n      \n      const platform = this.getPlatform();\n      delete (platform as any)[name];\n      \n      if (platform.plugins[name as keyof typeof platform.plugins]) {\n        platform.plugins[name as keyof typeof platform.plugins] = {\n          version: '',\n          loaded: false\n        };\n      }\n      \n      console.log(`Unregistered ${name} plugin from platform API`);\n    }\n  }\n\n  getPlatform(): WritterrPlatformAPI {\n    if (!window.Writerr) {\n      this.createPlatform();\n    }\n    return window.Writerr as WritterrPlatformAPI;\n  }\n\n  getPlugin(name: string): any {\n    return this.plugins.get(name);\n  }\n\n  isPluginRegistered(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getAllPlugins(): string[] {\n    return Array.from(this.plugins.keys());\n  }\n\n  private createPlatform(): void {\n    const platform: WritterrPlatformAPI = {\n      version: '1.0.0',\n      plugins: {}\n    };\n\n    (window as any).Writerr = platform;\n    \n    console.log('Created Writerr platform object');\n  }\n\n  // Utility methods for cross-plugin communication\n  async waitForPlugin(name: string, timeout: number = 10000): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const checkPlugin = () => {\n        const plugin = this.plugins.get(name);\n        if (plugin) {\n          resolve(plugin.api);\n          return;\n        }\n        \n        // Check again in 100ms\n        setTimeout(checkPlugin, 100);\n      };\n      \n      // Set timeout\n      setTimeout(() => {\n        reject(new Error(`Plugin ${name} not registered within ${timeout}ms`));\n      }, timeout);\n      \n      checkPlugin();\n    });\n  }\n\n  notifyPluginReady(name: string): void {\n    const platform = this.getPlatform();\n    \n    // Emit event if event bus is available\n    if (platform.events && typeof platform.events.emit === 'function') {\n      platform.events.emit('plugin-ready', { name });\n    }\n  }\n}\n\n// Global declaration is already handled in shared types", "import { WritterrEventBus } from './event-bus';\n\nexport interface PerformanceMetrics {\n  avgProcessingTime: number;\n  successRate: number;\n  totalRequests: number;\n  cacheHitRate: number;\n  memoryUsage?: number;\n  lastUpdated: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  requestsPerMinute: number;\n  errorCount: number;\n  timeDistribution: {\n    fast: number;    // < 1s\n    medium: number;  // 1-5s\n    slow: number;    // > 5s\n  };\n  adapterMetrics: Record<string, {\n    requests: number;\n    successRate: number;\n    avgResponseTime: number;\n  }>;\n}\n\nexport class PerformanceMonitor {\n  private metrics: {\n    totalRequests: number;\n    successfulRequests: number;\n    totalProcessingTime: number;\n    cacheHits: number;\n    cacheRequests: number;\n    requestTimes: number[];\n    adapterStats: Map<string, {\n      requests: number;\n      successful: number;\n      totalTime: number;\n    }>;\n  } = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    totalProcessingTime: 0,\n    cacheHits: 0,\n    cacheRequests: 0,\n    requestTimes: [],\n    adapterStats: new Map()\n  };\n\n  private readonly MAX_REQUEST_TIMES = 1000; // Keep last 1000 request times\n\n  constructor(private eventBus: WritterrEventBus) {\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    this.eventBus.on('processing-completed', (data: any) => {\n      this.recordRequest(data.result.processingTime, true);\n    });\n\n    this.eventBus.on('processing-failed', (data: any) => {\n      this.recordRequest(0, false);\n    });\n\n    this.eventBus.on('adapter-execution-recorded', (data: any) => {\n      this.recordAdapterExecution(\n        data.adapterName,\n        data.responseTime,\n        data.success\n      );\n    });\n\n    // Emit metrics updates periodically\n    setInterval(() => {\n      this.emitMetricsUpdate();\n    }, 30000); // Every 30 seconds\n  }\n\n  recordRequest(processingTime: number, success: boolean): void {\n    this.metrics.totalRequests++;\n    \n    if (success) {\n      this.metrics.successfulRequests++;\n      this.metrics.totalProcessingTime += processingTime;\n      \n      // Store request time (keep only last MAX_REQUEST_TIMES)\n      this.metrics.requestTimes.push(processingTime);\n      if (this.metrics.requestTimes.length > this.MAX_REQUEST_TIMES) {\n        this.metrics.requestTimes.shift();\n      }\n    }\n  }\n\n  recordCacheHit(): void {\n    this.metrics.cacheRequests++;\n    this.metrics.cacheHits++;\n  }\n\n  recordCacheMiss(): void {\n    this.metrics.cacheRequests++;\n  }\n\n  private recordAdapterExecution(adapterName: string, responseTime: number, success: boolean): void {\n    if (!this.metrics.adapterStats.has(adapterName)) {\n      this.metrics.adapterStats.set(adapterName, {\n        requests: 0,\n        successful: 0,\n        totalTime: 0\n      });\n    }\n\n    const stats = this.metrics.adapterStats.get(adapterName)!;\n    stats.requests++;\n    stats.totalTime += responseTime;\n    \n    if (success) {\n      stats.successful++;\n    }\n  }\n\n  getCurrentMetrics(): PerformanceMetrics {\n    const avgProcessingTime = this.metrics.successfulRequests > 0\n      ? this.metrics.totalProcessingTime / this.metrics.successfulRequests\n      : 0;\n\n    const successRate = this.metrics.totalRequests > 0\n      ? this.metrics.successfulRequests / this.metrics.totalRequests\n      : 0;\n\n    const cacheHitRate = this.metrics.cacheRequests > 0\n      ? this.metrics.cacheHits / this.metrics.cacheRequests\n      : 0;\n\n    return {\n      avgProcessingTime,\n      successRate,\n      totalRequests: this.metrics.totalRequests,\n      cacheHitRate,\n      lastUpdated: Date.now()\n    };\n  }\n\n  getDetailedMetrics(): DetailedMetrics {\n    const basicMetrics = this.getCurrentMetrics();\n    \n    // Calculate time distribution\n    const timeDistribution = {\n      fast: 0,\n      medium: 0,\n      slow: 0\n    };\n\n    for (const time of this.metrics.requestTimes) {\n      if (time < 1000) {\n        timeDistribution.fast++;\n      } else if (time < 5000) {\n        timeDistribution.medium++;\n      } else {\n        timeDistribution.slow++;\n      }\n    }\n\n    // Calculate requests per minute (based on last hour of data)\n    const recentRequests = this.metrics.requestTimes.filter(\n      time => time > Date.now() - 3600000 // Last hour\n    );\n    const requestsPerMinute = recentRequests.length / 60;\n\n    // Adapter metrics\n    const adapterMetrics: Record<string, any> = {};\n    for (const [name, stats] of this.metrics.adapterStats) {\n      adapterMetrics[name] = {\n        requests: stats.requests,\n        successRate: stats.requests > 0 ? stats.successful / stats.requests : 0,\n        avgResponseTime: stats.requests > 0 ? stats.totalTime / stats.requests : 0\n      };\n    }\n\n    return {\n      ...basicMetrics,\n      requestsPerMinute,\n      errorCount: this.metrics.totalRequests - this.metrics.successfulRequests,\n      timeDistribution,\n      adapterMetrics\n    };\n  }\n\n  private emitMetricsUpdate(): void {\n    const metrics = this.getCurrentMetrics();\n    this.eventBus.emit('performance-metrics-updated', { metrics });\n  }\n\n  // Memory usage tracking (if available)\n  updateMemoryUsage(): void {\n    if (typeof (performance as any).memory !== 'undefined') {\n      const memInfo = (performance as any).memory;\n      // Store memory usage for reporting\n      // This is a Chrome-specific API\n    }\n  }\n\n  // Reset metrics (useful for testing)\n  reset(): void {\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      totalProcessingTime: 0,\n      cacheHits: 0,\n      cacheRequests: 0,\n      requestTimes: [],\n      adapterStats: new Map()\n    };\n  }\n\n  cleanup(): void {\n    // Remove event listeners would be done here if we stored references\n    // For now, just reset metrics\n    this.reset();\n  }\n\n  // Export metrics for external monitoring\n  exportMetrics(): string {\n    const detailed = this.getDetailedMetrics();\n    return JSON.stringify(detailed, null, 2);\n  }\n\n  // Alert thresholds\n  checkThresholds(): { alerts: string[]; warnings: string[] } {\n    const metrics = this.getCurrentMetrics();\n    const alerts: string[] = [];\n    const warnings: string[] = [];\n\n    // Check processing time\n    if (metrics.avgProcessingTime > 5000) {\n      alerts.push(`High average processing time: ${metrics.avgProcessingTime.toFixed(0)}ms`);\n    } else if (metrics.avgProcessingTime > 2000) {\n      warnings.push(`Elevated processing time: ${metrics.avgProcessingTime.toFixed(0)}ms`);\n    }\n\n    // Check success rate\n    if (metrics.successRate < 0.8) {\n      alerts.push(`Low success rate: ${(metrics.successRate * 100).toFixed(1)}%`);\n    } else if (metrics.successRate < 0.95) {\n      warnings.push(`Reduced success rate: ${(metrics.successRate * 100).toFixed(1)}%`);\n    }\n\n    return { alerts, warnings };\n  }\n}", "// Event Bus Implementation for Editorial Engine\nimport { WritterrEventType, WritterrEventData, WritterrEventMap } from '../../../shared/types';\n\nexport interface WritterrEventBus {\n  emit<T = any>(event: string, data: T): void;\n  on<T = any>(event: string, handler: (data: T) => void): void;\n  off(event: string, handler: Function): void;\n  once<T = any>(event: string, handler: (data: T) => void): void;\n  cleanup(): void;\n  setDebugMode(enabled: boolean): void;\n  getEventCounts(): Record<string, number>;\n  getAllEvents(): string[];\n  hasListeners(event: string): boolean;\n  getListenerCount(event: string): number;\n  removeAllListeners(event?: string): void;\n  resetCircuitBreaker(event: string): void;\n  getCircuitBreakerStatus(): Record<string, { errorCount: number; disabled: boolean }>;\n  setCircuitBreakerThreshold(threshold: number): void;\n}\n\nexport class WritterrEventBus implements WritterrEventBus {\n  private handlers: Map<string, Set<Function>> = new Map();\n  private debugMode: boolean = false;\n  private errorCounts: Map<string, number> = new Map();\n  private circuitBreakerThreshold: number = 5;\n  private disabledHandlers: Set<string> = new Set();\n\n  emit<T = any>(event: string, data: T): void {\n    if (this.debugMode) {\n      console.debug(`[WritterrEventBus] Emitting: ${event}`, data);\n    }\n\n    // Check if event is disabled due to circuit breaker\n    if (this.disabledHandlers.has(event)) {\n      if (this.debugMode) {\n        console.warn(`[WritterrEventBus] Event ${event} is disabled due to circuit breaker`);\n      }\n      return;\n    }\n\n    const eventHandlers = this.handlers.get(event);\n    if (eventHandlers) {\n      // Create array to avoid modification during iteration\n      const handlersArray = Array.from(eventHandlers);\n      \n      for (const handler of handlersArray) {\n        try {\n          // Isolate each handler execution\n          setTimeout(() => {\n            try {\n              handler(data);\n              // Reset error count on successful execution\n              this.resetErrorCount(event);\n            } catch (error) {\n              this.handleHandlerError(event, error, handler);\n            }\n          }, 0);\n        } catch (error) {\n          this.handleHandlerError(event, error, handler);\n        }\n      }\n    }\n  }\n\n  on<T = any>(event: string, handler: (data: T) => void): void {\n    if (!this.handlers.has(event)) {\n      this.handlers.set(event, new Set());\n    }\n    this.handlers.get(event)!.add(handler);\n    \n    if (this.debugMode) {\n      console.debug(`[WritterrEventBus] Registered handler for: ${event}`);\n    }\n  }\n\n  off(event: string, handler: Function): void {\n    const eventHandlers = this.handlers.get(event);\n    if (eventHandlers) {\n      eventHandlers.delete(handler);\n      \n      // Clean up empty handler sets\n      if (eventHandlers.size === 0) {\n        this.handlers.delete(event);\n      }\n    }\n  }\n\n  once<T = any>(event: string, handler: (data: T) => void): void {\n    const onceWrapper = (data: T) => {\n      handler(data);\n      this.off(event, onceWrapper);\n    };\n    \n    this.on(event, onceWrapper);\n  }\n\n  cleanup(): void {\n    this.handlers.clear();\n    \n    if (this.debugMode) {\n      console.debug('[WritterrEventBus] Cleaned up all handlers');\n    }\n  }\n\n  // Debug and monitoring methods\n  setDebugMode(enabled: boolean): void {\n    this.debugMode = enabled;\n  }\n\n  getEventCounts(): Record<string, number> {\n    const counts: Record<string, number> = {};\n    \n    for (const [event, handlers] of this.handlers) {\n      counts[event] = handlers.size;\n    }\n    \n    return counts;\n  }\n\n  getAllEvents(): string[] {\n    return Array.from(this.handlers.keys());\n  }\n\n  hasListeners(event: string): boolean {\n    const handlers = this.handlers.get(event);\n    return handlers ? handlers.size > 0 : false;\n  }\n\n  getListenerCount(event: string): number {\n    const handlers = this.handlers.get(event);\n    return handlers ? handlers.size : 0;\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.handlers.delete(event);\n    } else {\n      this.handlers.clear();\n    }\n  }\n\n  // Error isolation and circuit breaker methods\n  private handleHandlerError(event: string, error: any, handler: Function): void {\n    console.error(`[WritterrEventBus] Error in handler for ${event}:`, error);\n    \n    // Increment error count\n    const currentCount = this.errorCounts.get(event) || 0;\n    const newCount = currentCount + 1;\n    this.errorCounts.set(event, newCount);\n    \n    // Check circuit breaker threshold\n    if (newCount >= this.circuitBreakerThreshold) {\n      this.disabledHandlers.add(event);\n      console.warn(`[WritterrEventBus] Event ${event} disabled due to repeated failures (${newCount} errors)`);\n      \n      // Emit system event about circuit breaker activation\n      if (event !== 'system-error') { // Prevent infinite loops\n        this.emit('system-error', {\n          type: 'circuit-breaker-activated',\n          event,\n          errorCount: newCount,\n          timestamp: Date.now()\n        });\n      }\n    }\n  }\n\n  private resetErrorCount(event: string): void {\n    if (this.errorCounts.has(event)) {\n      this.errorCounts.delete(event);\n    }\n  }\n\n  // Circuit breaker management\n  resetCircuitBreaker(event: string): void {\n    this.disabledHandlers.delete(event);\n    this.errorCounts.delete(event);\n    \n    if (this.debugMode) {\n      console.debug(`[WritterrEventBus] Circuit breaker reset for event: ${event}`);\n    }\n  }\n\n  getCircuitBreakerStatus(): Record<string, { errorCount: number; disabled: boolean }> {\n    const status: Record<string, { errorCount: number; disabled: boolean }> = {};\n    \n    for (const [event, count] of this.errorCounts) {\n      status[event] = {\n        errorCount: count,\n        disabled: this.disabledHandlers.has(event)\n      };\n    }\n    \n    return status;\n  }\n\n  setCircuitBreakerThreshold(threshold: number): void {\n    this.circuitBreakerThreshold = Math.max(1, threshold);\n  }\n}\n\n// Event type definitions for better type safety\nexport interface EditorialEngineEvents {\n  'platform-ready': { plugin: string; api: any };\n  'mode-registered': { mode: any };\n  'mode-updated': { mode: any };\n  'mode-removed': { modeId: string; mode: any };\n  'adapter-registered': { name: string; adapter: any };\n  'adapter-execution-failed': { jobId: string; error: string };\n  'adapter-execution-recorded': { \n    adapterName: string; \n    success: boolean; \n    responseTime: number; \n    timestamp: number;\n  };\n  'adapter-health-warning': { adapterName: string; status: any; timestamp: number };\n  'adapter-health-error': { adapterName: string; error: string; timestamp: number };\n  'processing-started': { intakeId: string };\n  'processing-completed': { intakeId: string; result: any };\n  'processing-failed': { intakeId: string; error: string };\n  'performance-metrics-updated': { metrics: any };\n}\n\n// Typed event bus that provides better IntelliSense\nexport class TypedWritterrEventBus {\n  private bus: WritterrEventBus;\n\n  constructor(bus: WritterrEventBus) {\n    this.bus = bus;\n  }\n\n  emit<K extends keyof EditorialEngineEvents>(\n    event: K, \n    data: EditorialEngineEvents[K]\n  ): void {\n    this.bus.emit(event, data);\n  }\n\n  on<K extends keyof EditorialEngineEvents>(\n    event: K, \n    handler: (data: EditorialEngineEvents[K]) => void\n  ): void {\n    this.bus.on(event, handler);\n  }\n\n  once<K extends keyof EditorialEngineEvents>(\n    event: K, \n    handler: (data: EditorialEngineEvents[K]) => void\n  ): void {\n    this.bus.once(event, handler);\n  }\n\n  off(event: keyof EditorialEngineEvents, handler: Function): void {\n    this.bus.off(event, handler);\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,IAIa;AAJb;AAAA;AAIO,IAAM,oBAAN,MAAiD;AAAA,MAAjD;AACL,oBAAO;AACP,uBAAU;AACV,mCAAuC,CAAC,aAAa,wBAAwB,gBAAgB,SAAS;AACtG,4BAAoC;AAAA,UAClC,iBAAiB;AAAA,UACjB,oBAAoB;AAAA,UACpB,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,WAAW;AAAA,QACb;AAEA,aAAQ,cAAc;AACtB,aAAQ,SAAwB,CAAC;AACjC,aAAQ,UAA0B;AAAA,UAChC,iBAAiB;AAAA,UACjB,aAAa;AAAA,UACb,gBAAgB;AAAA,UAChB,YAAY;AAAA,UACZ,eAAe,KAAK,IAAI;AAAA,QAC1B;AACA,aAAQ,iBAA2B,CAAC;AACpC,aAAQ,SAAmB,CAAC;AAAA;AAAA,MAE5B,MAAM,WAAW,QAAsC;AA5BzD;AA6BI,aAAK,SAAS;AAGd,YAAI,GAAC,YAAO,gBAAP,mBAAoB,aAAY;AACnC,gBAAM,IAAI,MAAM,gDAAgD;AAAA,QAClE;AAGA,cAAM,iBAAiB,OAAO,YAAY,WAAW,kBAAkB;AACvE,gBAAQ,IAAI,qDAAqD,iBAAiB,WAAW,MAAM;AAEnG,aAAK,cAAc;AAAA,MACrB;AAAA,MAEA,MAAM,QAAQ,KAA0C;AACtD,cAAM,YAAY,YAAY,IAAI;AAElC,YAAI;AACF,cAAI,CAAC,KAAK,aAAa;AACrB,kBAAM,IAAI,MAAM,qCAAqC;AAAA,UACvD;AAGA,gBAAM,KAAK,sBAAsB;AAGjC,gBAAM,oBAAoB,KAAK,0BAA0B,GAAG;AAG5D,gBAAM,SAAS,MAAM,KAAK,6BAA6B,mBAAmB,GAAG;AAG7E,gBAAM,gBAAgB,YAAY,IAAI,IAAI;AAC1C,eAAK,gBAAgB,eAAe,IAAI;AAGxC,iBAAO,KAAK,4BAA4B,QAAQ,GAAG;AAAA,QAErD,SAAS,OAAO;AACd,gBAAM,gBAAgB,YAAY,IAAI,IAAI;AAC1C,eAAK,gBAAgB,eAAe,OAAO,MAAM,OAAO;AAExD,iBAAO;AAAA,YACL,SAAS;AAAA,YACT,OAAO,IAAI;AAAA,YACX,WAAW,KAAK,IAAI;AAAA,YACpB;AAAA,YACA,QAAQ,CAAC;AAAA,cACP,MAAM;AAAA,cACN,SAAS,MAAM;AAAA,cACf,WAAW,KAAK,IAAI;AAAA,YACtB,CAAC;AAAA,YACD,UAAU;AAAA,cACR,SAAS,KAAK;AAAA,cACd,SAAS,KAAK;AAAA,YAChB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MAEA,MAAM,UAAyB;AAC7B,aAAK,cAAc;AACnB,aAAK,SAAS,CAAC;AACf,gBAAQ,IAAI,gCAAgC;AAAA,MAC9C;AAAA,MAEA,YAA2B;AA/F7B;AAgGI,cAAM,wBAAwB,CAAC,GAAC,YAAO,gBAAP,mBAAoB;AACpD,cAAM,mBAAmB,CAAC,GAAC,kBAAO,gBAAP,mBAAoB,eAApB,mBAAgC;AAE3D,eAAO;AAAA,UACL,SAAS,KAAK,eAAe;AAAA,UAC7B,OAAO,KAAK,eAAe,yBAAyB;AAAA,UACpD,OAAO,CAAC,wBAAwB,qCACzB,CAAC,mBAAmB,+BAA+B;AAAA,UAC1D,iBAAiB,KAAK,IAAI;AAAA,UAC1B,aAAa;AAAA,QACf;AAAA,MACF;AAAA,MAEA,aAA6B;AAC3B,eAAO,EAAE,GAAG,KAAK,QAAQ;AAAA,MAC3B;AAAA;AAAA,MAGA,MAAc,wBAAuC;AAlHvD;AAmHI,YAAI,GAAC,YAAO,gBAAP,mBAAoB,aAAY;AACnC,gBAAM,IAAI,MAAM,+BAA+B;AAAA,QACjD;AAEA,cAAM,iBAAiB,OAAO,YAAY,WAAW,kBAAkB;AACvE,YAAI,CAAC,gBAAgB;AAEnB,iBAAO,YAAY,WAAW,cAAc;AAG5C,gBAAM,aAAa,OAAO,YAAY,WAAW,kBAAkB;AACnE,cAAI,CAAC,YAAY;AACf,kBAAM,IAAI,MAAM,qCAAqC;AAAA,UACvD;AAEA,kBAAQ,IAAI,gCAAgC,WAAW,EAAE;AAAA,QAC3D;AAAA,MACF;AAAA,MAEQ,0BAA0B,KAAiC;AAtIrE;AAuII,cAAM,UAAwB,CAAC;AAG/B,YAAI,IAAI,QAAQ,SAAS;AAEvB,iBAAO,IAAI,QAAQ;AAAA,QACrB;AAGA,YAAI,IAAI,QAAQ,QAAQ,IAAI,QAAQ,OAAO;AACzC,qBAAW,QAAQ,IAAI,QAAQ,OAAO;AACpC,oBAAQ,KAAK;AAAA,cACX,IAAI,GAAG,IAAI,EAAE,IAAI,KAAK,MAAM,KAAK,IAAI,CAAC;AAAA,cACtC,WAAW,KAAK,IAAI;AAAA,cACpB,MAAM,KAAK,SAAS,aAAa,WAAW,KAAK,SAAS,aAAa,WAAW;AAAA,cAClF,MAAM,KAAK,SAAS;AAAA,cACpB,IAAI,KAAK,OAAO,KAAK,SAAS;AAAA,cAC9B,MAAM,KAAK,WAAW;AAAA,cACtB,aAAa,KAAK,WAAW;AAAA,cAC7B,QAAQ;AAAA,cACR,UAAU;AAAA,gBACR,OAAO,IAAI;AAAA,gBACX,MAAM,IAAI,QAAQ;AAAA,gBAClB,YAAY;AAAA,cACd;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,WAAW,IAAI,QAAQ,MAAM;AAE3B,kBAAQ,KAAK;AAAA,YACX,IAAI,GAAG,IAAI,EAAE;AAAA,YACb,WAAW,KAAK,IAAI;AAAA,YACpB,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAI,SAAI,QAAQ,iBAAZ,mBAA0B,WAAU;AAAA,YACxC,MAAM,IAAI,QAAQ;AAAA,YAClB,aAAa,IAAI,QAAQ,gBAAgB;AAAA,YACzC,QAAQ;AAAA,YACR,UAAU;AAAA,cACR,OAAO,IAAI;AAAA,cACX,MAAM,IAAI,QAAQ;AAAA,cAClB,YAAY;AAAA,YACd;AAAA,UACF,CAAC;AAAA,QACH;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,MAAc,6BAA6B,SAAuB,KAA8C;AAxLlH;AA0LI,cAAM,gBAAgB,OAAO,YAAY;AACzC,cAAM,iBAAiB,cAAc,kBAAkB;AAGvD,cAAM,4BAA0B,SAAI,aAAJ,mBAAc,yBAAwB;AACtE,cAAM,mBAAiC,CAAC;AACxC,cAAM,kBAAgC,CAAC;AAEvC,YAAI,yBAAyB;AAI3B,qBAAW,UAAU,SAAS;AAC5B,gBAAI;AAEF,kBAAI,cAAc,cAAc;AAC9B,sBAAM,cAAc,aAAa,MAAM;AAAA,cACzC;AACA,+BAAiB,KAAK,MAAM;AAAA,YAC9B,SAAS,OAAO;AACd,sBAAQ,KAAK,sCAAsC,OAAO,EAAE,KAAK,KAAK;AACtE,8BAAgB,KAAK,MAAM;AAAA,YAC7B;AAAA,UACF;AAAA,QACF,OAAO;AAEL,qBAAW,UAAU,SAAS;AAC5B,gBAAI;AACF,kBAAI,cAAc,aAAa;AAC7B,sBAAM,cAAc,YAAY,MAAM;AAAA,cACxC;AACA,+BAAiB,KAAK,MAAM;AAAA,YAC9B,SAAS,OAAO;AACd,sBAAQ,KAAK,0BAA0B,OAAO,EAAE,KAAK,KAAK;AAC1D,8BAAgB,KAAK,MAAM;AAAA,YAC7B;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,UACL,SAAS;AAAA,UACT,WAAW,eAAe;AAAA,UAC1B,gBAAgB;AAAA,UAChB;AAAA,UACA,WAAW,KAAK,IAAI;AAAA,UACpB,UAAU;AAAA,YACR,OAAO,IAAI;AAAA,YACX,MAAM,IAAI,QAAQ;AAAA,YAClB,gBAAgB,YAAY,IAAI,OAAK,SAAI,aAAJ,mBAAc,cAAa,KAAK,IAAI;AAAA,YACzE,sBAAsB;AAAA,YACtB,cAAc,QAAQ;AAAA,YACtB,mBAAmB,iBAAiB;AAAA,YACpC,eAAe,gBAAgB;AAAA,UACjC;AAAA,QACF;AAAA,MACF;AAAA,MAEQ,4BAA4B,kBAAoC,KAAiC;AAnP3G;AAoPI,cAAM,gBAAgB,YAAY,IAAI,OAAK,SAAI,aAAJ,mBAAc,cAAa,KAAK,IAAI;AAE/E,YAAI,CAAC,iBAAiB,SAAS;AAC7B,iBAAO;AAAA,YACL,SAAS;AAAA,YACT,OAAO,IAAI;AAAA,YACX,WAAW,KAAK,IAAI;AAAA,YACpB;AAAA,YACA,QAAQ,CAAC;AAAA,cACP,MAAM;AAAA,cACN,SAAS;AAAA,cACT,WAAW,KAAK,IAAI;AAAA,YACtB,CAAC;AAAA,YACD,UAAU;AAAA,cACR,SAAS,KAAK;AAAA,cACd,SAAS,KAAK;AAAA,cACd,mBAAmB,iBAAiB;AAAA,YACtC;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,UACL,SAAS;AAAA,UACT,OAAO,IAAI;AAAA,UACX,WAAW,KAAK,IAAI;AAAA,UACpB;AAAA,UACA,QAAQ;AAAA,YACN,eAAe,IAAI,QAAQ;AAAA;AAAA,YAC3B,SAAS,iBAAiB;AAAA,YAC1B,iBAAiB,iBAAiB;AAAA,YAClC,WAAW,iBAAiB;AAAA,UAC9B;AAAA,UACA,UAAU;AAAA,YACR,SAAS,KAAK;AAAA,YACd,SAAS,KAAK;AAAA,YACd,mBAAmB,iBAAiB;AAAA,YACpC,gBAAgB,iBAAiB,eAAe;AAAA,YAChD,iBAAiB,iBAAiB,gBAAgB;AAAA,UACpD;AAAA,UACA,YAAY;AAAA,YACV,SAAS,KAAK;AAAA,YACd,WAAW,KAAK,IAAI;AAAA,YACpB,OAAO,IAAI;AAAA,YACX,WAAW,iBAAiB;AAAA,YAC5B,SAAS,iBAAiB,eAAe,IAAI,aAAW;AAAA,cACtD,IAAI,OAAO;AAAA,cACX,MAAM,OAAO;AAAA,cACb,UAAU,EAAE,MAAM,OAAO,MAAM,IAAI,OAAO,GAAG;AAAA,cAC7C,QAAQ,OAAO;AAAA,YACjB,EAAE;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,MAEQ,gBAAgB,eAAuB,SAAkB,OAAsB;AACrF,aAAK,QAAQ;AACb,aAAK,QAAQ,gBAAgB,KAAK,IAAI;AAEtC,aAAK,eAAe,KAAK,aAAa;AACtC,YAAI,KAAK,eAAe,SAAS,KAAK;AACpC,eAAK,iBAAiB,KAAK,eAAe,MAAM,IAAI;AAAA,QACtD;AAEA,aAAK,QAAQ,iBAAiB,KAAK,eAAe,OAAO,CAAC,KAAK,SAAS,MAAM,MAAM,CAAC,IAAI,KAAK,eAAe;AAE7G,YAAI,SAAS;AACX,eAAK,QAAQ,eAAe,KAAK,QAAQ,eAAe,KAAK,QAAQ,kBAAkB,KAAK,KAAK,KAAK,QAAQ;AAAA,QAChH,OAAO;AACL,eAAK,QAAQ;AACb,eAAK,QAAQ,cAAe,KAAK,QAAQ,eAAe,KAAK,QAAQ,kBAAkB,KAAM,KAAK,QAAQ;AAE1G,cAAI,OAAO;AACT,iBAAK,OAAO,KAAK,KAAK;AACtB,gBAAI,KAAK,OAAO,SAAS,IAAI;AAC3B,mBAAK,SAAS,KAAK,OAAO,MAAM,GAAG;AAAA,YACrC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACnUA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,mBAA+B;;;ACA/B,sBAA+C;AAIxC,IAAM,mBAA4C;AAAA,EACvD,SAAS;AAAA,EACT,cAAc,CAAC,eAAe,eAAe,sBAAsB;AAAA,EACnE,aAAa;AAAA,EACb,sBAAsB;AAAA,IACpB,YAAY;AAAA,IACZ,mBAAmB;AAAA;AAAA,IACnB,cAAc;AAAA,MACZ,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,IACrB;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,eAAe;AAAA,MACb,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,WAAW;AAAA,QACX,SAAS;AAAA,MACX;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,eAAe;AAAA,IACf,WAAW;AAAA,IACX,sBAAsB;AAAA,EACxB;AACF;AAEO,IAAM,6BAAN,cAAyC,iCAAiB;AAAA,EAG/D,YAAY,KAAU,QAA+B;AACnD,UAAM,KAAK,MAAM;AACjB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,UAAyB;AAC7B,UAAM,EAAE,YAAY,IAAI;AAExB,gBAAY,MAAM;AAElB,gBAAY,SAAS,MAAM,EAAE,MAAM,4BAA4B,CAAC;AAGhE,SAAK,sBAAsB,WAAW;AAGtC,UAAM,KAAK,mBAAmB,WAAW;AAGzC,SAAK,sBAAsB,WAAW;AAGtC,SAAK,0BAA0B,WAAW;AAAA,EAC5C;AAAA,EAEQ,sBAAsB,aAAgC;AAC5D,gBAAY,SAAS,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAGvD,UAAM,iBAAiB,KAAK,OAAO,aAAa,YAAY;AAE5D,QAAI,wBAAQ,WAAW,EACpB,QAAQ,cAAc,EACtB,QAAQ,mEAAmE,EAC3E,YAAY,cAAY;AAEvB,iBAAW,QAAQ,gBAAgB;AACjC,iBAAS,UAAU,KAAK,IAAI,KAAK,IAAI;AAAA,MACvC;AAEA,eACG,SAAS,KAAK,OAAO,SAAS,WAAW,EACzC,SAAS,OAAO,UAAU;AACzB,aAAK,OAAO,SAAS,cAAc;AACnC,cAAM,KAAK,OAAO,aAAa;AAAA,MACjC,CAAC;AAAA,IACL,CAAC;AAEH,QAAI,wBAAQ,WAAW,EACpB,QAAQ,aAAa,EACrB,QAAQ,mDAAmD,EAC3D,UAAU,YAAU,OAClB,SAAS,KAAK,OAAO,SAAS,qBAAqB,UAAU,EAC7D,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,qBAAqB,aAAa;AACvD,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,qBAAqB,EAC7B,QAAQ,6DAA6D,EACrE,UAAU,YAAU,OAClB,UAAU,GAAG,IAAI,CAAC,EAClB,SAAS,KAAK,OAAO,SAAS,qBAAqB,oBAAoB,GAAI,EAC3E,kBAAkB,EAClB,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,qBAAqB,oBAAoB,QAAQ;AACtE,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAAA,EACR;AAAA,EAEA,MAAc,mBAAmB,aAAyC;AACxE,gBAAY,SAAS,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAEzD,UAAM,iBAAiB,YAAY,UAAU,iBAAiB;AAC9D,mBAAe,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ/B,UAAM,SAAS,eAAe,SAAS,KAAK;AAAA,MAC1C,MAAM;AAAA,MACN,KAAK;AAAA,IACP,CAAC;AACD,WAAO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvB,UAAM,eAAe,KAAK,OAAO,SAAS;AAG1C,UAAM,iBAAiB,KAAK,OAAO,aAAa,YAAY;AAE5D,QAAI,eAAe,WAAW,GAAG;AAC/B,qBAAe,SAAS,KAAK;AAAA,QAC3B,MAAM;AAAA,QACN,KAAK;AAAA,MACP,CAAC;AACD;AAAA,IACF;AAEA,eAAW,QAAQ,gBAAgB;AACjC,UAAI,wBAAQ,cAAc,EACvB,QAAQ,KAAK,IAAI,EACjB,QAAQ,KAAK,eAAe,GAAG,KAAK,IAAI,OAAO,EAC/C,UAAU,YAAU,OAClB,SAAS,aAAa,SAAS,KAAK,EAAE,CAAC,EACvC,SAAS,OAAO,UAAU;AACzB,YAAI,OAAO;AACT,cAAI,CAAC,aAAa,SAAS,KAAK,EAAE,GAAG;AACnC,yBAAa,KAAK,KAAK,EAAE;AAAA,UAC3B;AAAA,QACF,OAAO;AACL,gBAAM,QAAQ,aAAa,QAAQ,KAAK,EAAE;AAC1C,cAAI,QAAQ,IAAI;AACd,yBAAa,OAAO,OAAO,CAAC;AAAA,UAC9B;AAAA,QACF;AACA,cAAM,KAAK,OAAO,aAAa;AAAA,MACjC,CAAC,CAAC;AAAA,IACR;AAAA,EACF;AAAA,EAEQ,sBAAsB,aAAgC;AAC5D,gBAAY,SAAS,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAE5D,UAAM,oBAAoB,YAAY,UAAU,oBAAoB;AACpE,sBAAkB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlC,UAAM,mBAAmB,KAAK,OAAO,SAAS,SAAS,aAAa;AAEpE,QAAI,wBAAQ,iBAAiB,EAC1B,QAAQ,yBAAyB,EACjC,QAAQ,kEAAkE,EAC1E,UAAU,YAAU,OAClB,SAAS,iBAAiB,OAAO,EACjC,SAAS,OAAO,UAAU;AACzB,uBAAiB,UAAU;AAC3B,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,iBAAiB,EAC1B,QAAQ,YAAY,EACpB,QAAQ,qDAAqD,EAC7D,UAAU,YAAU,OAClB,UAAU,GAAG,IAAI,CAAC,EAClB,SAAS,iBAAiB,OAAO,SAAS,EAC1C,kBAAkB,EAClB,SAAS,OAAO,UAAU;AACzB,uBAAiB,OAAO,YAAY;AACpC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAAA,EACR;AAAA,EAEQ,0BAA0B,aAAgC;AAChE,gBAAY,SAAS,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAE3D,QAAI,wBAAQ,WAAW,EACpB,QAAQ,gBAAgB,EACxB,QAAQ,iDAAiD,EACzD,UAAU,YAAU,OAClB,SAAS,KAAK,OAAO,SAAS,YAAY,aAAa,EACvD,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,YAAY,gBAAgB;AACjD,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,YAAY,EACpB,QAAQ,4CAA4C,EACpD,UAAU,YAAU,OAClB,UAAU,IAAI,KAAK,EAAE,EACrB,SAAS,KAAK,OAAO,SAAS,YAAY,SAAS,EACnD,kBAAkB,EAClB,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,YAAY,YAAY;AAC7C,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,uBAAuB,EAC/B,QAAQ,8CAA8C,EACtD,UAAU,YAAU,OAClB,SAAS,KAAK,OAAO,SAAS,YAAY,oBAAoB,EAC9D,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,YAAY,uBAAuB;AACxD,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAGN,UAAM,uBAAuB,YAAY,UAAU,qBAAqB;AACxE,yBAAqB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAOrC,yBAAqB,SAAS,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAEnE,UAAM,YAAY,qBAAqB,UAAU;AACjD,SAAK,yBAAyB,SAAS;AAAA,EACzC;AAAA,EAEQ,yBAAyB,WAA8B;AAC7D,cAAU,MAAM;AAEhB,UAAM,UAAU,KAAK,OAAO,sBAAsB;AAElD,QAAI,SAAS;AACX,YAAM,cAAc,UAAU,UAAU;AACxC,kBAAY,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAO5B,YAAM,cAAc;AAAA,QAClB,EAAE,OAAO,uBAAuB,OAAO,GAAG,QAAQ,kBAAkB,QAAQ,CAAC,CAAC,KAAK;AAAA,QACnF,EAAE,OAAO,gBAAgB,OAAO,IAAI,QAAQ,cAAc,KAAK,QAAQ,CAAC,CAAC,IAAI;AAAA,QAC7E,EAAE,OAAO,kBAAkB,OAAO,QAAQ,cAAc,SAAS,EAAE;AAAA,QACnE,EAAE,OAAO,kBAAkB,OAAO,IAAI,QAAQ,eAAe,KAAK,QAAQ,CAAC,CAAC,IAAI;AAAA,MAClF;AAEA,iBAAW,QAAQ,aAAa;AAC9B,cAAM,WAAW,YAAY,UAAU;AACvC,iBAAS,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAKzB,iBAAS,SAAS,OAAO,EAAE,MAAM,KAAK,OAAO,KAAK,eAAe,CAAC;AAClE,cAAM,UAAU,SAAS,SAAS,OAAO,EAAE,MAAM,KAAK,OAAO,KAAK,eAAe,CAAC;AAClF,gBAAQ,MAAM,aAAa;AAAA,MAC7B;AAAA,IACF,OAAO;AACL,gBAAU,SAAS,KAAK,EAAE,MAAM,qCAAqC,CAAC;AAAA,IACxE;AAAA,EACF;AACF;;;ACrRO,IAAM,kBAAN,MAAsB;AAAA,EAG3B,cAAc;AACZ,SAAK,cAAc,IAAI,yBAAyB;AAAA,EAClD;AAAA,EAEA,MAAM,QAAQ,QAA0B,MAAiD;AAEvF,QAAI,KAAK,eAAe,KAAK,YAAY,SAAS,GAAG;AACnD,aAAO;AAAA,QACL,aAAa,KAAK;AAAA,QAClB,iBAAiB,KAAK,wBAAwB,KAAK,WAAW;AAAA,QAC9D,iBAAiB,KAAK,sBAAsB,MAAM;AAAA,QAClD,YAAY,KAAK,IAAI;AAAA,MACvB;AAAA,IACF;AAGA,WAAO,MAAM,KAAK,YAAY,IAAI;AAAA,EACpC;AAAA,EAEA,MAAM,YAAY,MAAgD;AAEhE,UAAM,cAAc,MAAM,KAAK,qBAAqB,KAAK,oBAAoB;AAG7E,UAAM,cAAc,MAAM,KAAK,iBAAiB,WAAW;AAG3D,UAAM,kBAAkB,KAAK,wBAAwB,WAAW;AAGhE,UAAM,kBAAuC;AAAA,MAC3C,SAAS;AAAA;AAAA,MACT,YAAY;AAAA,MACZ,mBAAmB,CAAC,aAAa;AAAA,MACjC,kBAAkB;AAAA,IACpB;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY,KAAK,IAAI;AAAA,IACvB;AAAA,EACF;AAAA,EAEA,MAAc,qBAAqB,OAAoD;AACrF,UAAM,UAAwB,CAAC;AAG/B,eAAW,QAAQ,MAAM,SAAS;AAChC,YAAM,SAAS,MAAM,KAAK,YAAY,MAAM,MAAM,YAAY;AAC9D,cAAQ,KAAK,MAAM;AAAA,IACrB;AAGA,eAAW,QAAQ,MAAM,WAAW;AAClC,YAAM,SAAS,MAAM,KAAK,YAAY,MAAM,MAAM,aAAa;AAC/D,cAAQ,KAAK,MAAM;AAAA,IACrB;AAGA,eAAW,QAAQ,MAAM,OAAO;AAC9B,YAAM,SAAS,MAAM,KAAK,YAAY,MAAM,MAAM,OAAO;AACzD,cAAQ,KAAK,MAAM;AAAA,IACrB;AAGA,eAAW,QAAQ,MAAM,YAAY;AACnC,YAAM,SAAS,MAAM,KAAK,YAAY,MAAM,MAAM,UAAU;AAC5D,cAAQ,KAAK,MAAM;AAAA,IACrB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,iBAAiB,aAA0D;AACvF,UAAM,cAAoC,CAAC;AAE3C,eAAW,QAAQ,aAAa;AAC9B,YAAM,aAAa,KAAK,iBAAiB,IAAI;AAC7C,UAAI,YAAY;AACd,oBAAY,KAAK,UAAU;AAAA,MAC7B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,iBAAiB,MAA6C;AAGpE,YAAQ,KAAK,MAAM;AAAA,MACjB,KAAK;AACH,eAAO,KAAK,2BAA2B,IAAI;AAAA,MAE7C,KAAK;AACH,eAAO,KAAK,4BAA4B,IAAI;AAAA,MAE9C,KAAK;AACH,eAAO,KAAK,yBAAyB,IAAI;AAAA,MAE3C,KAAK;AACH,eAAO,KAAK,sBAAsB,IAAI;AAAA,MAExC;AACE,gBAAQ,KAAK,sBAAsB,KAAK,IAAI,EAAE;AAC9C,eAAO;AAAA,IACX;AAAA,EACF;AAAA,EAEQ,2BAA2B,MAAsC;AAEvE,UAAM,SAAS,KAAK,OAAO,YAAY;AAEvC,QAAI,OAAO,SAAS,SAAS,KAAK,OAAO,SAAS,UAAU,GAAG;AAC7D,aAAO;AAAA,QACL;AAAA,QACA,YAAY;AAAA,UACV,eAAe;AAAA,UACf,cAAc;AAAA,UACd,kBAAkB;AAAA,QACpB;AAAA,QACA,UAAU,KAAK,aAAa;AAAA,QAC5B,YAAY,CAAC;AAAA,UACX,MAAM;AAAA,UACN,WAAW;AAAA,UACX,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF;AAGA,WAAO;AAAA,MACL;AAAA,MACA,YAAY,EAAE,mBAAmB,CAAC,KAAK,MAAM,EAAE;AAAA,MAC/C,UAAU,KAAK,aAAa;AAAA,MAC5B,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA,EAEQ,4BAA4B,MAAsC;AAExE,UAAM,SAAS,KAAK,OAAO,YAAY;AAEvC,QAAI,OAAO,SAAS,OAAO,KAAK,OAAO,SAAS,OAAO,KAAK,OAAO,SAAS,MAAM,GAAG;AACnF,aAAO;AAAA,QACL;AAAA,QACA,YAAY;AAAA,UACV,eAAe;AAAA,UACf,eAAe;AAAA,UACf,uBAAuB;AAAA,QACzB;AAAA,QACA,UAAU,KAAK,aAAa;AAAA,QAC5B,YAAY,CAAC;AAAA,UACX,MAAM;AAAA,UACN,WAAW;AAAA,UACX,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,OAAO,SAAS,SAAS,KAAK,OAAO,SAAS,SAAS,GAAG;AAC5D,aAAO;AAAA,QACL;AAAA,QACA,YAAY;AAAA,UACV,iBAAiB;AAAA,UACjB,oBAAoB;AAAA,QACtB;AAAA,QACA,UAAU,KAAK,aAAa;AAAA,QAC5B,YAAY,CAAC;AAAA,UACX,MAAM;AAAA,UACN,WAAW;AAAA,UACX,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF;AAGA,WAAO;AAAA,MACL;AAAA,MACA,YAAY,EAAE,kBAAkB,KAAK,OAAO;AAAA,MAC5C,UAAU,KAAK,aAAa;AAAA,MAC5B,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA,EAEQ,yBAAyB,MAAsC;AAErE,UAAM,SAAS,KAAK,OAAO,YAAY;AAGvC,UAAM,kBAAkB,OAAO,MAAM,QAAQ;AAC7C,QAAI,iBAAiB;AACnB,YAAM,aAAa,SAAS,gBAAgB,CAAC,CAAC,IAAI;AAElD,aAAO;AAAA,QACL;AAAA,QACA,YAAY;AAAA,UACV,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB;AAAA,QACA,UAAU,KAAK,aAAa;AAAA,QAC5B,YAAY,CAAC;AAAA,UACX,MAAM;AAAA,UACN,WAAW,mBAAmB,UAAU;AAAA,UACxC,SAAS,2BAA2B,gBAAgB,CAAC,CAAC;AAAA,QACxD,CAAC;AAAA,MACH;AAAA,IACF;AAGA,WAAO;AAAA,MACL;AAAA,MACA,YAAY,EAAE,gBAAgB,KAAK;AAAA;AAAA,MACnC,UAAU,KAAK,aAAa;AAAA,MAC5B,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA,EAEQ,sBAAsB,MAAsC;AAElE,WAAO;AAAA,MACL;AAAA,MACA,YAAY;AAAA,QACV,WAAW,KAAK;AAAA,QAChB,UAAU;AAAA,MACZ;AAAA,MACA,UAAU,KAAK,aAAa;AAAA,MAC5B,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA,EAEQ,wBAAwB,aAAqD;AACnF,UAAM,QAA0B,CAAC;AAGjC,eAAW,cAAc,aAAa;AACpC,YAAM,KAAK,GAAG,WAAW,UAAU;AAAA,IACrC;AAGA,UAAM,KAAK;AAAA,MACT,MAAM;AAAA,MACN,WAAW;AAAA,MACX,SAAS;AAAA,IACX,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEQ,sBAAsB,QAA+C;AAE3E,QAAI,UAAU;AAEd,QAAI,OAAO,SAAS,iBAAiB;AACnC,gBAAU;AAAA,IACZ,WAAW,OAAO,SAAS,iBAAiB;AAC1C,gBAAU;AAAA,IACZ;AAEA,WAAO;AAAA,MACL;AAAA,MACA,YAAY;AAAA,MACZ,mBAAmB,CAAC,aAAa;AAAA,MACjC,kBAAkB;AAAA,IACpB;AAAA,EACF;AACF;AAEA,IAAM,2BAAN,MAA+B;AAAA,EAA/B;AAEE;AAAA,SAAiB,sBAAsB;AAAA,MACrC;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,IACF;AAEA,SAAiB,sBAAsB;AAAA,MACrC;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAO;AAAA,MAAW;AAAA,MAAW;AAAA,MAC1D;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,IACpD;AAEA,SAAiB,uBAAuB;AAAA,MACtC;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAY;AAAA,MACnD;AAAA,MAAW;AAAA,MAAU;AAAA,MAAY;AAAA,MAAM;AAAA,IACzC;AAEA,SAAiB,iBAAiB;AAAA,MAChC;AAAA,MAAS;AAAA,MAAa;AAAA,MAAc;AAAA,MAAe;AAAA,MACnD;AAAA,MAAa;AAAA,MAAU;AAAA,IACzB;AAEA,SAAiB,oBAAoB;AAAA,MACnC;AAAA,MAAS;AAAA,MAAY;AAAA,MAAS;AAAA,MAAa;AAAA,MAAO;AAAA,MAClD;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,IAChC;AAAA;AAAA,EAEA,MAAM,MAAM,MAAc,UAAuC;AAE/D,UAAM,aAAa,KAAK,oBAAoB,IAAI;AAChD,UAAM,SAAS,KAAK,cAAc,MAAM,QAAQ;AAChD,UAAM,aAAa,KAAK,kBAAkB,IAAI;AAC9C,UAAM,UAAU,KAAK,eAAe,IAAI;AACxC,UAAM,cAAc,KAAK,uBAAuB,IAAI;AAEpD,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,YAAY;AAAA,QACV,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,oBAAoB,MAAsB;AAChD,QAAI,aAAa;AAGjB,UAAM,oBAAoB;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MACA;AAAA,IACF;AAEA,eAAW,aAAa,mBAAmB;AACzC,UAAI,UAAU,KAAK,IAAI,GAAG;AACxB,sBAAc;AAAA,MAChB;AAAA,IACF;AAGA,QAAI,KAAK,eAAe,IAAI,GAAG;AAC7B,oBAAc;AAAA,IAChB;AAGA,UAAM,iBAAiB;AAAA,MACrB;AAAA,MAA0B;AAAA,MAAiB;AAAA,MAC3C;AAAA,MAAyB;AAAA,MAAgB;AAAA,MACzC;AAAA,MAAqB;AAAA,IACvB;AAEA,eAAW,QAAQ,gBAAgB;AACjC,UAAI,KAAK,YAAY,EAAE,SAAS,IAAI,GAAG;AACrC,sBAAc;AACd;AAAA,MACF;AAAA,IACF;AAGA,QAAI,KAAK,SAAS,MAAM,KAAK,SAAS,KAAK;AACzC,oBAAc;AAAA,IAChB;AAEA,WAAO,KAAK,IAAI,YAAY,CAAG;AAAA,EACjC;AAAA,EAEQ,cAAc,MAAc,UAA0B;AAC5D,UAAM,YAAY,KAAK,YAAY;AAGnC,UAAM,iBAAiB;AAAA,MACrB,EAAE,SAAS,sBAAsB,QAAQ,aAAa;AAAA,MACtD,EAAE,SAAS,iCAAiC,QAAQ,cAAc;AAAA,MAClE,EAAE,SAAS,iCAAiC,QAAQ,eAAe;AAAA,MACnE,EAAE,SAAS,gCAAgC,QAAQ,aAAa;AAAA,MAChE,EAAE,SAAS,kCAAkC,QAAQ,gBAAgB;AAAA,MACrE,EAAE,SAAS,8BAA8B,QAAQ,gBAAgB;AAAA,MACjE,EAAE,SAAS,4BAA4B,QAAQ,YAAY;AAAA,MAC3D,EAAE,SAAS,gCAAgC,QAAQ,kBAAkB;AAAA,IACvE;AAEA,eAAW,EAAE,SAAS,OAAO,KAAK,gBAAgB;AAChD,UAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,eAAO;AAAA,MACT;AAAA,IACF;AAGA,QAAI,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,UAAU,GAAG;AACnE,aAAO;AAAA,IACT;AAEA,QAAI,UAAU,SAAS,OAAO,KAAK,UAAU,SAAS,MAAM,GAAG;AAC7D,aAAO;AAAA,IACT;AAEA,QAAI,UAAU,SAAS,WAAW,KAAK,UAAU,SAAS,cAAc,GAAG;AACzE,aAAO;AAAA,IACT;AAEA,QAAI,UAAU,SAAS,OAAO,KAAK,UAAU,SAAS,MAAM,GAAG;AAC7D,aAAO;AAAA,IACT;AAGA,UAAM,mBAA2C;AAAA,MAC/C,cAAc;AAAA,MACd,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,SAAS;AAAA,IACX;AAEA,WAAO,iBAAiB,QAAQ,KAAK,KAAK,KAAK;AAAA,EACjD;AAAA,EAEQ,kBAAkB,MAAmC;AAC3D,UAAM,aAAkC,CAAC;AAGzC,UAAM,oBAAoB,KAAK,MAAM,YAAY;AACjD,QAAI,mBAAmB;AACrB,iBAAW,cAAc,kBAAkB,IAAI,OAAK,SAAS,CAAC,CAAC;AAC/D,iBAAW,oBAAoB,WAAW,YAAY,CAAC;AAAA,IACzD;AAGA,UAAM,eAAe,KAAK,SAAS,2CAA2C;AAC9E,eAAW,SAAS,cAAc;AAChC,YAAM,QAAQ,SAAS,MAAM,CAAC,CAAC;AAC/B,YAAM,OAAO,MAAM,CAAC,EAAE,YAAY;AAClC,iBAAW,GAAG,IAAI,OAAO,IAAI;AAAA,IAC/B;AAGA,UAAM,qBAAqB;AAAA,MACzB,EAAE,SAAS,sCAAsC,UAAU,MAAM;AAAA,MACjE,EAAE,SAAS,qCAAqC,UAAU,MAAM;AAAA,MAChE,EAAE,SAAS,qBAAqB,UAAU,KAAK;AAAA,MAC/C,EAAE,SAAS,8BAA8B,UAAU,SAAS;AAAA,IAC9D;AAEA,eAAW,EAAE,SAAS,SAAS,KAAK,oBAAoB;AACtD,UAAI,QAAQ,KAAK,KAAK,YAAY,CAAC,GAAG;AACpC,mBAAW,qBAAqB;AAChC;AAAA,MACF;AAAA,IACF;AAGA,UAAM,gBAAgB;AAAA,MACpB,EAAE,SAAS,8BAA8B,OAAO,WAAW;AAAA,MAC3D,EAAE,SAAS,qBAAqB,OAAO,YAAY;AAAA,MACnD,EAAE,SAAS,YAAY,OAAO,WAAW;AAAA,MACzC,EAAE,SAAS,eAAe,OAAO,OAAO;AAAA,IAC1C;AAEA,eAAW,EAAE,SAAS,MAAM,KAAK,eAAe;AAC9C,UAAI,QAAQ,KAAK,KAAK,YAAY,CAAC,GAAG;AACpC,mBAAW,QAAQ;AACnB;AAAA,MACF;AAAA,IACF;AAGA,UAAM,mBAAmB;AAAA,MACvB,EAAE,SAAS,iCAAiC,UAAU,OAAO;AAAA,MAC7D,EAAE,SAAS,gCAAgC,UAAU,SAAS;AAAA,MAC9D,EAAE,SAAS,2BAA2B,UAAU,MAAM;AAAA,IACxD;AAEA,eAAW,EAAE,SAAS,SAAS,KAAK,kBAAkB;AACpD,UAAI,QAAQ,KAAK,KAAK,YAAY,CAAC,GAAG;AACpC,mBAAW,WAAW;AACtB;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,eAAe,MAAmC;AACxD,UAAM,UAA+B,CAAC;AACtC,UAAM,YAAY,KAAK,YAAY;AAGnC,UAAM,gBAAgB;AAAA,MACpB;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAa;AAAA,MACjD;AAAA,MAAa;AAAA,MAAgB;AAAA,IAC/B;AAEA,eAAW,QAAQ,eAAe;AAChC,UAAI,UAAU,SAAS,IAAI,GAAG;AAC5B,gBAAQ,eAAe;AACvB;AAAA,MACF;AAAA,IACF;AAGA,UAAM,gBAAgB;AAAA,MACpB;AAAA,MAAgB;AAAA,MAAY;AAAA,MAAW;AAAA,MAAa;AAAA,MACpD;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,IAClC;AAEA,eAAW,YAAY,eAAe;AACpC,UAAI,UAAU,SAAS,QAAQ,GAAG;AAChC,gBAAQ,WAAW;AACnB;AAAA,MACF;AAAA,IACF;AAGA,UAAM,aAAa;AAAA,MACjB;AAAA,MAAU;AAAA,MAAY;AAAA,MAAkB;AAAA,MACxC;AAAA,MAAc;AAAA,MAAe;AAAA,MAAa;AAAA,IAC5C;AAEA,eAAW,SAAS,YAAY;AAC9B,UAAI,UAAU,SAAS,KAAK,GAAG;AAC7B,gBAAQ,QAAQ;AAChB;AAAA,MACF;AAAA,IACF;AAGA,UAAM,mBAAmB;AAAA,MACvB;AAAA,MAAe;AAAA,MAAU;AAAA,MAAU;AAAA,MAAa;AAAA,MAChD;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAe;AAAA,MAAS;AAAA,IAC3C;AAEA,YAAQ,mBAAmB,CAAC;AAC5B,eAAW,WAAW,kBAAkB;AACtC,UAAI,UAAU,SAAS,OAAO,GAAG;AAC/B,gBAAQ,iBAAiB,KAAK,OAAO;AAAA,MACvC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,uBAAuB,MAAwB;AACrD,UAAM,QAAkB,CAAC;AACzB,UAAM,YAAY,KAAK,YAAY;AAGnC,UAAM,qBAAqB;AAAA,MACzB,EAAE,SAAS,gCAAgC,MAAM,cAAc;AAAA,MAC/D,EAAE,SAAS,0BAA0B,MAAM,YAAY;AAAA,MACvD,EAAE,SAAS,qCAAqC,MAAM,eAAe;AAAA,MACrE,EAAE,SAAS,0BAA0B,MAAM,QAAQ;AAAA,MACnD,EAAE,SAAS,iCAAiC,MAAM,aAAa;AAAA,MAC/D,EAAE,SAAS,0BAA0B,MAAM,WAAW;AAAA,MACtD,EAAE,SAAS,0BAA0B,MAAM,cAAc;AAAA,MACzD,EAAE,SAAS,yBAAyB,MAAM,UAAU;AAAA,IACtD;AAEA,eAAW,EAAE,SAAS,KAAK,KAAK,oBAAoB;AAClD,UAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,cAAM,KAAK,IAAI;AAAA,MACjB;AAAA,IACF;AAGA,QAAI,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,cAAc,GAAG;AACvE,YAAM,KAAK,sBAAsB;AAAA,IACnC;AAEA,QAAI,UAAU,SAAS,YAAY,KAAK,UAAU,SAAS,WAAW,GAAG;AACvE,YAAM,KAAK,mBAAmB;AAAA,IAChC;AAEA,QAAI,UAAU,SAAS,UAAU,KAAK,UAAU,SAAS,UAAU,GAAG;AACpE,YAAM,KAAK,sBAAsB;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,eAAe,MAAuB;AAC5C,WAAO,KAAK,oBAAoB,KAAK,aAAW,QAAQ,KAAK,IAAI,CAAC;AAAA,EACpE;AAAA;AAAA,EAIA,iBAAiB,MAAmC;AAClD,UAAM,iBAAiB;AAAA,MACrB,0BAA0B;AAAA,MAC1B,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,sBAAsB;AAAA,MACtB,sBAAsB;AAAA,IACxB;AAEA,UAAM,WAAoC,CAAC;AAC3C,eAAW,CAAC,QAAQ,OAAO,KAAK,OAAO,QAAQ,cAAc,GAAG;AAC9D,eAAS,MAAM,IAAI,QAAQ,KAAK,IAAI;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,eAAe,MAAmC;AAChD,UAAM,eAAe;AAAA,MACnB,oBAAoB;AAAA,MACpB,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,WAAW;AAAA,IACb;AAEA,UAAM,WAAoC,CAAC;AAC3C,eAAW,CAAC,QAAQ,OAAO,KAAK,OAAO,QAAQ,YAAY,GAAG;AAC5D,eAAS,MAAM,IAAI,QAAQ,KAAK,IAAI;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,oBAAoB,MAAmC;AACrD,UAAM,oBAAoB;AAAA,MACxB,uBAAuB;AAAA,MACvB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,YAAY;AAAA,IACd;AAEA,UAAM,WAAoC,CAAC;AAC3C,eAAW,CAAC,QAAQ,OAAO,KAAK,OAAO,QAAQ,iBAAiB,GAAG;AACjE,eAAS,MAAM,IAAI,QAAQ,KAAK,IAAI;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AACF;;;ACxnBO,IAAM,sBAAN,MAA0B;AAAA,EAG/B,YACU,cACA,gBACA,oBACA,UACA,UACR;AALQ;AACA;AACA;AACA;AACA;AAER,SAAK,WAAW,IAAI,gBAAgB;AAAA,EACtC;AAAA,EAEA,MAAM,QAAQ,QAA2C;AACvD,UAAM,YAAY,YAAY,IAAI;AAElC,QAAI;AAEF,YAAM,aAAa,MAAM,KAAK,gBAAgB,MAAM;AAGpD,YAAM,SAAS,MAAM,KAAK,gBAAgB,UAAU;AAGpD,YAAM,OAAO,KAAK,aAAa,QAAQ,OAAO,IAAI;AAClD,UAAI,CAAC,MAAM;AACT,cAAM,IAAI,MAAM,iBAAiB,OAAO,IAAI,EAAE;AAAA,MAChD;AAGA,YAAM,UAAU,MAAM,KAAK,mBAAmB,QAAQ,IAAI;AAG1D,YAAM,aAAa,MAAM,KAAK,oBAAoB,OAAO;AACzD,UAAI,CAAC,WAAW,OAAO;AACrB,cAAM,IAAI,MAAM,iCAAiC,WAAW,OAAO,KAAK,IAAI,CAAC,EAAE;AAAA,MACjF;AAGA,UAAI,WAAW,YAAY,WAAW,SAAS,SAAS,GAAG;AACzD,gBAAQ,KAAK,mCAAmC,WAAW,QAAQ;AACnE,aAAK,SAAS,KAAK,kCAAkC;AAAA,UACnD,UAAU,OAAO;AAAA,UACjB,UAAU,WAAW;AAAA,QACvB,CAAC;AAAA,MACH;AAGA,YAAM,gBAAgB,MAAM,KAAK,oBAAoB,SAAS,MAAM;AAGpE,YAAM,UAAU,MAAM,KAAK,mBAAmB,aAAa;AAG3D,YAAM,cAAc,MAAM,KAAK,gBAAgB,SAAS,QAAQ,SAAS;AAGzE,UAAI,WAAW,YAAY,WAAW,SAAS,SAAS,GAAG;AACzD,oBAAY,QAAQ,SAAS,KAAK,GAAG,WAAW,QAAQ;AAAA,MAC1D;AAGA,YAAM,KAAK,gBAAgB,aAAa,OAAO;AAE/C,aAAO;AAAA,IACT,SAAS,OAAO;AACd,cAAQ,MAAM,gCAAgC,KAAK;AACnD,WAAK,SAAS,KAAK,+BAA+B;AAAA,QAChD,UAAU,OAAO;AAAA,QACjB,OAAO,MAAM;AAAA,QACb,OAAO;AAAA,MACT,CAAC;AAGD,aAAO,KAAK,kBAAkB,QAAQ,OAAO,SAAS;AAAA,IACxD;AAAA,EACF;AAAA,EAEA,MAAc,gBAAgB,QAA+C;AAE3E,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,8EAA8E;AAAA,IAChG;AAEA,QAAI,CAAC,OAAO,gBAAgB,OAAO,OAAO,iBAAiB,UAAU;AACnE,YAAM,IAAI,MAAM,4DAA4D,OAAO,OAAO,YAAY,mBAAmB;AAAA,IAC3H;AAEA,QAAI,CAAC,OAAO,cAAc,OAAO,OAAO,eAAe,UAAU;AAC/D,YAAM,IAAI,MAAM,2DAA2D,OAAO,OAAO,UAAU,mBAAmB;AAAA,IACxH;AAGA,UAAM,sBAAsB,OAAO,aAAa,KAAK;AACrD,UAAM,oBAAoB,OAAO,WAAW,KAAK;AAGjD,QAAI,oBAAoB,WAAW,GAAG;AACpC,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,kBAAkB,WAAW,GAAG;AAClC,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,UAAM,aAAa;AAAA,MACjB,GAAG;AAAA,MACH,cAAc;AAAA,MACd,YAAY;AAAA,IACd;AAGA,QAAI,CAAC,WAAW,MAAM;AACpB,iBAAW,OAAO,KAAK,SAAS,eAAe;AAAA,IACjD;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,gBAAgB,QAAkD;AAE9E,UAAM,eAAe,OAAO,aAAa,YAAY;AACrD,QAAI,OAAO;AACX,QAAI,aAAa;AAGjB,UAAM,iBAAiB;AAAA,MACrB,EAAE,SAAS,uCAAuC,QAAQ,iBAAiB,YAAY,IAAI;AAAA,MAC3F,EAAE,SAAS,iCAAiC,QAAQ,qBAAqB,YAAY,KAAK;AAAA,MAC1F,EAAE,SAAS,qCAAqC,QAAQ,iBAAiB,YAAY,KAAK;AAAA,MAC1F,EAAE,SAAS,iCAAiC,QAAQ,eAAe,YAAY,IAAI;AAAA,MACnF,EAAE,SAAS,8BAA8B,QAAQ,iBAAiB,YAAY,IAAI;AAAA,MAClF,EAAE,SAAS,iCAAiC,QAAQ,gBAAgB,YAAY,KAAK;AAAA,IACvF;AAEA,eAAW,EAAE,SAAS,QAAQ,YAAY,kBAAkB,KAAK,gBAAgB;AAC/E,YAAM,UAAU,aAAa,MAAM,OAAO;AAC1C,UAAI,SAAS;AACX,eAAO;AACP,qBAAa,KAAK,IAAI,qBAAqB,QAAQ,SAAS,KAAK,MAAM,CAAG;AAC1E;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,YAAY;AAAA,QACV,sBAAsB,OAAO;AAAA,QAC7B,YAAY,OAAO,WAAW;AAAA,QAC9B,MAAM,OAAO;AAAA,QACb,kBAAkB,aAAa,MAAM,iDAAiD,KAAK,CAAC;AAAA,MAC9F;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB,QAA0B,MAAsC;AAC/F,QAAI;AACF,aAAO,MAAM,KAAK,SAAS,QAAQ,QAAQ,IAAI;AAAA,IACjD,SAAS,OAAO;AACd,cAAQ,MAAM,kCAAkC,KAAK;AACrD,YAAM,IAAI,MAAM,kCAAkC,MAAM,OAAO,EAAE;AAAA,IACnE;AAAA,EACF;AAAA,EAEA,MAAc,oBAAoB,SAA8F;AAC9H,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAqB,CAAC;AAG5B,QAAI,CAAC,QAAQ,eAAe,QAAQ,YAAY,WAAW,GAAG;AAC5D,aAAO,KAAK,mCAAmC;AAAA,IACjD;AAEA,QAAI,QAAQ,gBAAgB,WAAW,GAAG;AACxC,aAAO,KAAK,0CAA0C;AAAA,IACxD;AAEA,QAAI,QAAQ,gBAAgB,UAAU,KAAO;AAC3C,eAAS,KAAK,gEAAgE;AAAA,IAChF;AAEA,QAAI,CAAC,QAAQ,gBAAgB,qBAAqB,QAAQ,gBAAgB,kBAAkB,WAAW,GAAG;AACxG,eAAS,KAAK,kEAAkE;AAAA,IAClF;AAGA,QAAI,QAAQ,eAAe,QAAQ,YAAY,SAAS,GAAG;AACzD,YAAM,uBAAuB,MAAM,KAAK,8BAA8B,QAAQ,WAAW;AACzF,aAAO,KAAK,GAAG,qBAAqB,MAAM;AAC1C,eAAS,KAAK,GAAG,qBAAqB,QAAQ;AAG9C,YAAM,qBAAqB,KAAK,4BAA4B,QAAQ,WAAW;AAC/E,aAAO,KAAK,GAAG,mBAAmB,MAAM;AACxC,eAAS,KAAK,GAAG,mBAAmB,QAAQ;AAAA,IAC9C;AAGA,QAAI,QAAQ,mBAAmB,QAAQ,gBAAgB,SAAS,GAAG;AACjE,YAAM,iBAAiB,KAAK,wBAAwB,QAAQ,eAAe;AAC3E,aAAO,KAAK,GAAG,eAAe,MAAM;AACpC,eAAS,KAAK,GAAG,eAAe,QAAQ;AAAA,IAC1C;AAGA,QAAI,KAAK,SAAS,qBAAqB,YAAY;AACjD,YAAM,wBAAwB,KAAK,+BAA+B,OAAO;AACzE,aAAO,KAAK,GAAG,sBAAsB,MAAM;AAC3C,eAAS,KAAK,GAAG,sBAAsB,QAAQ;AAAA,IACjD;AAEA,WAAO;AAAA,MACL,OAAO,OAAO,WAAW;AAAA,MACzB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,8BAA8B,aAAsF;AAChI,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAqB,CAAC;AAE5B,eAAW,cAAc,aAAa;AAEpC,UAAI,CAAC,WAAW,MAAM;AACpB,eAAO,KAAK,uCAAuC;AACnD;AAAA,MACF;AAEA,UAAI,WAAW,WAAW,KAAK,WAAW,WAAW,KAAK;AACxD,iBAAS,KAAK,uBAAuB,WAAW,QAAQ,oCAAoC;AAAA,MAC9F;AAGA,cAAQ,WAAW,MAAM;AAAA,QACvB;AACE,cAAI,WAAW,WAAW,mBACrB,WAAW,WAAW,iBAAiB,KAAK,WAAW,WAAW,iBAAiB,IAAI;AAC1F,mBAAO,KAAK,qDAAqD;AAAA,UACnE;AACA;AAAA,QAEF;AACE,cAAI,CAAC,WAAW,WAAW,iBAAiB,CAAC,WAAW,WAAW,cAAc;AAC/E,qBAAS,KAAK,mEAAmE;AAAA,UACnF;AACA;AAAA,QAEF;AACE,cAAI,WAAW,WAAW,kBAAkB,SAAS,WAAW,WAAW,kBAAkB,OAAO;AAClG,qBAAS,KAAK,4DAA4D;AAAA,UAC5E;AACA;AAAA,QAEF;AACE,cAAI,WAAW,WAAW,oBAAoB,OAAO;AACnD,mBAAO,KAAK,oDAAoD;AAAA,UAClE;AACA;AAAA,MACJ;AAGA,UAAI,WAAW,cAAc,WAAW,WAAW,SAAS,GAAG;AAC7D,mBAAW,kBAAkB,WAAW,YAAY;AAClD,cAAI,CAAC,eAAe,QAAQ,CAAC,eAAe,WAAW;AACrD,mBAAO,KAAK,sDAAsD;AAAA,UACpE;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,EAAE,QAAQ,SAAS;AAAA,EAC5B;AAAA,EAEQ,4BAA4B,aAA6E;AAC/G,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAqB,CAAC;AAE5B,UAAM,kBAAkB,YAAY,IAAI,OAAK,EAAE,IAAI;AAGnD,QAAI,gBAAgB,0CAAoC,KACpD,gBAAgB,oDAAyC,GAAG;AAC9D,eAAS,KAAK,kFAAkF;AAAA,IAClG;AAGA,QAAI,gBAAgB,oDAAyC,GAAG;AAC9D,YAAM,yBAAyB,YAAY;AAAA,QAAO,OAAE;AApT1D;AAqTQ,0BAAE,WAAW,sBAAb,mBAAgC,SAAS,qBACzC,OAAE,WAAW,sBAAb,mBAAgC,SAAS;AAAA;AAAA,MAC3C;AAEA,UAAI,uBAAuB,SAAS,GAAG;AACrC,iBAAS,KAAK,qEAAqE;AAAA,MACrF;AAAA,IACF;AAGA,UAAM,oBAAoB,YAAY,OAAO,OAAK,EAAE,0CAAoC;AACxF,QAAI,kBAAkB,SAAS,GAAG;AAChC,YAAM,SAAS,kBAAkB,IAAI,OAAK,EAAE,WAAW,cAAc,EAAE,OAAO,OAAK,CAAC;AACpF,UAAI,OAAO,SAAS,GAAG;AACrB,cAAM,WAAW,KAAK,IAAI,GAAG,MAAM;AACnC,cAAM,WAAW,KAAK,IAAI,GAAG,MAAM;AAEnC,YAAI,aAAa,UAAU;AACzB,mBAAS,KAAK,8BAA8B,WAAW,GAAG,QAAQ,WAAW,GAAG,GAAG;AAAA,QACrF;AAAA,MACF;AAAA,IACF;AAGA,UAAM,0BAA0B,YAAY,OAAO,OAAK,EAAE,YAAY,EAAE;AACxE,QAAI,wBAAwB,SAAS,GAAG;AACtC,eAAS,KAAK,mCAAmC,wBAAwB,MAAM,wBAAwB;AAAA,IACzG;AAEA,WAAO,EAAE,QAAQ,SAAS;AAAA,EAC5B;AAAA,EAEQ,wBAAwB,iBAA6E;AAC3G,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAqB,CAAC;AAE5B,eAAW,QAAQ,iBAAiB;AAClC,UAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,WAAW;AACjC,eAAO,KAAK,2CAA2C;AACvD;AAAA,MACF;AAGA,UAAI,KAAK,UAAU,SAAS,WAAW,KAAK,KAAK,UAAU,SAAS,MAAM,GAAG;AAC3E,iBAAS,KAAK,4DAA4D,KAAK,SAAS,EAAE;AAAA,MAC5F;AAGA,UAAI,KAAK,SAAS,wBAAwB,CAAC,KAAK,UAAU,SAAS,cAAc,GAAG;AAClF,eAAO,KAAK,kEAAkE;AAAA,MAChF;AAEA,UAAI,KAAK,SAAS,uBACd,CAAC,KAAK,UAAU,SAAS,oBAAoB,KAAK,CAAC,KAAK,UAAU,SAAS,mBAAmB,GAAG;AACnG,iBAAS,KAAK,iFAAiF;AAAA,MACjG;AAEA,UAAI,KAAK,SAAS,mBAAmB,CAAC,KAAK,UAAU,SAAS,iBAAiB,GAAG;AAChF,iBAAS,KAAK,qDAAqD;AAAA,MACrE;AAAA,IACF;AAEA,WAAO,EAAE,QAAQ,SAAS;AAAA,EAC5B;AAAA,EAEQ,+BAA+B,SAAqE;AAC1G,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAqB,CAAC;AAE5B,UAAM,mBAAmB,QAAQ,YAAY;AAC7C,UAAM,yBAAyB,QAAQ,gBAAgB;AAAA,MAAO,OAC5D,EAAE,KAAK,SAAS,UAAU,KAAK,EAAE,KAAK,SAAS,MAAM;AAAA,IACvD,EAAE;AAEF,QAAI,mBAAmB,IAAI;AACzB,eAAS,KAAK,0BAA0B,gBAAgB,0BAA0B;AAAA,IACpF;AAEA,QAAI,yBAAyB,IAAI;AAC/B,eAAS,KAAK,kCAAkC,sBAAsB,uBAAuB;AAAA,IAC/F;AAGA,UAAM,qBAAqB,mBAAoB,yBAAyB;AACxE,UAAM,qBAAqB,KAAK,IAAI,KAAM,qBAAqB,GAAG;AAElE,QAAI,QAAQ,gBAAgB,UAAU,oBAAoB;AACxD,eAAS;AAAA,QACP,YAAY,QAAQ,gBAAgB,OAAO,2DAC1B,kBAAkB;AAAA,MACrC;AAAA,IACF;AAEA,WAAO,EAAE,QAAQ,SAAS;AAAA,EAC5B;AAAA,EAEA,MAAc,oBAAoB,SAA2B,QAAqC;AAChG,WAAO;AAAA,MACL,IAAI,QAAQ,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,MACpE;AAAA,MACA;AAAA,MACA,OAAO;AAAA,QACL;AAAA,UACE,MAAM,KAAK,cAAc,OAAO,IAAI;AAAA,UACpC,SAAS;AAAA,UACT,SAAS;AAAA,YACP,MAAM,OAAO;AAAA,YACb,cAAc,OAAO;AAAA,YACrB,aAAa,QAAQ;AAAA,YACrB,MAAM,OAAO;AAAA,UACf;AAAA,UACA,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB;AAAA,EACF;AAAA,EAEQ,cAAc,MAAsB;AAE1C,UAAM,cAAsC;AAAA,MAC1C,eAAe;AAAA,MACf,eAAe;AAAA,MACf,wBAAwB;AAAA,MACxB,8BAA8B;AAAA,IAChC;AAEA,WAAO,YAAY,IAAI,KAAK;AAAA,EAC9B;AAAA,EAEA,MAAc,mBAAmB,eAAoC;AACnE,UAAM,UAAU,CAAC;AAEjB,eAAW,QAAQ,cAAc,OAAO;AACtC,UAAI;AACF,cAAM,SAAS,MAAM,KAAK,eAAe,QAAQ;AAAA,UAC/C,IAAI,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,UACnE,MAAM,KAAK;AAAA,UACX,SAAS,KAAK;AAAA,UACd,aAAa,cAAc,QAAQ;AAAA,UACnC,SAAS,cAAc,OAAO;AAAA,UAC9B,SAAS,cAAc,QAAQ,gBAAgB;AAAA,QACjD,CAAC;AAED,gBAAQ,KAAK;AAAA,UACX,SAAS;AAAA,UACT,MAAM;AAAA,UACN,SAAS,KAAK;AAAA,UACd,gBAAgB,OAAO,kBAAkB;AAAA,QAC3C,CAAC;AAAA,MACH,SAAS,OAAO;AACd,gBAAQ,MAAM,qCAAqC,KAAK,IAAI,KAAK,KAAK;AACtE,gBAAQ,KAAK;AAAA,UACX,SAAS;AAAA,UACT,OAAO,MAAM;AAAA,UACb,MAAM;AAAA,UACN,SAAS,KAAK;AAAA,UACd,gBAAgB;AAAA,QAClB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,gBAAgB,SAAgB,QAAuB,WAAuC;AAC1G,UAAM,iBAAiB,YAAY,IAAI,IAAI;AAC3C,UAAM,UAAoB,CAAC;AAC3B,UAAM,sBAAsB,QAAQ,KAAK,OAAK,EAAE,OAAO;AAEvD,QAAI,qBAAqB;AAEvB,iBAAW,UAAU,QAAQ,OAAO,OAAK,EAAE,OAAO,GAAG;AACnD,YAAI,OAAO,QAAQ,OAAO,KAAK,SAAS;AACtC,kBAAQ,KAAK,GAAG,OAAO,KAAK,OAAO;AAAA,QACrC,OAAO;AAEL,kBAAQ,KAAK;AAAA,YACX,IAAI,UAAU,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,YACtE,MAAM;AAAA,YACN,OAAO,EAAE,OAAO,GAAG,KAAK,OAAO,WAAW,OAAO;AAAA,YACjD,cAAc,OAAO;AAAA,YACrB,SAAS,OAAO;AAAA;AAAA,YAChB,YAAY;AAAA,YACZ,WAAW,WAAW,OAAO,IAAI,yBAAyB,OAAO,OAAO;AAAA,YACxE,QAAQ;AAAA,YACR,WAAW,KAAK,IAAI;AAAA,UACtB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAEA,UAAM,aAA8B;AAAA,MAClC,OAAO,QAAQ,IAAI,CAAC,QAAQ,WAAW;AAAA,QACrC,OAAO,qBAAqB,KAAK;AAAA,QACjC,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,gBAAgB,OAAO;AAAA,QACvB,SAAS,OAAO,WAAW;AAAA,MAC7B,EAAE;AAAA,MACF,WAAW;AAAA,IACb;AAEA,UAAM,UAA4B;AAAA,MAChC,cAAc,QAAQ;AAAA,MACtB,eAAe,QAAQ,OAAO,CAAC,KAAK,WAAW;AAC7C,YAAI,OAAO,IAAI,KAAK,IAAI,OAAO,IAAI,KAAK,KAAK;AAC7C,eAAO;AAAA,MACT,GAAG,CAAC,CAA2B;AAAA,MAC/B,YAAY,QAAQ,SAAS,IAAI,QAAQ,OAAO,CAAC,KAAK,MAAM,MAAM,EAAE,YAAY,CAAC,IAAI,QAAQ,SAAS;AAAA,MACtG,UAAU,CAAC;AAAA,IACb;AAEA,WAAO;AAAA,MACL,IAAI,UAAU,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,MACtE,UAAU,OAAO;AAAA,MACjB,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,WAAW,CAAC;AAAA,MACZ;AAAA,MACA;AAAA,MACA,UAAU;AAAA,QACR,MAAM,OAAO;AAAA,QACb,gBAAgB,QAAQ;AAAA,QACxB,oBAAoB,QAAQ,OAAO,OAAK,EAAE,OAAO,EAAE;AAAA,QACnD,gBAAgB,QAAQ,OAAO,OAAK,CAAC,EAAE,OAAO,EAAE;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,gBAAgB,QAAmB,SAA0C;AAEzF,QAAI,KAAK,SAAS,qBAAqB,YAAY;AAEjD,UAAI,OAAO,QAAQ,SAAS,KAAK;AAC/B,cAAM,IAAI,MAAM,iEAAiE;AAAA,MACnF;AAGA,UAAI,OAAO,iBAAiB,KAAK,SAAS,qBAAqB,mBAAmB;AAChF,gBAAQ,KAAK,mCAAmC,OAAO,cAAc,IAAI;AAAA,MAC3E;AAGA,iBAAW,cAAc,QAAQ,aAAa;AAC5C,YAAI,WAAW,4CAAsC;AACnD,gBAAM,cAAc,KAAK,qBAAqB,OAAO,OAAO;AAC5D,cAAI,cAAc,WAAW,WAAW,gBAAgB;AACtD,kBAAM,IAAI;AAAA,cACR,iBAAiB,cAAc,KAAK,QAAQ,CAAC,CAAC,+BAC1C,WAAW,WAAW,iBAAiB,KAAK,QAAQ,CAAC,CAAC;AAAA,YAC5D;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,SAAK,SAAS,KAAK,8BAA8B;AAAA,MAC/C,UAAU,OAAO;AAAA,MACjB,SAAS,OAAO;AAAA,MAChB,aAAa,OAAO,QAAQ;AAAA,MAC5B,gBAAgB,OAAO;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEQ,qBAAqB,SAA2B;AACtD,QAAI,QAAQ,WAAW;AAAG,aAAO;AAEjC,QAAI,sBAAsB;AAC1B,QAAI,iBAAiB;AAErB,eAAW,UAAU,SAAS;AAC5B,6BAAuB,OAAO,aAAa;AAC3C,wBAAkB,OAAO,QAAQ;AAAA,IACnC;AAEA,QAAI,wBAAwB;AAAG,aAAO;AAEtC,WAAO,KAAK,IAAI,iBAAiB,mBAAmB,IAAI;AAAA,EAC1D;AAAA,EAEQ,kBAAkB,QAAuB,OAAc,WAA8B;AAC3F,WAAO;AAAA,MACL,IAAI,gBAAgB,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,GAAG,CAAC,CAAC;AAAA,MAC5E,UAAU,OAAO;AAAA,MACjB,SAAS;AAAA,MACT,gBAAgB,YAAY,IAAI,IAAI;AAAA,MACpC,SAAS,CAAC;AAAA,MACV,WAAW,CAAC;AAAA,MACZ,YAAY;AAAA,QACV,OAAO,CAAC;AAAA,UACN,OAAO;AAAA,UACP,OAAO;AAAA,UACP,QAAQ,EAAE,OAAO,MAAM,SAAS,OAAO,MAAM,MAAM;AAAA,UACnD,gBAAgB,YAAY,IAAI,IAAI;AAAA,UACpC,SAAS;AAAA,QACX,CAAC;AAAA,QACD,WAAW,YAAY,IAAI,IAAI;AAAA,MACjC;AAAA,MACA,SAAS;AAAA,QACP,cAAc;AAAA,QACd,eAAe,CAAC;AAAA,QAChB,YAAY;AAAA,QACZ,UAAU,CAAC,MAAM,OAAO;AAAA,MAC1B;AAAA,MACA,UAAU;AAAA,QACR,OAAO,MAAM;AAAA,QACb,MAAM,OAAO;AAAA,QACb,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF;;;AC3mBO,IAAM,eAAN,MAAmB;AAAA,EAIxB,YACU,UACA,UACR;AAFQ;AACA;AALV,SAAQ,QAAqC,oBAAI,IAAI;AAOnD,SAAK,WAAW,IAAI,gBAAgB;AACpC,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,MAAM,aAAa,MAAqC;AAEtD,UAAM,aAAa,MAAM,KAAK,aAAa,IAAI;AAC/C,QAAI,CAAC,WAAW,OAAO;AACrB,YAAM,IAAI,MAAM,2BAA2B,WAAW,OAAO,KAAK,IAAI,CAAC,EAAE;AAAA,IAC3E;AAGA,QAAI,KAAK,MAAM,IAAI,KAAK,EAAE,GAAG;AAC3B,YAAM,eAAe,KAAK,MAAM,IAAI,KAAK,EAAE;AAC3C,aAAO,MAAM,KAAK,YAAY,MAAM,aAAa,OAAO;AAAA,IAC1D;AAGA,QAAI,CAAC,KAAK,eAAe,KAAK,YAAY,WAAW,GAAG;AACtD,UAAI;AACF,cAAM,WAAW,MAAM,KAAK,SAAS,YAAY,IAAI;AACrD,aAAK,cAAc,SAAS;AAAA,MAC9B,SAAS,OAAO;AACd,gBAAQ,KAAK,0CAA0C,KAAK,EAAE,KAAK,KAAK;AACxE,aAAK,cAAc,CAAC;AAAA,MACtB;AAAA,IACF;AAGA,SAAK,MAAM,IAAI,KAAK,IAAI,IAAI;AAG5B,SAAK,SAAS,KAAK,mBAAmB,EAAE,KAAK,CAAC;AAG9C,QAAI,CAAC,CAAC,eAAe,eAAe,wBAAwB,4BAA4B,EAAE,SAAS,KAAK,EAAE,GAAG;AAC3G,YAAM,KAAK,aAAa;AAAA,IAC1B;AAEA,YAAQ,IAAI,oBAAoB,KAAK,IAAI,KAAK,KAAK,EAAE,GAAG;AAAA,EAC1D;AAAA,EAEA,QAAQ,IAAwC;AAC9C,WAAO,KAAK,MAAM,IAAI,EAAE;AAAA,EAC1B;AAAA,EAEA,cAAgC;AAC9B,WAAO,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC;AAAA,EACvC;AAAA,EAEA,mBAAmB,UAAoC;AACrD,WAAO,KAAK,YAAY,EAAE,OAAO,UAAQ,KAAK,SAAS,aAAa,QAAQ;AAAA,EAC9E;AAAA,EAEA,MAAM,WAAW,IAAY,SAAiD;AAC5E,UAAM,eAAe,KAAK,MAAM,IAAI,EAAE;AACtC,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MAAM,mBAAmB,EAAE,EAAE;AAAA,IACzC;AAEA,UAAM,cAAc,EAAE,GAAG,cAAc,GAAG,QAAQ;AAGlD,QAAI,QAAQ,sBAAsB;AAChC,YAAM,WAAW,MAAM,KAAK,SAAS,YAAY,WAAW;AAC5D,kBAAY,cAAc,SAAS;AAAA,IACrC;AAEA,SAAK,MAAM,IAAI,IAAI,WAAW;AAC9B,SAAK,SAAS,KAAK,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAM,WAAW,IAA2B;AAC1C,QAAI,KAAK,MAAM,IAAI,EAAE,GAAG;AACtB,YAAM,OAAO,KAAK,MAAM,IAAI,EAAE;AAG9B,UAAI,CAAC,eAAe,eAAe,wBAAwB,4BAA4B,EAAE,SAAS,EAAE,GAAG;AACrG,cAAM,IAAI,MAAM,+BAA+B,EAAE,EAAE;AAAA,MACrD;AAEA,WAAK,MAAM,OAAO,EAAE;AACpB,WAAK,SAAS,KAAK,gBAAgB,EAAE,QAAQ,IAAI,KAAK,CAAC;AAGvD,YAAM,KAAK,aAAa;AAExB,cAAQ,IAAI,iBAAiB,KAAK,IAAI,KAAK,EAAE,GAAG;AAAA,IAClD;AAAA,EACF;AAAA,EAEA,MAAc,aAAa,MAAqE;AAC9F,UAAM,SAAmB,CAAC;AAG1B,QAAI,CAAC,KAAK;AAAI,aAAO,KAAK,qBAAqB;AAC/C,QAAI,CAAC,KAAK;AAAM,aAAO,KAAK,uBAAuB;AACnD,QAAI,CAAC,KAAK;AAAa,aAAO,KAAK,8BAA8B;AACjE,QAAI,CAAC,KAAK;AAAS,aAAO,KAAK,0BAA0B;AAGzD,QAAI,KAAK,MAAM,KAAK,MAAM,IAAI,KAAK,EAAE,GAAG;AACtC,aAAO,KAAK,2BAA2B,KAAK,EAAE,EAAE;AAAA,IAClD;AAGA,QAAI,CAAC,KAAK,sBAAsB;AAC9B,aAAO,KAAK,qCAAqC;AAAA,IACnD,OAAO;AACL,UAAI,CAAC,KAAK,qBAAqB,WAAW,KAAK,qBAAqB,QAAQ,WAAW,GAAG;AACxF,eAAO,KAAK,uCAAuC;AAAA,MACrD;AAGA,YAAM,WAAW;AAAA,QACf,GAAG,KAAK,qBAAqB;AAAA,QAC7B,GAAG,KAAK,qBAAqB;AAAA,QAC7B,GAAG,KAAK,qBAAqB;AAAA,QAC7B,GAAG,KAAK,qBAAqB;AAAA,MAC/B;AAEA,iBAAW,QAAQ,UAAU;AAC3B,YAAI,CAAC,KAAK,KAAK,GAAG;AAChB,iBAAO,KAAK,uBAAuB;AACnC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,CAAC,KAAK,UAAU;AAClB,aAAO,KAAK,2BAA2B;AAAA,IACzC,OAAO;AACL,UAAI,CAAC,KAAK,SAAS,UAAU;AAC3B,eAAO,KAAK,2BAA2B;AAAA,MACzC;AACA,UAAI,CAAC,KAAK,SAAS,YAAY;AAC7B,eAAO,KAAK,6BAA6B;AAAA,MAC3C;AAAA,IACF;AAEA,WAAO;AAAA,MACL,OAAO,OAAO,WAAW;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,cAAsB;AACpB,UAAM,aAAa,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC;AACjD,WAAO,KAAK,UAAU,YAAY,MAAM,CAAC;AAAA,EAC3C;AAAA;AAAA,EAGA,MAAM,YAAY,WAAoE;AACpF,UAAM,SAAmB,CAAC;AAC1B,QAAI,WAAW;AAEf,QAAI;AACF,YAAM,QAA0B,KAAK,MAAM,SAAS;AAEpD,UAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACzB,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC3D;AAEA,iBAAW,QAAQ,OAAO;AACxB,YAAI;AACF,gBAAM,KAAK,aAAa,IAAI;AAC5B;AAAA,QACF,SAAS,OAAO;AACd,iBAAO,KAAK,yBAAyB,KAAK,MAAM,SAAS,KAAK,MAAM,OAAO,EAAE;AAAA,QAC/E;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,aAAO,KAAK,wBAAwB,MAAM,OAAO,EAAE;AAAA,IACrD;AAEA,WAAO,EAAE,UAAU,OAAO;AAAA,EAC5B;AAAA;AAAA,EAGA,MAAc,qBAAoC;AAjMpD;AAkMI,SAAI,gBAAK,aAAL,mBAAe,QAAf,mBAAoB,OAAO;AAC7B,UAAI;AACF,cAAM,OAAO,MAAM,KAAK,SAAS,IAAI,MAAM,QAAQ,KAAK,+CAA+C;AACvG,YAAI,MAAM;AACR,gBAAM,QAA0B,KAAK,MAAM,IAAI;AAC/C,qBAAW,QAAQ,OAAO;AAExB,gBAAI,CAAC,KAAK,MAAM,IAAI,KAAK,EAAE,GAAG;AAC5B,oBAAM,KAAK,aAAa,IAAI;AAAA,YAC9B;AAAA,UACF;AACA,kBAAQ,IAAI,UAAU,MAAM,MAAM,kBAAkB;AAAA,QACtD;AAAA,MACF,SAAS,OAAO;AAEd,gBAAQ,IAAI,4CAA4C;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,eAA8B;AAtN9C;AAuNI,SAAI,gBAAK,aAAL,mBAAe,QAAf,mBAAoB,OAAO;AAC7B,UAAI;AACF,cAAM,cAAc,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC,EAAE;AAAA,UAAO,UACzD,CAAC,CAAC,eAAe,eAAe,wBAAwB,4BAA4B,EAAE,SAAS,KAAK,EAAE;AAAA,QACxG;AAEA,cAAM,OAAO,KAAK,UAAU,aAAa,MAAM,CAAC;AAChD,cAAM,KAAK,SAAS,IAAI,MAAM,QAAQ,MAAM,iDAAiD,IAAI;AACjG,gBAAQ,IAAI,aAAa,YAAY,MAAM,eAAe;AAAA,MAC5D,SAAS,OAAO;AACd,gBAAQ,MAAM,4BAA4B,KAAK;AAAA,MACjD;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,MAAc,YAAY,MAAsB,eAAgD;AAC9F,UAAM,iBAAiB,KAAK,WAAW;AAEvC,QAAI,KAAK,gBAAgB,gBAAgB,aAAa,KAAK,GAAG;AAC5D,aAAO;AAAA,IACT;AAGA,UAAM,eAAe,EAAE,GAAG,KAAK;AAG/B,QAAI,mBAAmB,WAAW,KAAK,gBAAgB,eAAe,OAAO,KAAK,GAAG;AAEnF,UAAI,CAAC,aAAa,SAAS,kBAAkB;AAC3C,qBAAa,SAAS,mBAAmB;AAAA,UACvC;AAAA,YACE,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,WAAW,KAAK,IAAI;AAAA,YACpB,SAAS,CAAC,kCAAkC;AAAA,UAC9C;AAAA,QACF;AAAA,MACF;AACA,mBAAa,UAAU;AAAA,IACzB;AAEA,SAAK,SAAS,KAAK,iBAAiB;AAAA,MAClC,MAAM;AAAA,MACN,aAAa;AAAA,MACb,WAAW;AAAA,IACb,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEQ,gBAAgB,GAAW,GAAmB;AACpD,UAAM,SAAS,EAAE,MAAM,GAAG,EAAE,IAAI,MAAM;AACtC,UAAM,SAAS,EAAE,MAAM,GAAG,EAAE,IAAI,MAAM;AAEtC,aAAS,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,QAAQ,OAAO,MAAM,GAAG,KAAK;AAC/D,YAAM,QAAQ,OAAO,CAAC,KAAK;AAC3B,YAAM,QAAQ,OAAO,CAAC,KAAK;AAE3B,UAAI,QAAQ;AAAO,eAAO;AAC1B,UAAI,QAAQ;AAAO,eAAO;AAAA,IAC5B;AAEA,WAAO;AAAA,EACT;AACF;;;AC9QO,IAAM,iBAAN,MAAqB;AAAA,EAK1B,YACU,UACA,UACR;AAFQ;AACA;AANV,SAAQ,WAAuC,oBAAI,IAAI;AAQrD,SAAK,SAAS,IAAI,cAAc;AAChC,SAAK,gBAAgB,IAAI,qBAAqB,KAAK,QAAQ;AAAA,EAC7D;AAAA,EAEA,MAAM,gBAAgB,SAAuC;AAC3D,QAAI;AAEF,YAAM,SAAS,KAAK,iBAAiB,QAAQ,IAAI;AAGjD,YAAM,QAAQ,WAAW,MAAM;AAG/B,WAAK,OAAO,gBAAgB,OAAO;AAGnC,WAAK,SAAS,IAAI,QAAQ,MAAM,OAAO;AAGvC,WAAK,cAAc,gBAAgB,OAAO;AAG1C,WAAK,SAAS,KAAK,sBAAsB;AAAA,QACvC,MAAM,QAAQ;AAAA,QACd;AAAA,MACF,CAAC;AAED,cAAQ,IAAI,uBAAuB,QAAQ,IAAI,KAAK,QAAQ,OAAO,EAAE;AAAA,IACvE,SAAS,OAAO;AACd,cAAQ,MAAM,8BAA8B,QAAQ,IAAI,KAAK,KAAK;AAClE,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ,KAA0C;AACtD,UAAM,YAAY,YAAY,IAAI;AAElC,QAAI;AAEF,YAAM,mBAAmB,KAAK,OAAO,qBAAqB,GAAG;AAE7D,UAAI,iBAAiB,WAAW,GAAG;AACjC,cAAM,QAAQ,IAAI;AAAA,UAChB,2CAA2C,IAAI,IAAI,yBAC5B,KAAK,SAAS,IAAI,+BACZ,MAAM,KAAK,KAAK,SAAS,OAAO,CAAC,EAAE,IAAI,OAAK,EAAE,mBAAmB,EAAE,KAAK,EAAE,KAAK,IAAI,CAAC;AAAA,QACnH;AAEA,aAAK,SAAS,KAAK,4BAA4B;AAAA,UAC7C,OAAO,IAAI;AAAA,UACX,OAAO,MAAM;AAAA,UACb,mBAAmB,MAAM,KAAK,KAAK,SAAS,KAAK,CAAC;AAAA,UAClD,kBAAkB,IAAI;AAAA,QACxB,CAAC;AAED,cAAM;AAAA,MACR;AAGA,UAAI,YAA0B;AAC9B,YAAM,oBAA8B,CAAC;AAErC,iBAAW,WAAW,kBAAkB;AACtC,0BAAkB,KAAK,QAAQ,IAAI;AAEnC,YAAI;AAEF,eAAK,OAAO,kBAAkB,QAAQ,MAAM,KAAK,sBAAsB,QAAQ,IAAI,CAAC;AAEpF,gBAAM,SAAS,MAAM,KAAK,mBAAmB,SAAS,GAAG;AACzD,gBAAM,gBAAgB,YAAY,IAAI,IAAI;AAG1C,eAAK,OAAO,uBAAuB,QAAQ,MAAM,eAAe,IAAI;AAGpE,eAAK,gBAAgB,QAAQ,MAAM,MAAM,aAAa;AAGtD,eAAK,SAAS,KAAK,6BAA6B;AAAA,YAC9C,OAAO,IAAI;AAAA,YACX,aAAa,QAAQ;AAAA,YACrB;AAAA,YACA;AAAA,UACF,CAAC;AAED,iBAAO;AAAA,QACT,SAAS,OAAO;AACd,gBAAM,gBAAgB,YAAY,IAAI,IAAI;AAE1C,kBAAQ,KAAK,WAAW,QAAQ,IAAI,mBAAmB,IAAI,EAAE,KAAK,KAAK;AACvE,sBAAY;AAGZ,eAAK,OAAO,uBAAuB,QAAQ,MAAM,eAAe,KAAK;AAGrE,eAAK,gBAAgB,QAAQ,MAAM,OAAO,aAAa;AAGvD,eAAK,SAAS,KAAK,oCAAoC;AAAA,YACrD,OAAO,IAAI;AAAA,YACX,aAAa,QAAQ;AAAA,YACrB,OAAO,MAAM;AAAA,YACb;AAAA,YACA,mBAAmB,iBAAiB,SAAS,kBAAkB;AAAA,UACjE,CAAC;AAGD;AAAA,QACF;AAAA,MACF;AAGA,YAAM,aAAa,IAAI;AAAA,QACrB,wCAAwC,IAAI,EAAE,yBACvB,kBAAkB,KAAK,IAAI,CAAC,kBACpC,uCAAW,YAAW,eAAe;AAAA,MACtD;AAEA,WAAK,SAAS,KAAK,4BAA4B;AAAA,QAC7C,OAAO,IAAI;AAAA,QACX,OAAO,WAAW;AAAA,QAClB;AAAA,QACA,WAAW,uCAAW;AAAA,MACxB,CAAC;AAED,YAAM;AAAA,IACR,SAAS,OAAO;AAEd,UAAI,MAAM,WAAW,CAAC,MAAM,QAAQ,SAAS,qBAAqB,GAAG;AACnE,aAAK,SAAS,KAAK,4BAA4B;AAAA,UAC7C,OAAO,IAAI;AAAA,UACX,OAAO,MAAM;AAAA,QACf,CAAC;AAAA,MACH;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB,SAAwB,KAA0C;AAhKrG;AAkKI,UAAM,SAAS,QAAQ,UAAU;AACjC,QAAI,CAAC,OAAO,SAAS;AACnB,YAAM,IAAI,MAAM,WAAW,QAAQ,IAAI,oBAAoB,OAAO,KAAK,EAAE;AAAA,IAC3E;AAGA,UAAM,iBAAiB,IAAI,QAAsB,CAAC,GAAG,WAAW;AAC9D,iBAAW,MAAM,OAAO,IAAI,MAAM,2BAA2B,CAAC,GAAG,IAAI,OAAO;AAAA,IAC9E,CAAC;AAGD,UAAM,mBAAmB,QAAQ,QAAQ,GAAG;AAE5C,UAAM,SAAS,MAAM,QAAQ,KAAK,CAAC,kBAAkB,cAAc,CAAC;AAEpE,QAAI,CAAC,OAAO,SAAS;AACnB,YAAM,IAAI,MAAM,8BAA6B,YAAO,WAAP,mBAAe,IAAI,OAAK,EAAE,SAAS,KAAK,KAAK,EAAE;AAAA,IAC9F;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,MAAyC;AAClD,WAAO,KAAK,SAAS,IAAI,IAAI;AAAA,EAC/B;AAAA,EAEA,iBAAkC;AAChC,WAAO,MAAM,KAAK,KAAK,SAAS,OAAO,CAAC;AAAA,EAC1C;AAAA,EAEA,kBAA0B;AACxB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,iBAAiB,MAAyC;AACxD,UAAM,UAAU,KAAK,SAAS,IAAI,IAAI;AACtC,WAAO,mCAAS;AAAA,EAClB;AAAA,EAEA,wBAAuD;AACrD,UAAM,WAA0C,CAAC;AAEjD,eAAW,CAAC,MAAM,OAAO,KAAK,KAAK,UAAU;AAC3C,eAAS,IAAI,IAAI,QAAQ,UAAU;AAAA,IACrC;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,iBAAiB,aAA0B;AAnNrD;AAoNI,aAAO,UAAK,SAAS,SAAS,WAAW,MAAlC,mBAAqC,WAAU,CAAC;AAAA,EACzD;AAAA,EAEQ,gBAAgB,aAAqB,SAAkB,cAA4B;AACzF,SAAK,SAAS,KAAK,8BAA8B;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEQ,sBAAsB,aAA6B;AAGzD,UAAM,UAAU,KAAK,SAAS,IAAI,WAAW;AAC7C,QAAI,CAAC;AAAS,aAAO;AAErB,UAAM,SAAS,QAAQ,UAAU;AACjC,WAAO,OAAO,eAAe;AAAA,EAC/B;AAAA;AAAA,EAGA,mBAAmB,UAA8D;AAC/E,SAAK,OAAO,mBAAmB,QAAQ;AAEvC,SAAK,SAAS,KAAK,4BAA4B;AAAA,MAC7C,aAAa;AAAA,MACb,WAAW,KAAK,IAAI;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEA,qBAA6B;AAC3B,WAAO,KAAK,OAAO,mBAAmB;AAAA,EACxC;AAAA,EAEA,oBAAyC;AACvC,WAAO,KAAK,OAAO,kBAAkB;AAAA,EACvC;AAAA,EAEA,2BAAgD;AAC9C,UAAM,iBAAsC,CAAC;AAE7C,eAAW,CAAC,MAAM,OAAO,KAAK,KAAK,UAAU;AAC3C,YAAM,SAAS,QAAQ,UAAU;AACjC,YAAM,UAAU,KAAK,OAAO,kBAAkB,EAAE,IAAI;AAEpD,qBAAe,IAAI,IAAI;AAAA,QACrB,GAAG;AAAA,QACH;AAAA,QACA,cAAc,QAAQ;AAAA,QACtB,qBAAqB,QAAQ;AAAA,QAC7B,iBAAiB,OAAO,mBAAmB,KAAK,IAAI;AAAA,MACtD;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,UAAyB;AAE7B,SAAK,cAAc,QAAQ;AAG3B,eAAW,CAAC,MAAM,OAAO,KAAK,KAAK,UAAU;AAC3C,UAAI;AACF,cAAM,QAAQ,QAAQ;AAAA,MACxB,SAAS,OAAO;AACd,gBAAQ,MAAM,6BAA6B,IAAI,KAAK,KAAK;AAAA,MAC3D;AAAA,IACF;AAGA,SAAK,SAAS,MAAM;AAAA,EACtB;AACF;AAEA,IAAM,gBAAN,MAAoB;AAAA,EAMlB,YAAY,kBAAgE,YAAY;AALxF,SAAQ,WAA4B,CAAC;AACrC,SAAQ,kBAAgE;AACxE,SAAQ,kBAA0B;AAClC,SAAQ,iBAA8C,oBAAI,IAAI;AAG5D,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,gBAAgB,SAA8B;AAC5C,SAAK,SAAS,KAAK,OAAO;AAG1B,SAAK,eAAe,IAAI,QAAQ,MAAM;AAAA,MACpC,eAAe;AAAA,MACf,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,MACV,UAAU,KAAK,uBAAuB,OAAO;AAAA,IAC/C,CAAC;AAGD,SAAK,uBAAuB;AAAA,EAC9B;AAAA,EAEA,qBAAqB,KAAoC;AAEvD,UAAM,qBAAqB,KAAK,SAAS;AAAA,MAAO,aAC9C,KAAK,oBAAoB,SAAS,GAAG;AAAA,IACvC;AAEA,QAAI,mBAAmB,WAAW,GAAG;AACnC,aAAO,CAAC;AAAA,IACV;AAGA,YAAQ,KAAK,iBAAiB;AAAA,MAC5B,KAAK;AACH,eAAO,KAAK,gBAAgB,oBAAoB,GAAG;AAAA,MAErD,KAAK;AACH,eAAO,KAAK,kBAAkB,kBAAkB;AAAA,MAElD,KAAK;AACH,eAAO,KAAK,oBAAoB,oBAAoB,GAAG;AAAA,MAEzD;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAAA,EAEQ,oBAAoB,SAAwB,KAA4B;AAtVlF;AAwVI,QAAI,CAAC,QAAQ,oBAAoB,SAAS,IAAI,IAAI,GAAG;AACnD,aAAO;AAAA,IACT;AAGA,UAAM,SAAS,QAAQ,UAAU;AACjC,QAAI,CAAC,OAAO,SAAS;AACnB,aAAO;AAAA,IACT;AAGA,QAAI,IAAI,WAAW,OAAO,IAAI,QAAQ,SAAS,UAAU;AACvD,YAAM,aAAa,IAAI,QAAQ,KAAK;AACpC,UAAI,aAAa,QAAQ,aAAa,eAAe;AACnD,eAAO;AAAA,MACT;AAAA,IACF;AAGA,QAAI,IAAI,eAAe,IAAI,YAAY,SAAS,GAAG;AACjD,YAAM,uBAAuB,KAAK,4BAA4B,IAAI,WAAW;AAE7E,iBAAW,cAAc,sBAAsB;AAC7C,YAAI,GAAC,aAAQ,aAAa,yBAArB,mBAA2C,SAAS,cAAa;AACpE,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAGA,QAAI,IAAI,UAAU,QAAQ,aAAa,mBAAmB;AACxD,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,gBAAgB,UAA2B,KAAoC;AAErF,WAAO,SAAS,KAAK,CAAC,GAAG,MAAM;AAC7B,YAAM,SAAS,KAAK,sBAAsB,GAAG,GAAG;AAChD,YAAM,SAAS,KAAK,sBAAsB,GAAG,GAAG;AAChD,aAAO,SAAS;AAAA,IAClB,CAAC;AAAA,EACH;AAAA,EAEQ,kBAAkB,UAA4C;AACpE,QAAI,SAAS,WAAW;AAAG,aAAO,CAAC;AAGnC,UAAM,kBAAkB,SAAS,KAAK,kBAAkB,SAAS,MAAM;AACvE,SAAK,mBAAmB,KAAK,kBAAkB,KAAK,SAAS;AAG7D,UAAM,SAAS,CAAC,eAAe;AAC/B,WAAO,KAAK,GAAG,SAAS,OAAO,OAAK,EAAE,SAAS,gBAAgB,IAAI,CAAC;AAEpE,WAAO;AAAA,EACT;AAAA,EAEQ,oBAAoB,UAA2B,KAAoC;AAEzF,WAAO,SAAS,KAAK,CAAC,GAAG,MAAM;AAC7B,YAAM,WAAW,KAAK,eAAe,IAAI,EAAE,IAAI;AAC/C,YAAM,WAAW,KAAK,eAAe,IAAI,EAAE,IAAI;AAG/C,YAAM,aAAa,KAAK,mBAAmB,QAAQ;AACnD,YAAM,aAAa,KAAK,mBAAmB,QAAQ;AAEnD,aAAO,aAAa;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEQ,sBAAsB,SAAwB,KAA2B;AAC/E,UAAM,UAAU,KAAK,eAAe,IAAI,QAAQ,IAAI;AACpD,QAAI,CAAC;AAAS,aAAO;AAErB,QAAI,QAAQ,QAAQ,WAAW;AAG/B,UAAM,cAAc,QAAQ,gBAAgB,IACxC,QAAQ,qBAAqB,QAAQ,gBACrC;AACJ,aAAS,cAAc;AAGvB,UAAM,sBAAsB,KAAK,IAAI,QAAQ,sBAAsB,KAAM,EAAE;AAC3E,aAAS;AAGT,aAAS,QAAQ,cAAc;AAG/B,UAAM,eAAe,KAAK,IAAI,GAAG,MAAO,KAAK,IAAI,IAAI,QAAQ,YAAY,GAAK;AAC9E,aAAS;AAGT,QAAI,IAAI,aAAa;AACnB,YAAM,qBAAqB,KAAK,4BAA4B,SAAS,GAAG;AACxE,eAAS;AAAA,IACX;AAEA,WAAO,KAAK,IAAI,GAAG,KAAK;AAAA,EAC1B;AAAA,EAEQ,mBAAmB,SAAiC;AAC1D,UAAM,cAAc,QAAQ,gBAAgB,IACxC,QAAQ,qBAAqB,QAAQ,gBACrC;AAEJ,UAAM,cAAc,QAAQ,cAAc;AAC1C,UAAM,kBAAkB,QAAQ,sBAAsB;AAEtD,WAAQ,cAAc,MAAO,cAAc;AAAA,EAC7C;AAAA,EAEQ,4BAA4B,SAAwB,KAA2B;AACrF,QAAI,QAAQ;AAGZ,UAAM,iBAAyC;AAAA,MAC7C,iBAAiB,QAAQ,KAAK,SAAS,SAAS,IAAI,IAAI;AAAA,MACxD,qBAAqB,QAAQ,KAAK,SAAS,OAAO,IAAI,IAAI;AAAA,MAC1D,iBAAiB,QAAQ,KAAK,SAAS,WAAW,IAAI,IAAI;AAAA,IAC5D;AAEA,aAAS,eAAe,IAAI,IAAI,KAAK;AAGrC,QAAI,IAAI,aAAa;AACnB,YAAM,uBAAuB,IAAI,YAAY;AAAA,QAAO,gBAAW;AA3drE;AA4dQ,+BAAQ,aAAa,yBAArB,mBAA2C,SAAS,WAAW;AAAA;AAAA,MACjE;AAEA,eAAS,qBAAqB,SAAS;AAAA,IACzC;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,4BAA4B,aAA8B;AAChE,UAAM,eAAe,oBAAI,IAAY;AAErC,eAAW,cAAc,aAAa;AACpC,UAAI,WAAW,SAAS,iBAAiB;AACvC,qBAAa,IAAI,eAAe;AAAA,MAClC;AACA,UAAI,WAAW,SAAS,qBAAqB;AAC3C,qBAAa,IAAI,mBAAmB;AAAA,MACtC;AACA,UAAI,WAAW,SAAS,gBAAgB;AACtC,qBAAa,IAAI,kBAAkB;AAAA,MACrC;AACA,UAAI,WAAW,SAAS,qBAAqB;AAC3C,qBAAa,IAAI,gBAAgB;AAAA,MACnC;AAAA,IACF;AAEA,WAAO,MAAM,KAAK,YAAY;AAAA,EAChC;AAAA,EAEQ,uBAAuB,SAAgC;AA1fjE;AA4fI,aAAO,aAAQ,aAAR,mBAAkB,aAAY;AAAA,EACvC;AAAA,EAEQ,yBAA+B;AACrC,SAAK,SAAS,KAAK,CAAC,GAAG,MAAM;AAC3B,YAAM,WAAW,KAAK,eAAe,IAAI,EAAE,IAAI;AAC/C,YAAM,WAAW,KAAK,eAAe,IAAI,EAAE,IAAI;AAE/C,YAAM,aAAY,qCAAU,aAAY;AACxC,YAAM,aAAY,qCAAU,aAAY;AAExC,aAAO,YAAY;AAAA,IACrB,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,uBAAuB,aAAqB,cAAsB,SAAwB;AACxF,UAAM,UAAU,KAAK,eAAe,IAAI,WAAW;AACnD,QAAI,CAAC;AAAS;AAEd,YAAQ;AACR,QAAI,SAAS;AACX,cAAQ;AAAA,IACV;AAGA,YAAQ,uBACL,QAAQ,uBAAuB,QAAQ,gBAAgB,KAAM,gBAC5D,QAAQ;AAEZ,YAAQ,WAAW,KAAK,IAAI;AAAA,EAC9B;AAAA,EAEA,kBAAkB,aAAqB,aAA2B;AAChE,UAAM,UAAU,KAAK,eAAe,IAAI,WAAW;AACnD,QAAI,SAAS;AACX,cAAQ,cAAc;AAAA,IACxB;AAAA,EACF;AAAA,EAEA,mBAAmB,UAA8D;AAC/E,SAAK,kBAAkB;AAEvB,QAAI,aAAa,eAAe;AAC9B,WAAK,kBAAkB;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,oBAAoD;AAClD,UAAM,SAAyC,CAAC;AAChD,eAAW,CAAC,MAAM,OAAO,KAAK,KAAK,gBAAgB;AACjD,aAAO,IAAI,IAAI,EAAE,GAAG,QAAQ;AAAA,IAC9B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,qBAA6B;AAC3B,WAAO,KAAK;AAAA,EACd;AACF;AAYA,IAAM,uBAAN,MAA2B;AAAA;AAAA,EAIzB,YAAoB,UAA4B;AAA5B;AAHpB,SAAQ,YAAyC,oBAAI,IAAI;AACzD,SAAiB,wBAAwB;AAAA,EAEQ;AAAA,EAEjD,gBAAgB,SAA8B;AAE5C,SAAK,eAAe,QAAQ,IAAI;AAGhC,UAAM,WAAW,YAAY,MAAM;AACjC,WAAK,mBAAmB,OAAO;AAAA,IACjC,GAAG,KAAK,qBAAqB;AAE7B,SAAK,UAAU,IAAI,QAAQ,MAAM,QAAQ;AAAA,EAC3C;AAAA,EAEA,eAAe,aAA2B;AACxC,UAAM,WAAW,KAAK,UAAU,IAAI,WAAW;AAC/C,QAAI,UAAU;AACZ,oBAAc,QAAQ;AACtB,WAAK,UAAU,OAAO,WAAW;AAAA,IACnC;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB,SAAuC;AACtE,QAAI;AACF,YAAM,SAAS,QAAQ,UAAU;AAEjC,UAAI,CAAC,OAAO,SAAS;AACnB,aAAK,SAAS,KAAK,0BAA0B;AAAA,UAC3C,aAAa,QAAQ;AAAA,UACrB;AAAA,UACA,WAAW,KAAK,IAAI;AAAA,QACtB,CAAC;AAAA,MACH;AAAA,IACF,SAAS,OAAO;AACd,WAAK,SAAS,KAAK,wBAAwB;AAAA,QACzC,aAAa,QAAQ;AAAA,QACrB,OAAO,MAAM;AAAA,QACb,WAAW,KAAK,IAAI;AAAA,MACtB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,UAAgB;AAEd,eAAW,CAAC,MAAM,QAAQ,KAAK,KAAK,WAAW;AAC7C,oBAAc,QAAQ;AAAA,IACxB;AACA,SAAK,UAAU,MAAM;AAAA,EACvB;AACF;;;AC/mBO,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EAAtB;AAEL,SAAQ,UAA4B,oBAAI,IAAI;AAAA;AAAA,EAE5C,OAAO,cAA+B;AACpC,QAAI,CAAC,iBAAgB,UAAU;AAC7B,uBAAgB,WAAW,IAAI,iBAAgB;AAAA,IACjD;AACA,WAAO,iBAAgB;AAAA,EACzB;AAAA,EAEA,eAAe,MAAc,QAAa,KAAgB;AACxD,SAAK,QAAQ,IAAI,MAAM,EAAE,QAAQ,IAAI,CAAC;AAGtC,UAAM,WAAW,KAAK,YAAY;AAClC,IAAC,SAAiB,IAAI,IAAI;AAG1B,QAAI,OAAO,UAAU;AACnB,eAAS,QAAQ,IAAqC,IAAI;AAAA,QACxD,SAAS,OAAO,SAAS;AAAA,QACzB,QAAQ;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,IAAI,cAAc,IAAI,2BAA2B;AAAA,EAC3D;AAAA,EAEA,iBAAiB,MAAoB;AACnC,QAAI,KAAK,QAAQ,IAAI,IAAI,GAAG;AAC1B,WAAK,QAAQ,OAAO,IAAI;AAExB,YAAM,WAAW,KAAK,YAAY;AAClC,aAAQ,SAAiB,IAAI;AAE7B,UAAI,SAAS,QAAQ,IAAqC,GAAG;AAC3D,iBAAS,QAAQ,IAAqC,IAAI;AAAA,UACxD,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAEA,cAAQ,IAAI,gBAAgB,IAAI,2BAA2B;AAAA,IAC7D;AAAA,EACF;AAAA,EAEA,cAAmC;AACjC,QAAI,CAAC,OAAO,SAAS;AACnB,WAAK,eAAe;AAAA,IACtB;AACA,WAAO,OAAO;AAAA,EAChB;AAAA,EAEA,UAAU,MAAmB;AAC3B,WAAO,KAAK,QAAQ,IAAI,IAAI;AAAA,EAC9B;AAAA,EAEA,mBAAmB,MAAuB;AACxC,WAAO,KAAK,QAAQ,IAAI,IAAI;AAAA,EAC9B;AAAA,EAEA,gBAA0B;AACxB,WAAO,MAAM,KAAK,KAAK,QAAQ,KAAK,CAAC;AAAA,EACvC;AAAA,EAEQ,iBAAuB;AAC7B,UAAM,WAAgC;AAAA,MACpC,SAAS;AAAA,MACT,SAAS,CAAC;AAAA,IACZ;AAEA,IAAC,OAAe,UAAU;AAE1B,YAAQ,IAAI,iCAAiC;AAAA,EAC/C;AAAA;AAAA,EAGA,MAAM,cAAc,MAAc,UAAkB,KAAqB;AACvE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,cAAc,MAAM;AACxB,cAAM,SAAS,KAAK,QAAQ,IAAI,IAAI;AACpC,YAAI,QAAQ;AACV,kBAAQ,OAAO,GAAG;AAClB;AAAA,QACF;AAGA,mBAAW,aAAa,GAAG;AAAA,MAC7B;AAGA,iBAAW,MAAM;AACf,eAAO,IAAI,MAAM,UAAU,IAAI,0BAA0B,OAAO,IAAI,CAAC;AAAA,MACvE,GAAG,OAAO;AAEV,kBAAY;AAAA,IACd,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,MAAoB;AACpC,UAAM,WAAW,KAAK,YAAY;AAGlC,QAAI,SAAS,UAAU,OAAO,SAAS,OAAO,SAAS,YAAY;AACjE,eAAS,OAAO,KAAK,gBAAgB,EAAE,KAAK,CAAC;AAAA,IAC/C;AAAA,EACF;AACF;;;AC5FO,IAAM,qBAAN,MAAyB;AAAA;AAAA,EAyB9B,YAAoB,UAA4B;AAA5B;AAxBpB,SAAQ,UAYJ;AAAA,MACF,eAAe;AAAA,MACf,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,eAAe;AAAA,MACf,cAAc,CAAC;AAAA,MACf,cAAc,oBAAI,IAAI;AAAA,IACxB;AAEA,SAAiB,oBAAoB;AAGnC,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEQ,sBAA4B;AAClC,SAAK,SAAS,GAAG,wBAAwB,CAAC,SAAc;AACtD,WAAK,cAAc,KAAK,OAAO,gBAAgB,IAAI;AAAA,IACrD,CAAC;AAED,SAAK,SAAS,GAAG,qBAAqB,CAAC,SAAc;AACnD,WAAK,cAAc,GAAG,KAAK;AAAA,IAC7B,CAAC;AAED,SAAK,SAAS,GAAG,8BAA8B,CAAC,SAAc;AAC5D,WAAK;AAAA,QACH,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AAGD,gBAAY,MAAM;AAChB,WAAK,kBAAkB;AAAA,IACzB,GAAG,GAAK;AAAA,EACV;AAAA,EAEA,cAAc,gBAAwB,SAAwB;AAC5D,SAAK,QAAQ;AAEb,QAAI,SAAS;AACX,WAAK,QAAQ;AACb,WAAK,QAAQ,uBAAuB;AAGpC,WAAK,QAAQ,aAAa,KAAK,cAAc;AAC7C,UAAI,KAAK,QAAQ,aAAa,SAAS,KAAK,mBAAmB;AAC7D,aAAK,QAAQ,aAAa,MAAM;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,iBAAuB;AACrB,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,kBAAwB;AACtB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEQ,uBAAuB,aAAqB,cAAsB,SAAwB;AAChG,QAAI,CAAC,KAAK,QAAQ,aAAa,IAAI,WAAW,GAAG;AAC/C,WAAK,QAAQ,aAAa,IAAI,aAAa;AAAA,QACzC,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,WAAW;AAAA,MACb,CAAC;AAAA,IACH;AAEA,UAAM,QAAQ,KAAK,QAAQ,aAAa,IAAI,WAAW;AACvD,UAAM;AACN,UAAM,aAAa;AAEnB,QAAI,SAAS;AACX,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,oBAAwC;AACtC,UAAM,oBAAoB,KAAK,QAAQ,qBAAqB,IACxD,KAAK,QAAQ,sBAAsB,KAAK,QAAQ,qBAChD;AAEJ,UAAM,cAAc,KAAK,QAAQ,gBAAgB,IAC7C,KAAK,QAAQ,qBAAqB,KAAK,QAAQ,gBAC/C;AAEJ,UAAM,eAAe,KAAK,QAAQ,gBAAgB,IAC9C,KAAK,QAAQ,YAAY,KAAK,QAAQ,gBACtC;AAEJ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,eAAe,KAAK,QAAQ;AAAA,MAC5B;AAAA,MACA,aAAa,KAAK,IAAI;AAAA,IACxB;AAAA,EACF;AAAA,EAEA,qBAAsC;AACpC,UAAM,eAAe,KAAK,kBAAkB;AAG5C,UAAM,mBAAmB;AAAA,MACvB,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,MAAM;AAAA,IACR;AAEA,eAAW,QAAQ,KAAK,QAAQ,cAAc;AAC5C,UAAI,OAAO,KAAM;AACf,yBAAiB;AAAA,MACnB,WAAW,OAAO,KAAM;AACtB,yBAAiB;AAAA,MACnB,OAAO;AACL,yBAAiB;AAAA,MACnB;AAAA,IACF;AAGA,UAAM,iBAAiB,KAAK,QAAQ,aAAa;AAAA,MAC/C,UAAQ,OAAO,KAAK,IAAI,IAAI;AAAA;AAAA,IAC9B;AACA,UAAM,oBAAoB,eAAe,SAAS;AAGlD,UAAM,iBAAsC,CAAC;AAC7C,eAAW,CAAC,MAAM,KAAK,KAAK,KAAK,QAAQ,cAAc;AACrD,qBAAe,IAAI,IAAI;AAAA,QACrB,UAAU,MAAM;AAAA,QAChB,aAAa,MAAM,WAAW,IAAI,MAAM,aAAa,MAAM,WAAW;AAAA,QACtE,iBAAiB,MAAM,WAAW,IAAI,MAAM,YAAY,MAAM,WAAW;AAAA,MAC3E;AAAA,IACF;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH;AAAA,MACA,YAAY,KAAK,QAAQ,gBAAgB,KAAK,QAAQ;AAAA,MACtD;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,oBAA0B;AAChC,UAAM,UAAU,KAAK,kBAAkB;AACvC,SAAK,SAAS,KAAK,+BAA+B,EAAE,QAAQ,CAAC;AAAA,EAC/D;AAAA;AAAA,EAGA,oBAA0B;AACxB,QAAI,OAAQ,YAAoB,WAAW,aAAa;AACtD,YAAM,UAAW,YAAoB;AAAA,IAGvC;AAAA,EACF;AAAA;AAAA,EAGA,QAAc;AACZ,SAAK,UAAU;AAAA,MACb,eAAe;AAAA,MACf,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,eAAe;AAAA,MACf,cAAc,CAAC;AAAA,MACf,cAAc,oBAAI,IAAI;AAAA,IACxB;AAAA,EACF;AAAA,EAEA,UAAgB;AAGd,SAAK,MAAM;AAAA,EACb;AAAA;AAAA,EAGA,gBAAwB;AACtB,UAAM,WAAW,KAAK,mBAAmB;AACzC,WAAO,KAAK,UAAU,UAAU,MAAM,CAAC;AAAA,EACzC;AAAA;AAAA,EAGA,kBAA4D;AAC1D,UAAM,UAAU,KAAK,kBAAkB;AACvC,UAAM,SAAmB,CAAC;AAC1B,UAAM,WAAqB,CAAC;AAG5B,QAAI,QAAQ,oBAAoB,KAAM;AACpC,aAAO,KAAK,iCAAiC,QAAQ,kBAAkB,QAAQ,CAAC,CAAC,IAAI;AAAA,IACvF,WAAW,QAAQ,oBAAoB,KAAM;AAC3C,eAAS,KAAK,6BAA6B,QAAQ,kBAAkB,QAAQ,CAAC,CAAC,IAAI;AAAA,IACrF;AAGA,QAAI,QAAQ,cAAc,KAAK;AAC7B,aAAO,KAAK,sBAAsB,QAAQ,cAAc,KAAK,QAAQ,CAAC,CAAC,GAAG;AAAA,IAC5E,WAAW,QAAQ,cAAc,MAAM;AACrC,eAAS,KAAK,0BAA0B,QAAQ,cAAc,KAAK,QAAQ,CAAC,CAAC,GAAG;AAAA,IAClF;AAEA,WAAO,EAAE,QAAQ,SAAS;AAAA,EAC5B;AACF;;;ACpOO,IAAM,mBAAN,MAAmD;AAAA,EAAnD;AACL,SAAQ,WAAuC,oBAAI,IAAI;AACvD,SAAQ,YAAqB;AAC7B,SAAQ,cAAmC,oBAAI,IAAI;AACnD,SAAQ,0BAAkC;AAC1C,SAAQ,mBAAgC,oBAAI,IAAI;AAAA;AAAA,EAEhD,KAAc,OAAe,MAAe;AAC1C,QAAI,KAAK,WAAW;AAClB,cAAQ,MAAM,gCAAgC,KAAK,IAAI,IAAI;AAAA,IAC7D;AAGA,QAAI,KAAK,iBAAiB,IAAI,KAAK,GAAG;AACpC,UAAI,KAAK,WAAW;AAClB,gBAAQ,KAAK,4BAA4B,KAAK,qCAAqC;AAAA,MACrF;AACA;AAAA,IACF;AAEA,UAAM,gBAAgB,KAAK,SAAS,IAAI,KAAK;AAC7C,QAAI,eAAe;AAEjB,YAAM,gBAAgB,MAAM,KAAK,aAAa;AAE9C,iBAAW,WAAW,eAAe;AACnC,YAAI;AAEF,qBAAW,MAAM;AACf,gBAAI;AACF,sBAAQ,IAAI;AAEZ,mBAAK,gBAAgB,KAAK;AAAA,YAC5B,SAAS,OAAO;AACd,mBAAK,mBAAmB,OAAO,OAAO,OAAO;AAAA,YAC/C;AAAA,UACF,GAAG,CAAC;AAAA,QACN,SAAS,OAAO;AACd,eAAK,mBAAmB,OAAO,OAAO,OAAO;AAAA,QAC/C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,GAAY,OAAe,SAAkC;AAC3D,QAAI,CAAC,KAAK,SAAS,IAAI,KAAK,GAAG;AAC7B,WAAK,SAAS,IAAI,OAAO,oBAAI,IAAI,CAAC;AAAA,IACpC;AACA,SAAK,SAAS,IAAI,KAAK,EAAG,IAAI,OAAO;AAErC,QAAI,KAAK,WAAW;AAClB,cAAQ,MAAM,8CAA8C,KAAK,EAAE;AAAA,IACrE;AAAA,EACF;AAAA,EAEA,IAAI,OAAe,SAAyB;AAC1C,UAAM,gBAAgB,KAAK,SAAS,IAAI,KAAK;AAC7C,QAAI,eAAe;AACjB,oBAAc,OAAO,OAAO;AAG5B,UAAI,cAAc,SAAS,GAAG;AAC5B,aAAK,SAAS,OAAO,KAAK;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,KAAc,OAAe,SAAkC;AAC7D,UAAM,cAAc,CAAC,SAAY;AAC/B,cAAQ,IAAI;AACZ,WAAK,IAAI,OAAO,WAAW;AAAA,IAC7B;AAEA,SAAK,GAAG,OAAO,WAAW;AAAA,EAC5B;AAAA,EAEA,UAAgB;AACd,SAAK,SAAS,MAAM;AAEpB,QAAI,KAAK,WAAW;AAClB,cAAQ,MAAM,4CAA4C;AAAA,IAC5D;AAAA,EACF;AAAA;AAAA,EAGA,aAAa,SAAwB;AACnC,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,iBAAyC;AACvC,UAAM,SAAiC,CAAC;AAExC,eAAW,CAAC,OAAO,QAAQ,KAAK,KAAK,UAAU;AAC7C,aAAO,KAAK,IAAI,SAAS;AAAA,IAC3B;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,eAAyB;AACvB,WAAO,MAAM,KAAK,KAAK,SAAS,KAAK,CAAC;AAAA,EACxC;AAAA,EAEA,aAAa,OAAwB;AACnC,UAAM,WAAW,KAAK,SAAS,IAAI,KAAK;AACxC,WAAO,WAAW,SAAS,OAAO,IAAI;AAAA,EACxC;AAAA,EAEA,iBAAiB,OAAuB;AACtC,UAAM,WAAW,KAAK,SAAS,IAAI,KAAK;AACxC,WAAO,WAAW,SAAS,OAAO;AAAA,EACpC;AAAA,EAEA,mBAAmB,OAAsB;AACvC,QAAI,OAAO;AACT,WAAK,SAAS,OAAO,KAAK;AAAA,IAC5B,OAAO;AACL,WAAK,SAAS,MAAM;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAGQ,mBAAmB,OAAe,OAAY,SAAyB;AAC7E,YAAQ,MAAM,2CAA2C,KAAK,KAAK,KAAK;AAGxE,UAAM,eAAe,KAAK,YAAY,IAAI,KAAK,KAAK;AACpD,UAAM,WAAW,eAAe;AAChC,SAAK,YAAY,IAAI,OAAO,QAAQ;AAGpC,QAAI,YAAY,KAAK,yBAAyB;AAC5C,WAAK,iBAAiB,IAAI,KAAK;AAC/B,cAAQ,KAAK,4BAA4B,KAAK,uCAAuC,QAAQ,UAAU;AAGvG,UAAI,UAAU,gBAAgB;AAC5B,aAAK,KAAK,gBAAgB;AAAA,UACxB,MAAM;AAAA,UACN;AAAA,UACA,YAAY;AAAA,UACZ,WAAW,KAAK,IAAI;AAAA,QACtB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,gBAAgB,OAAqB;AAC3C,QAAI,KAAK,YAAY,IAAI,KAAK,GAAG;AAC/B,WAAK,YAAY,OAAO,KAAK;AAAA,IAC/B;AAAA,EACF;AAAA;AAAA,EAGA,oBAAoB,OAAqB;AACvC,SAAK,iBAAiB,OAAO,KAAK;AAClC,SAAK,YAAY,OAAO,KAAK;AAE7B,QAAI,KAAK,WAAW;AAClB,cAAQ,MAAM,uDAAuD,KAAK,EAAE;AAAA,IAC9E;AAAA,EACF;AAAA,EAEA,0BAAqF;AACnF,UAAM,SAAoE,CAAC;AAE3E,eAAW,CAAC,OAAO,KAAK,KAAK,KAAK,aAAa;AAC7C,aAAO,KAAK,IAAI;AAAA,QACd,YAAY;AAAA,QACZ,UAAU,KAAK,iBAAiB,IAAI,KAAK;AAAA,MAC3C;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,2BAA2B,WAAyB;AAClD,SAAK,0BAA0B,KAAK,IAAI,GAAG,SAAS;AAAA,EACtD;AACF;;;AR3KA,IAAqB,wBAArB,cAAmD,wBAAO;AAAA,EAUxD,MAAM,SAAS;AACb,YAAQ,IAAI,oCAAoC;AAGhD,UAAM,KAAK,aAAa;AAGxB,SAAK,WAAW,IAAI,iBAAiB;AAGrC,SAAK,qBAAqB;AAG1B,SAAK,iBAAiB;AAGtB,UAAM,KAAK,qBAAqB;AAGhC,SAAK,cAAc,IAAI,2BAA2B,KAAK,KAAK,IAAI,CAAC;AAGjE,SAAK,iBAAiB,EAAE,QAAQ,kCAA2B;AAG3D,SAAK,SAAS,GAAG,gBAAgB,OAAO,SAAS;AAC/C,UAAI,KAAK,SAAS,iBAAiB,CAAC,KAAK,eAAe,WAAW,aAAa,GAAG;AACjF,gBAAQ,IAAI,6DAA6D;AACzE,cAAM,KAAK,qBAAqB;AAAA,MAClC;AAAA,IACF,CAAC;AAED,YAAQ,IAAI,6CAA6C;AAAA,EAC3D;AAAA,EAEA,MAAM,WAAW;AACf,YAAQ,IAAI,sCAAsC;AAGlD,SAAK,kBAAkB;AAGvB,SAAK,mBAAmB;AAExB,YAAQ,IAAI,kCAAkC;AAAA,EAChD;AAAA,EAEA,MAAM,eAAe;AACnB,SAAK,WAAW,OAAO,OAAO,CAAC,GAAG,kBAAkB,MAAM,KAAK,SAAS,CAAC;AAAA,EAC3E;AAAA,EAEA,MAAM,eAAe;AACnB,UAAM,KAAK,SAAS,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEQ,uBAAuB;AAE7B,SAAK,qBAAqB,IAAI,mBAAmB,KAAK,QAAQ;AAG9D,SAAK,eAAe,IAAI,aAAa,KAAK,UAAU,KAAK,QAAQ;AAGjE,SAAK,iBAAiB,IAAI,eAAe,KAAK,UAAU,KAAK,QAAQ;AAGrE,SAAK,sBAAsB,IAAI;AAAA,MAC7B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACP;AAGA,SAAK,kBAAkB,IAAI,gBAAgB;AAG3C,SAAK,iBAAiB;AAGtB,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EAEQ,mBAAmB;AAEzB,SAAK,MAAM;AAAA,MACT,SAAS,KAAK,eAAe,KAAK,IAAI;AAAA,MACtC,cAAc,KAAK,aAAa,KAAK,IAAI;AAAA,MACzC,UAAU,KAAK,SAAS,KAAK,IAAI;AAAA,MACjC,iBAAiB,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC/C,SAAS,KAAK,QAAQ,KAAK,IAAI;AAAA,MAC/B,iBAAiB,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC/C,WAAW,KAAK,UAAU,KAAK,IAAI;AAAA,MACnC,uBAAuB,KAAK,sBAAsB,KAAK,IAAI;AAAA,IAC7D;AAGA,SAAK,gBAAgB,eAAe,aAAa,MAAM,KAAK,GAAG;AAG/D,QAAI,CAAC,OAAO,aAAa;AACvB,aAAO,cAAc,CAAC;AAAA,IACxB;AAEA,WAAO,YAAY,kBAAkB,KAAK;AAC1C,YAAQ,IAAI,oEAAoE;AAGhF,SAAK,SAAS,KAAK,kBAAkB;AAAA,MACnC,QAAQ;AAAA,MACR,KAAK,KAAK;AAAA,IACZ,CAAC;AAAA,EACH;AAAA,EAEQ,oBAAoB;AAE1B,QAAI,KAAK,oBAAoB;AAC3B,WAAK,mBAAmB,QAAQ;AAAA,IAClC;AAGA,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe,QAAQ;AAAA,IAC9B;AAGA,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,QAAQ;AAAA,IACxB;AAAA,EACF;AAAA,EAEQ,qBAAqB;AAC3B,QAAI,KAAK,iBAAiB;AACxB,WAAK,gBAAgB,iBAAiB,WAAW;AAAA,IACnD;AAGA,QAAI,OAAO,eAAe,OAAO,YAAY,iBAAiB;AAC5D,aAAO,OAAO,YAAY;AAAA,IAC5B;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB;AAE/B,UAAM,cAAc;AAEpB,QAAI;AAEF,YAAM,eAAe,MAAM,KAAK,IAAI,MAAM,QAAQ,OAAO,WAAW;AACpE,UAAI,CAAC,cAAc;AACjB,cAAM,KAAK,IAAI,MAAM,QAAQ,MAAM,WAAW;AAC9C,gBAAQ,IAAI,uCAAuC;AAGnD,cAAM,KAAK,uBAAuB,WAAW;AAAA,MAC/C;AAGA,YAAM,QAAQ,MAAM,KAAK,IAAI,MAAM,QAAQ,KAAK,WAAW;AAC3D,YAAM,YAAY,MAAM,MAAM,OAAO,UAAQ,KAAK,SAAS,KAAK,CAAC;AAEjE,UAAI,cAAc;AAClB,iBAAW,YAAY,WAAW;AAChC,YAAI;AACF,gBAAM,cAAc,MAAM,KAAK,IAAI,MAAM,QAAQ,KAAK,QAAQ;AAC9D,gBAAM,iBAAiB,KAAK,cAAc,UAAU,WAAW;AAE/D,cAAI,gBAAgB;AAClB,kBAAM,KAAK,aAAa,aAAa,cAAc;AACnD;AACA,oBAAQ,IAAI,0BAA0B,QAAQ,EAAE;AAAA,UAClD;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,4BAA4B,QAAQ,KAAK,KAAK;AAAA,QAC9D;AAAA,MACF;AAEA,cAAQ,IAAI,UAAU,WAAW,gCAAgC;AAAA,IAEnE,SAAS,OAAO;AACd,cAAQ,MAAM,8DAA8D,KAAK;AAEjF,YAAM,KAAK,iBAAiB;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,MAAc,uBAAuB,aAAqB;AACxD,UAAM,eAAe;AAAA,MACnB;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmCX;AAAA,MACA;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsCX;AAAA,MACA;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuCX;AAAA,IACF;AAGA,eAAW,QAAQ,cAAc;AAC/B,YAAM,WAAW,GAAG,WAAW,IAAI,KAAK,QAAQ;AAChD,UAAI;AACF,cAAM,KAAK,IAAI,MAAM,QAAQ,MAAM,UAAU,KAAK,OAAO;AACzD,gBAAQ,IAAI,8BAA8B,KAAK,QAAQ,EAAE;AAAA,MAC3D,SAAS,OAAO;AACd,gBAAQ,MAAM,oBAAoB,KAAK,QAAQ,KAAK,KAAK;AAAA,MAC3D;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,cAAc,UAAkB,SAAwC;AA1WlF;AA2WI,QAAI;AACF,YAAM,QAAQ,QAAQ,MAAM,IAAI;AAChC,YAAM,WAAS,cAAS,MAAM,GAAG,EAAE,IAAI,MAAxB,mBAA2B,QAAQ,OAAO,QAAO;AAEhE,UAAI,WAAW;AACf,UAAI,cAAc;AAClB,YAAM,UAAoB,CAAC;AAC3B,YAAM,YAAsB,CAAC;AAC7B,YAAM,QAAkB,CAAC;AACzB,YAAM,aAAuB,CAAC;AAE9B,UAAI,iBAAiB;AAErB,eAAS,QAAQ,OAAO;AACtB,eAAO,KAAK,KAAK;AAGjB,YAAI,KAAK,WAAW,IAAI,KAAK,CAAC,UAAU;AACtC,qBAAW,KAAK,UAAU,CAAC,EAAE,QAAQ,SAAS,EAAE,EAAE,KAAK;AAAA,QACzD;AAGA,YAAI,KAAK,WAAW,kBAAkB,GAAG;AACvC,wBAAc,KAAK,QAAQ,oBAAoB,EAAE,EAAE,KAAK;AAAA,QAC1D;AAGA,YAAI,KAAK,WAAW,kBAAkB,GAAG;AACvC,2BAAiB;AAAA,QACnB,WAAW,KAAK,WAAW,qBAAqB,GAAG;AACjD,2BAAiB;AAAA,QACnB,WAAW,KAAK,WAAW,gBAAgB,GAAG;AAC5C,2BAAiB;AAAA,QACnB,WAAW,KAAK,WAAW,eAAe,GAAG;AAC3C,2BAAiB;AAAA,QACnB,WAAW,KAAK,WAAW,aAAa,KAAK,KAAK,WAAW,KAAK,GAAG;AACnE,2BAAiB;AAAA,QACnB;AAGA,YAAI,KAAK,WAAW,IAAI,KAAK,gBAAgB;AAC3C,gBAAM,OAAO,KAAK,UAAU,CAAC,EAAE,KAAK;AACpC,kBAAQ,gBAAgB;AAAA,YACtB,KAAK;AACH,sBAAQ,KAAK,IAAI;AACjB;AAAA,YACF,KAAK;AACH,wBAAU,KAAK,IAAI;AACnB;AAAA,YACF,KAAK;AACH,oBAAM,KAAK,IAAI;AACf;AAAA,YACF,KAAK;AACH,yBAAW,KAAK,IAAI;AACpB;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAGA,UAAI,CAAC,YAAY,CAAC,eAAe,QAAQ,WAAW,GAAG;AACrD,gBAAQ,KAAK,qBAAqB,QAAQ,2BAA2B;AACrE,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,QACL,IAAI;AAAA,QACJ,MAAM;AAAA,QACN;AAAA,QACA,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,sBAAsB;AAAA,UACpB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,QACA,UAAU,CAAC;AAAA;AAAA,QACX,aAAa,CAAC;AAAA;AAAA,QACd,UAAU;AAAA,UACR,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,MAAM,CAAC,MAAM;AAAA,UACb,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IAEF,SAAS,OAAO;AACd,cAAQ,MAAM,6BAA6B,QAAQ,KAAK,KAAK;AAC7D,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,MAAc,mBAAmB;AAE/B,UAAM,eAA+B;AAAA,MACnC,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,sBAAsB;AAAA,QACpB,SAAS,CAAC,iCAAiC;AAAA,QAC3C,WAAW,CAAC,iCAAmC;AAAA,QAC/C,OAAO,CAAC,iCAAiC;AAAA,QACzC,YAAY,CAAC,gCAAgC;AAAA,MAC/C;AAAA,MACA,UAAU,CAAC;AAAA,MACX,aAAa,CAAC;AAAA,MACd,UAAU;AAAA,QACR,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,MAAM,CAAC,SAAS;AAAA,QAChB,SAAS;AAAA,MACX;AAAA,IACF;AAEA,UAAM,KAAK,aAAa,aAAa,YAAY;AACjD,YAAQ,IAAI,kCAAkC;AAAA,EAChD;AAAA,EAEA,MAAc,uBAAuB;AApevC;AAseI,SAAI,YAAO,gBAAP,mBAAoB,YAAY;AAClC,UAAI;AACF,cAAM,EAAE,mBAAAC,mBAAkB,IAAI,MAAM;AACpC,cAAM,oBAAoB,IAAIA,mBAAkB;AAChD,cAAM,KAAK,eAAe,gBAAgB,iBAAiB;AAC3D,gBAAQ,IAAI,6CAA6C;AAAA,MAC3D,SAAS,OAAO;AACd,gBAAQ,MAAM,2CAA2C,KAAK;AAAA,MAChE;AAAA,IACF,OAAO;AACL,cAAQ,IAAI,gEAAgE;AAAA,IAC9E;AAEA,YAAQ,IAAI,yCAAyC;AAAA,EACvD;AAAA;AAAA,EAGA,MAAa,eAAe,QAA2C;AACrE,QAAI;AACF,WAAK,SAAS,KAAK,sBAAsB,EAAE,UAAU,OAAO,GAAG,CAAC;AAEhE,YAAM,SAAS,MAAM,KAAK,oBAAoB,QAAQ,MAAM;AAE5D,WAAK,SAAS,KAAK,wBAAwB;AAAA,QACzC,UAAU,OAAO;AAAA,QACjB;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT,SAAS,OAAO;AACd,WAAK,SAAS,KAAK,qBAAqB;AAAA,QACtC,UAAU,OAAO;AAAA,QACjB,OAAO,MAAM;AAAA,MACf,CAAC;AAED,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAa,aAAa,MAAqC;AAC7D,WAAO,MAAM,KAAK,aAAa,aAAa,IAAI;AAAA,EAClD;AAAA,EAEO,WAA6B;AAClC,WAAO,KAAK,aAAa,YAAY;AAAA,EACvC;AAAA,EAEO,kBAAoC;AACzC,UAAM,WAAW,KAAK,aAAa,YAAY;AAC/C,WAAO,SAAS,OAAO,UAAQ,KAAK,SAAS,aAAa,SAAS,KAAK,EAAE,CAAC;AAAA,EAC7E;AAAA,EAEO,QAAQ,IAAwC;AACrD,WAAO,KAAK,aAAa,QAAQ,EAAE;AAAA,EACrC;AAAA,EAEO,gBAAgB,SAAoB;AACzC,SAAK,eAAe,gBAAgB,OAAO;AAAA,EAC7C;AAAA,EAEO,YAAiB;AACtB,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,YAAY,KAAK,aAAa,YAAY,EAAE;AAAA,MAC5C,eAAe,KAAK,eAAe,gBAAgB;AAAA,MACnD,UAAU;AAAA,QACR,aAAa,KAAK,SAAS;AAAA,QAC3B,YAAY,KAAK,SAAS,qBAAqB;AAAA,MACjD;AAAA,MACA,aAAa,KAAK,mBAAmB,kBAAkB;AAAA,IACzD;AAAA,EACF;AAAA,EAEO,wBAA6B;AAClC,WAAO,KAAK,mBAAmB,mBAAmB;AAAA,EACpD;AAAA;AAAA,EAGO,UAAU,OAAmC;AAClD,SAAK,SAAS,KAAK,MAAM,MAAM,MAAM,IAAI;AAAA,EAC3C;AACF;",
  "names": ["import_obsidian", "TrackEditsAdapter"]
}
