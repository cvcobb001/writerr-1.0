{
  "version": 3,
  "sources": ["src/main.ts", "src/settings.ts", "../../shared/utils/index.ts", "src/chat-view.ts", "src/ai-provider-manager.ts"],
  "sourcesContent": ["import { Plugin, WorkspaceLeaf, TFile, Notice, Modal } from 'obsidian';\nimport { WriterrlChatSettingsTab } from './settings';\nimport { ChatView, VIEW_TYPE_CHAT } from './chat-view';\nimport { ChatSession, ChatMessage, AIProvider, WriterrlGlobalAPI, IntakePayload } from '@shared/types';\nimport { generateId } from '@shared/utils';\nimport { AIProviderManager } from './ai-provider-manager';\n\n// Enhanced types for Editorial Engine integration\ninterface ParsedMessage {\n  originalContent: string;\n  intent: 'chat' | 'edit' | 'improve' | 'analyze';\n  mode: string;\n  selection?: string;\n  hasEditingRequest: boolean;\n}\n\ninterface WriterrlChatSettings {\n  defaultProvider: string;\n  providers: AIProvider[];\n  chatPosition: 'right' | 'left' | 'floating';\n  autoSaveChats: boolean;\n  contextLines: number;\n  maxTokens: number;\n  temperature: number;\n  enableMarkdown: boolean;\n  showTimestamps: boolean;\n  theme: 'default' | 'compact' | 'minimal';\n}\n\nconst DEFAULT_SETTINGS: WriterrlChatSettings = {\n  defaultProvider: 'openai',\n  providers: [\n    {\n      id: 'openai',\n      name: 'OpenAI',\n      model: 'gpt-4',\n      baseUrl: 'https://api.openai.com/v1',\n      apiKey: ''\n    }\n  ],\n  chatPosition: 'right',\n  autoSaveChats: true,\n  contextLines: 10,\n  maxTokens: 2000,\n  temperature: 0.7,\n  enableMarkdown: true,\n  showTimestamps: true,\n  theme: 'default'\n};\n\nexport default class WriterrlChatPlugin extends Plugin {\n  settings: WriterrlChatSettings;\n  aiProviderManager: AIProviderManager;\n  currentSession: ChatSession | null = null;\n  chatSessions: Map<string, ChatSession> = new Map();\n\n  async onload() {\n    await this.loadSettings();\n\n    this.aiProviderManager = new AIProviderManager(this.settings);\n\n    // Initialize global API\n    this.initializeGlobalAPI();\n\n    // Register view\n    this.registerView(VIEW_TYPE_CHAT, (leaf) => new ChatView(leaf, this));\n\n    // Add commands\n    this.addCommands();\n\n    // Add ribbon icon\n    this.addRibbonIcon('message-circle', 'Open Writerr Chat', () => {\n      this.openChat();\n    });\n\n    // Add settings tab\n    this.addSettingTab(new WriterrlChatSettingsTab(this.app, this));\n\n    // Load chat sessions\n    await this.loadChatSessions();\n\n    // Listen for Editorial Engine availability\n    this.listenForEditorialEngine();\n\n    console.log('Writerr Chat plugin loaded');\n  }\n\n  onunload() {\n    this.cleanupGlobalAPI();\n    console.log('Writerr Chat plugin unloaded');\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n    if (this.aiProviderManager) {\n      this.aiProviderManager.updateSettings(this.settings);\n    }\n  }\n\n  private initializeGlobalAPI() {\n    if (!window.WriterrlAPI) {\n      window.WriterrlAPI = {} as WriterrlGlobalAPI;\n    }\n\n    window.WriterrlAPI.chat = {\n      openChat: () => this.openChat(),\n      sendMessage: (message: string, context?: string) => this.sendMessage(message, context),\n      getCurrentSession: () => this.currentSession\n    };\n  }\n\n  private cleanupGlobalAPI() {\n    if (window.WriterrlAPI && window.WriterrlAPI.chat) {\n      delete window.WriterrlAPI.chat;\n    }\n  }\n\n  private addCommands() {\n    this.addCommand({\n      id: 'open-chat',\n      name: 'Open chat',\n      callback: () => this.openChat()\n    });\n\n    this.addCommand({\n      id: 'new-chat-session',\n      name: 'New chat session',\n      callback: () => this.newChatSession()\n    });\n\n    this.addCommand({\n      id: 'chat-with-selection',\n      name: 'Chat with selected text',\n      editorCallback: (editor) => {\n        const selection = editor.getSelection();\n        if (selection) {\n          this.chatWithSelection(selection);\n        } else {\n          new Notice('No text selected');\n        }\n      }\n    });\n\n    this.addCommand({\n      id: 'quick-chat',\n      name: 'Quick chat',\n      callback: () => this.quickChat()\n    });\n  }\n\n  async openChat() {\n    const existingLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)[0];\n    \n    if (existingLeaf) {\n      this.app.workspace.revealLeaf(existingLeaf);\n      return;\n    }\n\n    try {\n      // Open in right sidebar as per design reference\n      const leaf = this.app.workspace.getRightLeaf(false);\n      \n      if (leaf) {\n        await leaf.setViewState({\n          type: VIEW_TYPE_CHAT,\n          active: true\n        });\n        this.app.workspace.revealLeaf(leaf);\n        return;\n      }\n\n      // Fallback: Create new leaf in right sidebar\n      const rightLeaf = this.app.workspace.getLeaf('split', 'right');\n      if (rightLeaf) {\n        await rightLeaf.setViewState({\n          type: VIEW_TYPE_CHAT,\n          active: true\n        });\n        this.app.workspace.revealLeaf(rightLeaf);\n        return;\n      }\n\n      console.error('Failed to create chat view in sidebar');\n\n    } catch (error) {\n      console.error('Error opening chat view:', error);\n    }\n  }\n\n  newChatSession() {\n    this.currentSession = {\n      id: generateId(),\n      title: `Chat ${new Date().toLocaleDateString()}`,\n      messages: [],\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    };\n\n    this.chatSessions.set(this.currentSession.id, this.currentSession);\n    this.saveChatSessions();\n  }\n\n  async chatWithSelection(selectedText: string) {\n    await this.openChat();\n    \n    if (!this.currentSession) {\n      this.newChatSession();\n    }\n\n    const contextMessage = `Here's the selected text I'd like to discuss:\\n\\n${selectedText}\\n\\nWhat would you like to know about this text?`;\n    await this.sendMessage(contextMessage);\n  }\n\n  async quickChat() {\n    const modal = new QuickChatModal(this.app, async (message: string) => {\n      if (!this.currentSession) {\n        this.newChatSession();\n      }\n      await this.sendMessage(message);\n    });\n    modal.open();\n  }\n\n  async sendMessage(content: string, selectedMode?: string, context?: string): Promise<void> {\n    if (!this.currentSession) {\n      this.newChatSession();\n    }\n\n    if (!this.currentSession) return;\n\n    // Parse message for intent and mode selection\n    const parsedMessage = this.parseMessageIntent(content);\n    \n    // Override mode if explicitly provided from UI\n    if (selectedMode && selectedMode !== 'chat') {\n      parsedMessage.mode = selectedMode;\n    }\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: Date.now(),\n      metadata: {\n        intent: parsedMessage.intent,\n        requestedMode: parsedMessage.mode,\n        selectedMode: selectedMode,\n        hasSelection: !!parsedMessage.selection\n      }\n    };\n\n    this.currentSession.messages.push(userMessage);\n\n    // Get context from current file if requested\n    let fullContext = context;\n    if (!fullContext && this.settings.contextLines > 0) {\n      fullContext = await this.getDocumentContext();\n    }\n\n    try {\n      // Route based on selected mode from UI\n      if (selectedMode && selectedMode !== 'chat') {\n        // Use Editorial Engine for specific modes\n        await this.processWithEditorialEngine(parsedMessage, fullContext);\n      } else if (parsedMessage.intent === 'edit' || parsedMessage.intent === 'improve') {\n        // Fallback: Use Editorial Engine for detected editing intent\n        await this.processWithEditorialEngine(parsedMessage, fullContext);\n      } else {\n        // Standard chat processing (Chat mode or general conversation)\n        await this.processWithAIProvider(parsedMessage, fullContext);\n      }\n\n      this.currentSession.updatedAt = Date.now();\n\n      if (this.settings.autoSaveChats) {\n        await this.saveChatSessions();\n      }\n\n      // Refresh chat view if open\n      this.refreshChatView();\n\n      // Emit chat event\n      if (window.Writerr?.events) {\n        window.Writerr.events.emit('chat.response-ready', {\n          requestId: userMessage.id,\n          response: this.currentSession.messages[this.currentSession.messages.length - 1]\n        });\n      }\n\n    } catch (error) {\n      new Notice(`Error sending message: ${error.message}`);\n      console.error('Chat error:', error);\n      \n      // Add error message to chat\n      const errorMessage: ChatMessage = {\n        id: generateId(),\n        role: 'assistant',\n        content: `I encountered an error: ${error.message}. Please try again.`,\n        timestamp: Date.now(),\n        metadata: {\n          error: true,\n          errorMessage: error.message\n        }\n      };\n      \n      this.currentSession.messages.push(errorMessage);\n      this.refreshChatView();\n    }\n  }    // Get context from current file if requested\\n    let fullContext = context;\\n    if (!fullContext && this.settings.contextLines > 0) {\\n      fullContext = await this.getDocumentContext();\\n    }\\n\\n    try {\\n      // Check if this should be processed through Editorial Engine\\n      if (parsedMessage.intent === 'edit' || parsedMessage.intent === 'improve') {\\n        await this.processWithEditorialEngine(parsedMessage, fullContext);\\n      } else {\\n        // Standard chat processing\\n        await this.processWithAIProvider(parsedMessage, fullContext);\\n      }\\n\\n      this.currentSession.updatedAt = Date.now();\\n\\n      if (this.settings.autoSaveChats) {\\n        await this.saveChatSessions();\\n      }\\n\\n      // Refresh chat view if open\\n      this.refreshChatView();\\n\\n      // Emit chat event\\n      if (window.Writerr?.events) {\\n        window.Writerr.events.emit('chat.response-ready', {\\n          requestId: userMessage.id,\\n          response: this.currentSession.messages[this.currentSession.messages.length - 1]\\n        });\\n      }\\n\\n    } catch (error) {\\n      new Notice(`Error sending message: ${error.message}`);\\n      console.error('Chat error:', error);\\n      \\n      // Add error message to chat\\n      const errorMessage: ChatMessage = {\\n        id: generateId(),\\n        role: 'assistant',\\n        content: `I encountered an error: ${error.message}. Please try again.`,\\n        timestamp: Date.now(),\\n        metadata: {\\n          error: true,\\n          errorMessage: error.message\\n        }\\n      };\\n      \\n      this.currentSession.messages.push(errorMessage);\\n      this.refreshChatView();\\n    }\\n  }\n\n  private parseMessageIntent(content: string): ParsedMessage {\n    const lowerContent = content.toLowerCase();\n    \n    // Extract potential text selection (common patterns)\n    const selectionMatch = content.match(/[\"']([^\"']+)[\"']|`([^`]+)`/);\n    const selection = selectionMatch?.[1] || selectionMatch?.[2];\n    \n    // Extract mode requests\n    const modeMatch = content.match(/(?:use|with|in)\\s+(proofreader|copy-editor|developmental-editor|creative-writing-assistant)\\s+mode/i);\n    const requestedMode = modeMatch?.[1];\n    \n    // Determine intent based on keywords\n    let intent: 'chat' | 'edit' | 'improve' | 'analyze' = 'chat';\n    \n    if (lowerContent.includes('edit') || lowerContent.includes('fix') || lowerContent.includes('correct')) {\n      intent = 'edit';\n    } else if (lowerContent.includes('improve') || lowerContent.includes('enhance') || lowerContent.includes('rewrite')) {\n      intent = 'improve';\n    } else if (lowerContent.includes('analyze') || lowerContent.includes('review') || lowerContent.includes('check')) {\n      intent = 'analyze';\n    }\n    \n    return {\n      originalContent: content,\n      intent,\n      mode: requestedMode || this.settings.defaultMode || 'proofreader',\n      selection,\n      hasEditingRequest: intent !== 'chat'\n    };\n  }\n\n  private async processWithEditorialEngine(parsedMessage: ParsedMessage, context?: string): Promise<void> {\n    // Check if Editorial Engine is available\n    if (!window.Writerr?.editorial) {\n      throw new Error('Editorial Engine is not available. Please ensure the Editorial Engine plugin is loaded.');\n    }\n\n    // Emit processing event\n    if (window.Writerr.events) {\n      window.Writerr.events.emit('chat.request-processing', {\n        requestId: this.currentSession!.messages[this.currentSession!.messages.length - 1].id,\n        message: this.currentSession!.messages[this.currentSession!.messages.length - 1],\n        mode: parsedMessage.mode\n      });\n    }\n\n    try {\n      // Prepare Editorial Engine payload\n      const payload: IntakePayload = {\n        id: generateId(),\n        text: parsedMessage.selection || context || parsedMessage.originalContent,\n        originalText: parsedMessage.selection || context,\n        mode: parsedMessage.mode,\n        constraints: await this.getConstraintsForMode(parsedMessage.mode),\n        metadata: {\n          source: 'writerr-chat',\n          intent: parsedMessage.intent,\n          timestamp: Date.now(),\n          sessionId: this.currentSession!.id\n        }\n      };\n\n      // Process through Editorial Engine\n      const result = await window.Writerr.editorial.process(payload);\n\n      if (result.success) {\n        // Create assistant response with Editorial Engine results\n        const assistantMessage: ChatMessage = {\n          id: generateId(),\n          role: 'assistant',\n          content: this.formatEditorialEngineResponse(result, parsedMessage),\n          timestamp: Date.now(),\n          metadata: {\n            editorialEngineResult: true,\n            jobId: result.jobId,\n            mode: parsedMessage.mode,\n            processingTime: result.processingTime\n          }\n        };\n\n        this.currentSession!.messages.push(assistantMessage);\n      } else {\n        throw new Error(`Editorial Engine processing failed: ${result.errors?.map(e => e.message).join(', ')}`);\n      }\n    } catch (error) {\n      console.error('Editorial Engine processing error:', error);\n      throw error;\n    }\n  }\n\n  private async processWithAIProvider(parsedMessage: ParsedMessage, context?: string): Promise<void> {\n    // Standard AI provider processing for general chat\n    const response = await this.aiProviderManager.sendMessage(\n      this.currentSession!.messages,\n      context\n    );\n\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: response,\n      timestamp: Date.now(),\n      metadata: {\n        provider: this.settings.provider,\n        model: this.settings.model\n      }\n    };\n\n    this.currentSession!.messages.push(assistantMessage);\n  }\n\n  private formatEditorialEngineResponse(result: any, parsedMessage: ParsedMessage): string {\n    let response = '';\n\n    // Add mode indicator\n    response += `**${parsedMessage.mode.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())} Analysis:**\\n\\n`;\n\n    if (result.result?.processedText) {\n      response += '**Processed Text:**\\n';\n      response += `> ${result.result.processedText}\\n\\n`;\n    }\n\n    if (result.result?.changes && result.result.changes.length > 0) {\n      response += '**Changes Made:**\\n';\n      for (const change of result.result.changes.slice(0, 5)) { // Limit to first 5 changes\n        response += `- **${change.type}** at position ${change.from}-${change.to}: \"${change.text || change.removedText}\"\\n`;\n      }\n      \n      if (result.result.changes.length > 5) {\n        response += `- *... and ${result.result.changes.length - 5} more changes*\\n`;\n      }\n      response += '\\n';\n    }\n\n    if (result.metadata?.trackEditsSession) {\n      response += `*Changes have been applied to your document and are being tracked in session ${result.metadata.trackEditsSession}.*\\n\\n`;\n      response += '*You can accept or reject individual changes using the Track Edits side panel.*';\n    }\n\n    return response;\n  }\n\n  private async getConstraintsForMode(mode: string): Promise<any> {\n    // Get mode constraints from Editorial Engine\n    if (window.Writerr?.editorial) {\n      const modeDefinition = window.Writerr.editorial.getMode(mode);\n      return modeDefinition?.constraints || [];\n    }\n    return [];\n  }\n\n  private async getDocumentContext(): Promise<string | undefined> {\n    const activeFile = this.app.workspace.getActiveFile();\n    if (!activeFile) return undefined;\n\n    try {\n      const content = await this.app.vault.read(activeFile);\n      const lines = content.split('\\n');\n      \n      if (lines.length <= this.settings.contextLines * 2) {\n        return content;\n      }\n\n      // Get lines around cursor or selection\n      const editor = this.app.workspace.getActiveViewOfType(require('obsidian').MarkdownView)?.editor;\n      if (editor) {\n        const cursor = editor.getCursor();\n        const start = Math.max(0, cursor.line - this.settings.contextLines);\n        const end = Math.min(lines.length, cursor.line + this.settings.contextLines);\n        return lines.slice(start, end).join('\\n');\n      }\n\n      return lines.slice(0, this.settings.contextLines).join('\\n');\n    } catch (error) {\n      console.error('Error getting document context:', error);\n      return undefined;\n    }\n  }\n\n  private refreshChatView() {\n    const chatLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)[0];\n    if (chatLeaf && chatLeaf.view instanceof ChatView) {\n      chatLeaf.view.refresh();\n    }\n  }\n\n  private listenForEditorialEngine() {\n    // Check for Editorial Engine availability on startup\n    setTimeout(() => {\n      if (window.Writerr?.editorial) {\n        this.refreshChatModes();\n      }\n    }, 1000);\n\n    // Listen for Editorial Engine platform-ready event\n    if (window.Writerr?.events) {\n      window.Writerr.events.on('platform-ready', (data: any) => {\n        if (data.plugin === 'editorial-engine') {\n          console.log('Editorial Engine detected, refreshing chat modes...');\n          this.refreshChatModes();\n        }\n      });\n\n      window.Writerr.events.on('mode-registered', () => {\n        this.refreshChatModes();\n      });\n\n      window.Writerr.events.on('mode-updated', () => {\n        this.refreshChatModes();\n      });\n\n      window.Writerr.events.on('mode-removed', () => {\n        this.refreshChatModes();\n      });\n    }\n\n    // Fallback: periodic check for Editorial Engine\n    const checkInterval = setInterval(() => {\n      if (window.Writerr?.editorial) {\n        this.refreshChatModes();\n        clearInterval(checkInterval);\n      }\n    }, 3000);\n\n    // Clear interval after 30 seconds to avoid indefinite checking\n    setTimeout(() => {\n      clearInterval(checkInterval);\n    }, 30000);\n  }\n\n  private refreshChatModes() {\n    // Find and refresh chat view modes\n    const chatLeaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT);\n    for (const leaf of chatLeaves) {\n      if (leaf.view instanceof ChatView) {\n        leaf.view.refreshModeOptions();\n      }\n    }\n  }\n\n  async loadChatSessions() {\n    try {\n      const data = await this.loadData();\n      if (data && data.chatSessions) {\n        for (const session of data.chatSessions) {\n          this.chatSessions.set(session.id, session);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load chat sessions:', error);\n    }\n  }\n\n  async saveChatSessions() {\n    try {\n      const sessionsArray = Array.from(this.chatSessions.values());\n      const currentData = await this.loadData() || {};\n      currentData.chatSessions = sessionsArray;\n      await this.saveData(currentData);\n    } catch (error) {\n      console.error('Failed to save chat sessions:', error);\n    }\n  }\n\n  getChatSessions(): ChatSession[] {\n    return Array.from(this.chatSessions.values()).sort((a, b) => b.updatedAt - a.updatedAt);\n  }\n\n  deleteSession(sessionId: string) {\n    this.chatSessions.delete(sessionId);\n    if (this.currentSession && this.currentSession.id === sessionId) {\n      this.currentSession = null;\n    }\n    this.saveChatSessions();\n  }\n\n  setCurrentSession(sessionId: string) {\n    const session = this.chatSessions.get(sessionId);\n    if (session) {\n      this.currentSession = session;\n    }\n  }\n}\n\nclass QuickChatModal extends Modal {\n  private onSubmit: (message: string) => Promise<void>;\n  private inputEl: HTMLTextAreaElement;\n\n  constructor(app: any, onSubmit: (message: string) => Promise<void>) {\n    super(app);\n    this.onSubmit = onSubmit;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.empty();\n\n    contentEl.createEl('h2', { text: 'Quick Chat' });\n\n    this.inputEl = contentEl.createEl('textarea', {\n      attr: {\n        placeholder: 'Type your message here...',\n        rows: '4',\n        style: 'width: 100%; margin: 10px 0; padding: 8px; border: 1px solid var(--background-modifier-border); border-radius: 4px;'\n      }\n    });\n\n    const buttonContainer = contentEl.createEl('div', {\n      attr: { style: 'display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px;' }\n    });\n\n    buttonContainer.createEl('button', {\n      text: 'Cancel',\n      attr: { style: 'padding: 6px 12px;' }\n    }).onclick = () => this.close();\n\n    const sendButton = buttonContainer.createEl('button', {\n      text: 'Send',\n      attr: { style: 'padding: 6px 12px; background: var(--interactive-accent); color: var(--text-on-accent); border: none; border-radius: 4px;' }\n    });\n    \n    sendButton.onclick = async () => {\n      const message = this.inputEl.value.trim();\n      if (message) {\n        await this.onSubmit(message);\n        this.close();\n      }\n    };\n\n    this.inputEl.focus();\n  }\n\n  onClose() {\n    const { contentEl } = this;\n    contentEl.empty();\n  }\n}", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport WriterrlChatPlugin from './main';\nimport { AIProvider } from '@shared/types';\nimport { generateId } from '@shared/utils';\n\nexport class WriterrlChatSettingsTab extends PluginSettingTab {\n  plugin: WriterrlChatPlugin;\n\n  constructor(app: App, plugin: WriterrlChatPlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display(): void {\n    const { containerEl } = this;\n    containerEl.empty();\n\n    containerEl.createEl('h2', { text: 'Writerr Chat Settings' });\n\n    // AI Provider Settings\n    containerEl.createEl('h3', { text: 'AI Provider Configuration' });\n\n    new Setting(containerEl)\n      .setName('Default provider')\n      .setDesc('Select the default AI provider for chat')\n      .addDropdown(dropdown => {\n        for (const provider of this.plugin.settings.providers) {\n          dropdown.addOption(provider.id, provider.name);\n        }\n        dropdown.setValue(this.plugin.settings.defaultProvider)\n          .onChange(async (value) => {\n            this.plugin.settings.defaultProvider = value;\n            await this.plugin.saveSettings();\n          });\n      });\n\n    // Provider management\n    for (let i = 0; i < this.plugin.settings.providers.length; i++) {\n      const provider = this.plugin.settings.providers[i];\n      this.createProviderSetting(containerEl, provider, i);\n    }\n\n    new Setting(containerEl)\n      .setName('Add new provider')\n      .setDesc('Add a new AI provider')\n      .addButton(button => button\n        .setButtonText('Add Provider')\n        .setCta()\n        .onClick(() => {\n          this.plugin.settings.providers.push({\n            id: generateId(),\n            name: 'New Provider',\n            model: 'gpt-3.5-turbo',\n            baseUrl: '',\n            apiKey: ''\n          });\n          this.display(); // Refresh settings\n        }));\n\n    // Chat Interface Settings\n    containerEl.createEl('h3', { text: 'Chat Interface' });\n\n    new Setting(containerEl)\n      .setName('Chat position')\n      .setDesc('Choose where the chat panel appears')\n      .addDropdown(dropdown => dropdown\n        .addOption('right', 'Right sidebar')\n        .addOption('left', 'Left sidebar')\n        .addOption('floating', 'Floating window')\n        .setValue(this.plugin.settings.chatPosition)\n        .onChange(async (value: 'right' | 'left' | 'floating') => {\n          this.plugin.settings.chatPosition = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Theme')\n      .setDesc('Choose the chat interface theme')\n      .addDropdown(dropdown => dropdown\n        .addOption('default', 'Default')\n        .addOption('compact', 'Compact')\n        .addOption('minimal', 'Minimal')\n        .setValue(this.plugin.settings.theme)\n        .onChange(async (value: 'default' | 'compact' | 'minimal') => {\n          this.plugin.settings.theme = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Show timestamps')\n      .setDesc('Display timestamps for chat messages')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showTimestamps)\n        .onChange(async (value) => {\n          this.plugin.settings.showTimestamps = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Enable markdown')\n      .setDesc('Render markdown in chat messages')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.enableMarkdown)\n        .onChange(async (value) => {\n          this.plugin.settings.enableMarkdown = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Behavior Settings\n    containerEl.createEl('h3', { text: 'Behavior' });\n\n    new Setting(containerEl)\n      .setName('Auto-save chats')\n      .setDesc('Automatically save chat sessions')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.autoSaveChats)\n        .onChange(async (value) => {\n          this.plugin.settings.autoSaveChats = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Context lines')\n      .setDesc('Number of lines to include as context from the current document')\n      .addSlider(slider => slider\n        .setLimits(0, 50, 1)\n        .setValue(this.plugin.settings.contextLines)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.contextLines = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Max tokens')\n      .setDesc('Maximum number of tokens for AI responses')\n      .addSlider(slider => slider\n        .setLimits(100, 4000, 100)\n        .setValue(this.plugin.settings.maxTokens)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.maxTokens = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Temperature')\n      .setDesc('Creativity level for AI responses (0 = focused, 1 = creative)')\n      .addSlider(slider => slider\n        .setLimits(0, 1, 0.1)\n        .setValue(this.plugin.settings.temperature)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.temperature = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Actions\n    containerEl.createEl('h3', { text: 'Actions' });\n\n    new Setting(containerEl)\n      .setName('Clear all chat history')\n      .setDesc('Delete all saved chat sessions (cannot be undone)')\n      .addButton(button => button\n        .setButtonText('Clear All')\n        .setWarning()\n        .onClick(() => {\n          this.plugin.chatSessions.clear();\n          this.plugin.currentSession = null;\n          this.plugin.saveChatSessions();\n        }));\n  }\n\n  private createProviderSetting(containerEl: HTMLElement, provider: AIProvider, index: number) {\n    const providerContainer = containerEl.createDiv('provider-setting');\n    providerContainer.createEl('h4', { text: provider.name });\n\n    new Setting(providerContainer)\n      .setName('Provider name')\n      .addText(text => text\n        .setValue(provider.name)\n        .onChange(async (value) => {\n          provider.name = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(providerContainer)\n      .setName('Model')\n      .addText(text => text\n        .setValue(provider.model)\n        .onChange(async (value) => {\n          provider.model = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(providerContainer)\n      .setName('Base URL')\n      .addText(text => text\n        .setValue(provider.baseUrl || '')\n        .onChange(async (value) => {\n          provider.baseUrl = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(providerContainer)\n      .setName('API Key')\n      .addText(text => {\n        text.inputEl.type = 'password';\n        text.setValue(provider.apiKey || '')\n          .onChange(async (value) => {\n            provider.apiKey = value;\n            await this.plugin.saveSettings();\n          });\n      });\n\n    new Setting(providerContainer)\n      .addButton(button => button\n        .setButtonText('Remove')\n        .setWarning()\n        .onClick(async () => {\n          this.plugin.settings.providers.splice(index, 1);\n          await this.plugin.saveSettings();\n          this.display(); // Refresh settings\n        }));\n  }\n}", "// Shared utilities for all Writerr Obsidian plugins\n\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\nexport function formatTimestamp(timestamp: number): string {\n  return new Date(timestamp).toLocaleString();\n}\n\nexport function getWordCount(text: string): number {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n}\n\nexport function getCharacterCount(text: string): number {\n  return text.length;\n}\n\nexport function sanitizeFilename(filename: string): string {\n  return filename.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n}\n\nexport function exportToJSON(data: any): string {\n  return JSON.stringify(data, null, 2);\n}\n\nexport function parseMarkdown(content: string): { frontmatter: Record<string, any>; body: string } {\n  const frontmatterRegex = /^---\\s*\\n(.*?)\\n---\\s*\\n(.*)$/s;\n  const match = content.match(frontmatterRegex);\n  \n  if (match) {\n    try {\n      const frontmatter = JSON.parse(match[1]);\n      return { frontmatter, body: match[2] };\n    } catch {\n      // If JSON parsing fails, treat as YAML or plain text\n      return { frontmatter: {}, body: content };\n    }\n  }\n  \n  return { frontmatter: {}, body: content };\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}", "import { ItemView, WorkspaceLeaf, MarkdownRenderer, Component } from 'obsidian';\nimport { ChatMessage, ChatSession } from '@shared/types';\nimport WriterrlChatPlugin from './main';\n\nexport const VIEW_TYPE_CHAT = 'writerr-chat-view';\n\nexport class ChatView extends ItemView {\n  plugin: WriterrlChatPlugin;\n  private chatContainer: HTMLElement;\n  private inputContainer: HTMLElement;\n  private messageInput: HTMLTextAreaElement;\n  private sendButton: HTMLButtonElement;\n  private sessionSelect: HTMLSelectElement;\n  private modeSelect: HTMLSelectElement;\n  private statusIndicator: HTMLElement;\n\n  constructor(leaf: WorkspaceLeaf, plugin: WriterrlChatPlugin) {\n    super(leaf);\n    this.plugin = plugin;\n  }\n\n  getViewType(): string {\n    return VIEW_TYPE_CHAT;\n  }\n\n  getDisplayText(): string {\n    return 'Writerr Chat';\n  }\n\n  getIcon(): string {\n    return 'message-circle';\n  }\n\n  async onOpen() {\n    const container = this.containerEl.children[1];\n    container.empty();\n    container.addClass('writerr-chat-view');\n    container.style.cssText = `\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      background: var(--background-primary);\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 8px;\n      overflow: hidden;\n    `;\n\n    // Create header\n    const header = container.createEl('div', { cls: 'chat-header' });\n    this.createHeader(header);\n\n    // Create chat messages container with proper scrolling\n    this.chatContainer = container.createEl('div', { cls: 'chat-messages' });\n    this.chatContainer.style.cssText = `\n      flex: 1;\n      overflow-y: auto;\n      padding: 16px;\n      min-height: 0;\n    `;\n\n    // Create document context area\n    const contextArea = container.createEl('div', { cls: 'chat-context-area' });\n    this.createContextArea(contextArea);\n\n    // Create input container\n    this.inputContainer = container.createEl('div', { cls: 'chat-input-container' });\n    this.createInputArea(this.inputContainer);\n\n    // Apply theme\n    this.applyTheme();\n\n    // Load current session or create new one\n    if (!this.plugin.currentSession) {\n      this.plugin.newChatSession();\n    }\n\n    this.refresh();\n\n    // Refresh modes after view is fully loaded (in case Editorial Engine loaded after chat view)\n    setTimeout(() => {\n      console.log('Delayed mode refresh after chat view opened');\n      this.populateModeOptions();\n    }, 1000);\n\n    // Also refresh when status changes\n    setTimeout(() => {\n      this.updateStatusIndicator();\n    }, 1500);\n  }\n\n  private createHeader(header: HTMLElement) {\n    header.style.cssText = `\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 16px;\n      border-bottom: 1px solid var(--background-modifier-border);\n      height: 60px;\n      background: var(--background-primary);\n    `;\n\n    // Left side: Mode selection (transparent dropdown)\n    const leftContainer = header.createEl('div', { cls: 'chat-header-left' });\n    leftContainer.style.cssText = 'display: flex; align-items: center; gap: 12px;';\n    \n    this.modeSelect = leftContainer.createEl('select', { cls: 'chat-mode-select' });\n    this.modeSelect.style.cssText = `\n      border: none;\n      background: transparent;\n      padding: 0;\n      font-size: 18px;\n      font-weight: 500;\n      color: var(--text-normal);\n      cursor: pointer;\n      outline: none;\n    `;\n\n    // Populate modes dynamically\n    this.populateModeOptions();\n\n    // Right side: Control buttons\n    const rightContainer = header.createEl('div', { cls: 'chat-header-controls' });\n    rightContainer.style.cssText = 'display: flex; align-items: center; gap: 8px;';\n\n    // History button\n    const historyButton = rightContainer.createEl('button', { cls: 'chat-control-button' });\n    historyButton.innerHTML = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\"/><path d=\"M3 3v5h5\"/><path d=\"M12 7v5l4 2\"/></svg>';\n    historyButton.style.cssText = `\n      background: transparent;\n      border: none;\n      padding: 6px;\n      cursor: pointer;\n      border-radius: 4px;\n      color: var(--text-muted);\n      width: 32px;\n      height: 32px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n    historyButton.title = 'Chat History';\n    historyButton.onclick = () => {\n      // Session management functionality\n      this.showSessionManager();\n    };\n\n    // Settings button  \n    const settingsButton = rightContainer.createEl('button', { cls: 'chat-control-button' });\n    settingsButton.innerHTML = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg>';\n    settingsButton.style.cssText = `\n      background: transparent;\n      border: none;\n      padding: 6px;\n      cursor: pointer;\n      border-radius: 4px;\n      color: var(--text-muted);\n      width: 32px;\n      height: 32px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n    settingsButton.title = 'Chat Settings';\n\n    // Status indicator\n    this.statusIndicator = rightContainer.createEl('div', { cls: 'chat-status-indicator' });\n    this.updateStatusIndicator();\n\n    // Add hover effects to buttons\n    const buttons = [historyButton, settingsButton];\n    buttons.forEach(button => {\n      button.addEventListener('mouseenter', () => {\n        button.style.backgroundColor = 'var(--background-modifier-hover)';\n      });\n      button.addEventListener('mouseleave', () => {\n        button.style.backgroundColor = 'transparent';\n      });\n    });\n  }\n\n  private populateModeOptions() {\n    if (!this.modeSelect) {\n      console.log('Mode select element not available');\n      return;\n    }\n\n    console.log('Populating mode options...', this.modeSelect);\n\n    // Clear existing options\n    this.modeSelect.innerHTML = '';\n\n    // Add Chat mode first (default, bypasses Editorial Engine)\n    const chatOption = this.modeSelect.createEl('option', { \n      value: 'chat', \n      text: 'Chat Mode' \n    });\n\n    // Check if Editorial Engine is available and get enabled modes only\n    if (window.Writerr?.editorial) {\n      try {\n        const modes = window.Writerr.editorial.getEnabledModes();\n        console.log('Editorial Engine enabled modes found:', modes);\n        \n        for (const mode of modes) {\n          const option = this.modeSelect.createEl('option', { \n            value: mode.id, \n            text: mode.name \n          });\n          console.log(`Added mode option: ${mode.name} (${mode.id})`);\n        }\n\n        // Force a visual update and log final state\n        console.log(`Successfully loaded ${modes.length} enabled Editorial Engine modes to dropdown`);\n        console.log('Final dropdown options:', Array.from(this.modeSelect.options).map(opt => ({value: opt.value, text: opt.text})));\n        \n        // Force a repaint\n        this.modeSelect.style.display = 'none';\n        this.modeSelect.offsetHeight; // Trigger reflow\n        this.modeSelect.style.display = '';\n        \n      } catch (error) {\n        console.warn('Failed to load Editorial Engine modes:', error);\n        \n        // Fallback: Add placeholder for unavailable Editorial Engine\n        const unavailableOption = this.modeSelect.createEl('option', {\n          value: 'editorial-unavailable',\n          text: 'Editorial Engine Unavailable'\n        });\n        unavailableOption.disabled = true;\n      }\n    } else {\n      console.log('Editorial Engine not available, showing loading state');\n      \n      // Editorial Engine not loaded - add fallback modes\n      const fallbackModes = [\n        { id: 'editorial-loading', name: 'Editorial Engine Loading...' }\n      ];\n\n      for (const mode of fallbackModes) {\n        const option = this.modeSelect.createEl('option', { \n          value: mode.id, \n          text: mode.name \n        });\n        option.disabled = true;\n      }\n\n      // Try to reload modes after a delay\n      setTimeout(() => {\n        console.log('Retrying mode population after delay...');\n        this.populateModeOptions();\n      }, 2000);\n    }\n\n    // Set default mode\n    const defaultMode = this.plugin.settings.defaultMode || 'chat';\n    this.modeSelect.value = defaultMode;\n    console.log(`Set default mode to: ${defaultMode}, current value: ${this.modeSelect.value}`);\n    console.log('Dropdown element classes:', this.modeSelect.className);\n    console.log('Dropdown parent element:', this.modeSelect.parentElement);\n  }\n\n  refreshModeOptions() {\n    // Public method to refresh mode options when Editorial Engine becomes available\n    this.populateModeOptions();\n  }\n\n  private createInputArea(container: HTMLElement) {\n    container.style.cssText = `\n      display: flex;\n      align-items: flex-end;\n      padding: 16px;\n      gap: 12px;\n      background: var(--background-primary);\n      border-top: 1px solid var(--background-modifier-border);\n    `;\n\n    // Message input with modern styling\n    this.messageInput = container.createEl('textarea', { \n      cls: 'chat-message-input',\n      attr: { \n        placeholder: 'Type your message...',\n        rows: '1'\n      }\n    });\n    this.messageInput.style.cssText = `\n      flex: 1;\n      min-height: 40px;\n      max-height: 160px;\n      padding: 12px 16px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 20px;\n      background: var(--background-primary);\n      color: var(--text-normal);\n      resize: none;\n      font-family: inherit;\n      font-size: 14px;\n      line-height: 1.4;\n      outline: none;\n      transition: border-color 0.2s ease;\n    `;\n\n    // Auto-resize functionality\n    const autoResize = () => {\n      this.messageInput.style.height = 'auto';\n      const scrollHeight = this.messageInput.scrollHeight;\n      const maxHeight = 160;\n      const newHeight = Math.min(scrollHeight, maxHeight);\n      this.messageInput.style.height = newHeight + 'px';\n    };\n\n    this.messageInput.addEventListener('input', autoResize);\n    this.messageInput.addEventListener('focus', () => {\n      this.messageInput.style.borderColor = 'var(--interactive-accent)';\n    });\n    this.messageInput.addEventListener('blur', () => {\n      this.messageInput.style.borderColor = 'var(--background-modifier-border)';\n    });\n\n    this.messageInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        this.sendMessage();\n      } else if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        this.sendMessage();\n      }\n    });\n\n    // Send button with modern styling\n    this.sendButton = container.createEl('button', { \n      cls: 'chat-send-button' \n    });\n    this.sendButton.innerHTML = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M22 2 11 13\"/><path d=\"M22 2 15 22 11 13 2 9z\"/></svg>';\n    this.sendButton.style.cssText = `\n      width: 40px;\n      height: 40px;\n      border: none;\n      border-radius: 50%;\n      background: var(--interactive-accent);\n      color: var(--text-on-accent);\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: all 0.2s ease;\n      flex-shrink: 0;\n    `;\n    \n    this.sendButton.addEventListener('mouseenter', () => {\n      this.sendButton.style.transform = 'scale(1.05)';\n    });\n    this.sendButton.addEventListener('mouseleave', () => {\n      this.sendButton.style.transform = 'scale(1)';\n    });\n\n    this.sendButton.onclick = () => this.sendMessage();\n\n    // Initial resize\n    setTimeout(autoResize, 0);\n  }\n\n  private createContextArea(container: HTMLElement) {\n    container.style.cssText = `\n      border-top: 1px solid var(--background-modifier-border);\n      padding: 12px 16px;\n      background: var(--background-secondary);\n      min-height: 0;\n      max-height: 120px;\n      overflow-y: auto;\n    `;\n\n    // Context header\n    const contextHeader = container.createEl('div', { cls: 'context-header' });\n    contextHeader.style.cssText = `\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 8px;\n    `;\n\n    const contextLabel = contextHeader.createEl('span', { text: 'Context' });\n    contextLabel.style.cssText = `\n      font-size: 12px;\n      color: var(--text-muted);\n      font-weight: 500;\n    `;\n\n    const addDocButton = contextHeader.createEl('button');\n    addDocButton.innerHTML = '<svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/><path d=\"M14 2v6h6\"/><path d=\"M12 11v6\"/><path d=\"M9 14h6\"/></svg>';\n    addDocButton.style.cssText = `\n      background: transparent;\n      border: none;\n      cursor: pointer;\n      color: var(--text-muted);\n      padding: 2px;\n      border-radius: 3px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n    addDocButton.title = 'Attach document';\n    addDocButton.onclick = () => this.showDocumentPicker();\n\n    // Context documents container\n    const documentsContainer = container.createEl('div', { cls: 'context-documents' });\n    documentsContainer.style.cssText = `\n      display: flex;\n      flex-wrap: wrap;\n      gap: 6px;\n      min-height: 24px;\n    `;\n\n    // Store reference for updates\n    this.contextDocuments = documentsContainer;\n\n    // Add sample context documents for demo\n    this.addContextDocument('Meeting Notes.md', '/Daily/Meeting Notes.md');\n    this.addContextDocument('Project Plan.md', '/Projects/Project Plan.md');\n\n    // Add hover effect to add button\n    addDocButton.addEventListener('mouseenter', () => {\n      addDocButton.style.backgroundColor = 'var(--background-modifier-hover)';\n    });\n    addDocButton.addEventListener('mouseleave', () => {\n      addDocButton.style.backgroundColor = 'transparent';\n    });\n  }\n\n  private contextDocuments: HTMLElement;\n\n  private addContextDocument(name: string, path: string) {\n    if (!this.contextDocuments) return;\n\n    const docChip = this.contextDocuments.createEl('div', { cls: 'context-document-chip' });\n    docChip.style.cssText = `\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n      padding: 4px 8px;\n      background: var(--background-primary);\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 12px;\n      font-size: 12px;\n      color: var(--text-normal);\n      cursor: pointer;\n      max-width: 200px;\n    `;\n\n    const docIcon = docChip.createEl('span');\n    docIcon.innerHTML = '<svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/><path d=\"M14 2v6h6\"/></svg>';\n    docIcon.style.cssText = 'color: var(--text-muted); flex-shrink: 0;';\n\n    const docName = docChip.createEl('span', { text: name });\n    docName.style.cssText = `\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      flex: 1;\n    `;\n\n    const removeBtn = docChip.createEl('button', { text: '\u00D7' });\n    removeBtn.style.cssText = `\n      background: none;\n      border: none;\n      cursor: pointer;\n      color: var(--text-muted);\n      font-size: 14px;\n      padding: 0;\n      width: 14px;\n      height: 14px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 50%;\n      flex-shrink: 0;\n    `;\n\n    docChip.onclick = (e) => {\n      if (e.target !== removeBtn) {\n        // Open document functionality\n        console.log('Opening document:', path);\n      }\n    };\n\n    removeBtn.onclick = (e) => {\n      e.stopPropagation();\n      docChip.remove();\n    };\n\n    // Hover effects\n    docChip.addEventListener('mouseenter', () => {\n      docChip.style.backgroundColor = 'var(--background-modifier-hover)';\n    });\n    docChip.addEventListener('mouseleave', () => {\n      docChip.style.backgroundColor = 'var(--background-primary)';\n    });\n\n    removeBtn.addEventListener('mouseenter', () => {\n      removeBtn.style.backgroundColor = 'var(--background-modifier-error)';\n      removeBtn.style.color = 'var(--text-on-accent)';\n    });\n    removeBtn.addEventListener('mouseleave', () => {\n      removeBtn.style.backgroundColor = 'transparent';\n      removeBtn.style.color = 'var(--text-muted)';\n    });\n  }\n\n  private showDocumentPicker() {\n    // Create document picker modal\n    const overlay = this.containerEl.createEl('div', { cls: 'document-picker-overlay' });\n    overlay.style.cssText = `\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    `;\n\n    const modal = overlay.createEl('div', { cls: 'document-picker-modal' });\n    modal.style.cssText = `\n      background: var(--background-primary);\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 8px;\n      padding: 20px;\n      min-width: 400px;\n      max-height: 500px;\n      overflow-y: auto;\n    `;\n\n    const header = modal.createEl('div');\n    header.style.cssText = 'display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;';\n    header.createEl('h3', { text: 'Attach Document' });\n\n    const closeButton = header.createEl('button', { text: '\u00D7' });\n    closeButton.style.cssText = `\n      background: none;\n      border: none;\n      font-size: 24px;\n      cursor: pointer;\n      color: var(--text-muted);\n    `;\n    closeButton.onclick = () => overlay.remove();\n\n    // Search input\n    const searchInput = modal.createEl('input', { \n      type: 'text',\n      placeholder: 'Search documents...'\n    });\n    searchInput.style.cssText = `\n      width: 100%;\n      padding: 8px 12px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      background: var(--background-primary);\n      color: var(--text-normal);\n      margin-bottom: 16px;\n    `;\n\n    // Document list\n    const docList = modal.createEl('div');\n    \n    // Get vault files\n    const files = this.app.vault.getMarkdownFiles();\n    const recentFiles = files.slice(0, 10); // Show 10 most recent\n\n    recentFiles.forEach(file => {\n      const docItem = docList.createEl('div');\n      docItem.style.cssText = `\n        padding: 8px 12px;\n        border: 1px solid var(--background-modifier-border);\n        border-radius: 4px;\n        margin-bottom: 8px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      `;\n\n      docItem.innerHTML = `\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n          <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/>\n          <path d=\"M14 2v6h6\"/>\n        </svg>\n        <div>\n          <div style=\"font-weight: 500;\">${file.basename}</div>\n          <div style=\"font-size: 12px; color: var(--text-muted);\">${file.path}</div>\n        </div>\n      `;\n\n      docItem.onclick = () => {\n        this.addContextDocument(file.basename + '.md', file.path);\n        overlay.remove();\n      };\n\n      docItem.addEventListener('mouseenter', () => {\n        docItem.style.backgroundColor = 'var(--background-modifier-hover)';\n      });\n      docItem.addEventListener('mouseleave', () => {\n        docItem.style.backgroundColor = 'transparent';\n      });\n    });\n\n    overlay.onclick = (e) => {\n      if (e.target === overlay) overlay.remove();\n    };\n\n    // Focus search input\n    searchInput.focus();\n  }\n\n  private async sendMessage() {\n    const message = this.messageInput.value.trim();\n    if (!message) return;\n\n    // Get selected mode from interface\n    const selectedMode = this.getSelectedMode();\n\n    this.messageInput.value = '';\n    this.sendButton.disabled = true;\n    this.sendButton.innerHTML = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"m9 12 2 2 4-4\"/></svg>';\n\n    // Update status indicator to show processing\n    if (this.statusIndicator) {\n      this.statusIndicator.style.background = 'var(--color-blue)';\n    }\n\n    try {\n      // Pass the selected mode directly to the plugin\n      await this.plugin.sendMessage(message, selectedMode);\n      this.refresh();\n    } catch (error) {\n      console.error('Error sending message:', error);\n      new Notice(`Error: ${error.message}`);\n    } finally {\n      this.sendButton.disabled = false;\n      this.sendButton.innerHTML = '<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M22 2 11 13\"/><path d=\"M22 2 15 22 11 13 2 9z\"/></svg>';\n      \n      // Restore status indicator\n      this.updateStatusIndicator();\n    }\n  }\n\n  refresh() {\n    this.updateSessionSelect();\n    this.renderMessages();\n  }\n\n  private updateSessionSelect() {\n    // In the new design, we don't have a session selector in the header\n    // Session management is handled through the history button modal\n    // This method is kept for compatibility but doesn't need to do anything\n    if (!this.modeSelect) return;\n    \n    // Ensure the mode selector has the correct value\n    if (this.plugin.settings.defaultMode) {\n      this.modeSelect.value = this.plugin.settings.defaultMode;\n    }\n  }\n\n  private async renderMessages() {\n    this.chatContainer.empty();\n\n    if (!this.plugin.currentSession || this.plugin.currentSession.messages.length === 0) {\n      const emptyState = this.chatContainer.createEl('div', { \n        cls: 'chat-empty-state',\n        text: 'Start a conversation by typing a message below.'\n      });\n      emptyState.style.cssText = `\n        text-align: center;\n        padding: 20px;\n        color: var(--text-muted);\n        font-style: italic;\n      `;\n      return;\n    }\n\n    for (const message of this.plugin.currentSession.messages) {\n      await this.renderMessage(message);\n    }\n\n    // Scroll to bottom\n    this.chatContainer.scrollTop = this.chatContainer.scrollHeight;\n  }\n\n  private async renderMessage(message: ChatMessage) {\n    const messageEl = this.chatContainer.createEl('div', { \n      cls: `chat-message chat-message-${message.role}` \n    });\n\n    const isUser = message.role === 'user';\n    messageEl.style.cssText = `\n      display: flex;\n      margin: 10px 0;\n      ${isUser ? 'justify-content: flex-end;' : 'justify-content: flex-start;'}\n    `;\n\n    const bubble = messageEl.createEl('div', { cls: 'chat-message-bubble' });\n    bubble.style.cssText = `\n      max-width: 80%;\n      padding: 10px 15px;\n      border-radius: 18px;\n      ${isUser \n        ? 'background: var(--interactive-accent); color: var(--text-on-accent);'\n        : 'background: var(--background-secondary); color: var(--text-normal);'\n      }\n      word-wrap: break-word;\n    `;\n\n    if (this.plugin.settings.enableMarkdown && !isUser) {\n      // Render markdown for assistant messages\n      const component = new Component();\n      await MarkdownRenderer.renderMarkdown(\n        message.content, \n        bubble, \n        '', \n        component\n      );\n    } else {\n      bubble.textContent = message.content;\n    }\n\n    if (this.plugin.settings.showTimestamps) {\n      const timestamp = messageEl.createEl('div', { \n        cls: 'chat-timestamp',\n        text: new Date(message.timestamp).toLocaleTimeString()\n      });\n      timestamp.style.cssText = `\n        font-size: 11px;\n        color: var(--text-muted);\n        margin: 5px ${isUser ? '15px' : '0'} 0 ${isUser ? '0' : '15px'};\n        align-self: ${isUser ? 'flex-end' : 'flex-start'};\n      `;\n    }\n  }\n\n  private applyTheme() {\n    const container = this.containerEl;\n    container.removeClass('theme-default', 'theme-compact', 'theme-minimal');\n    container.addClass(`theme-${this.plugin.settings.theme}`);\n\n    if (this.plugin.settings.theme === 'compact') {\n      this.chatContainer.style.fontSize = '14px';\n      this.messageInput.style.minHeight = '40px';\n    } else if (this.plugin.settings.theme === 'minimal') {\n      this.chatContainer.style.fontSize = '13px';\n      this.messageInput.style.minHeight = '35px';\n    }\n  }\n\n  private updateStatusIndicator() {\n    if (!this.statusIndicator) return;\n\n    // Check Editorial Engine availability\n    const hasEditorialEngine = !!window.Writerr?.editorial;\n    const hasTrackEdits = !!window.WriterrlAPI?.trackEdits;\n    \n    // Track previous status to detect changes\n    const previousStatus = this.statusIndicator.getAttribute('data-status');\n    \n    let status = 'ready';\n    let color = 'var(--color-green)';\n    \n    if (!hasEditorialEngine && !hasTrackEdits) {\n      status = 'limited';\n      color = 'var(--color-yellow)';\n    } else if (!hasEditorialEngine || !hasTrackEdits) {\n      status = 'partial';\n      color = 'var(--color-orange)';\n    }\n    \n    this.statusIndicator.style.cssText = `\n      width: 8px;\n      height: 8px;\n      border-radius: 50%;\n      background: ${color};\n    `;\n    \n    this.statusIndicator.setAttribute('title', \n      status === 'ready' ? 'All systems ready' :\n      status === 'partial' ? 'Some features unavailable' :\n      'Limited functionality - Editorial Engine and Track Edits not available'\n    );\n    \n    this.statusIndicator.setAttribute('data-status', status);\n    \n    // Refresh mode options if Editorial Engine status changed\n    if (previousStatus !== status && hasEditorialEngine) {\n      this.refreshModeOptions();\n    }\n  }\n\n  private showSessionManager() {\n    // Create session manager overlay\n    const overlay = this.containerEl.createEl('div', { cls: 'session-manager-overlay' });\n    overlay.style.cssText = `\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 1000;\n    `;\n\n    const modal = overlay.createEl('div', { cls: 'session-manager-modal' });\n    modal.style.cssText = `\n      background: var(--background-primary);\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 8px;\n      padding: 20px;\n      min-width: 300px;\n      max-height: 400px;\n      overflow-y: auto;\n    `;\n\n    const header = modal.createEl('div');\n    header.style.cssText = 'display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;';\n    header.createEl('h3', { text: 'Chat Sessions' });\n\n    const closeButton = header.createEl('button', { text: '\u00D7' });\n    closeButton.style.cssText = `\n      background: none;\n      border: none;\n      font-size: 24px;\n      cursor: pointer;\n      color: var(--text-muted);\n    `;\n    closeButton.onclick = () => overlay.remove();\n\n    // List sessions\n    const sessionsList = modal.createEl('div');\n    const sessions = this.plugin.getChatSessions();\n    \n    sessions.forEach(session => {\n      const sessionItem = sessionsList.createEl('div');\n      sessionItem.style.cssText = `\n        padding: 8px 12px;\n        border: 1px solid var(--background-modifier-border);\n        border-radius: 4px;\n        margin-bottom: 8px;\n        cursor: pointer;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      `;\n      \n      if (this.plugin.currentSession?.id === session.id) {\n        sessionItem.style.backgroundColor = 'var(--background-modifier-hover)';\n      }\n\n      const sessionInfo = sessionItem.createEl('div');\n      sessionInfo.createEl('div', { text: session.title, cls: 'session-title' });\n      const messageCount = session.messages?.length || 0;\n      sessionInfo.createEl('div', { \n        text: `${messageCount} messages`,\n        cls: 'session-info'\n      }).style.cssText = 'font-size: 12px; color: var(--text-muted);';\n\n      const deleteBtn = sessionItem.createEl('button', { text: '\uD83D\uDDD1' });\n      deleteBtn.style.cssText = `\n        background: none;\n        border: none;\n        cursor: pointer;\n        opacity: 0.6;\n      `;\n      \n      sessionItem.onclick = (e) => {\n        if (e.target === deleteBtn) return;\n        this.plugin.setCurrentSession(session.id);\n        this.refresh();\n        overlay.remove();\n      };\n\n      deleteBtn.onclick = (e) => {\n        e.stopPropagation();\n        this.plugin.deleteSession(session.id);\n        overlay.remove();\n        this.showSessionManager(); // Refresh the list\n      };\n    });\n\n    // New session button\n    const newSessionBtn = modal.createEl('button', { text: '+ New Session' });\n    newSessionBtn.style.cssText = `\n      width: 100%;\n      padding: 8px;\n      background: var(--interactive-accent);\n      color: var(--text-on-accent);\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      margin-top: 12px;\n    `;\n    newSessionBtn.onclick = () => {\n      this.plugin.newChatSession();\n      this.refresh();\n      overlay.remove();\n    };\n\n    overlay.onclick = (e) => {\n      if (e.target === overlay) overlay.remove();\n    };\n  }\n\n  getSelectedMode(): string {\n    return this.modeSelect?.value || 'chat';\n  }\n\n  setMode(mode: string): void {\n    if (this.modeSelect) {\n      this.modeSelect.value = mode;\n    }\n  }\n\n  async onClose() {\n    // Clean up\n  }\n}", "import { ChatMessage, AIProvider } from '@shared/types';\n\ninterface WriterrlChatSettings {\n  defaultProvider: string;\n  providers: AIProvider[];\n  maxTokens: number;\n  temperature: number;\n}\n\nexport class AIProviderManager {\n  private settings: WriterrlChatSettings;\n\n  constructor(settings: WriterrlChatSettings) {\n    this.settings = settings;\n  }\n\n  updateSettings(settings: WriterrlChatSettings) {\n    this.settings = settings;\n  }\n\n  async sendMessage(messages: ChatMessage[], context?: string): Promise<string> {\n    const provider = this.getProvider(this.settings.defaultProvider);\n    if (!provider) {\n      throw new Error('No AI provider configured');\n    }\n\n    if (!provider.apiKey) {\n      throw new Error(`API key not configured for ${provider.name}`);\n    }\n\n    // Build the request payload based on provider\n    const requestMessages = this.buildRequestMessages(messages, context);\n    \n    try {\n      if (provider.id === 'openai' || provider.baseUrl?.includes('openai')) {\n        return await this.sendOpenAIMessage(provider, requestMessages);\n      } else if (provider.id === 'anthropic' || provider.baseUrl?.includes('anthropic')) {\n        return await this.sendAnthropicMessage(provider, requestMessages);\n      } else {\n        // Generic OpenAI-compatible API\n        return await this.sendOpenAIMessage(provider, requestMessages);\n      }\n    } catch (error) {\n      console.error('AI Provider Error:', error);\n      throw new Error(`AI Provider failed: ${error.message}`);\n    }\n  }\n\n  private buildRequestMessages(messages: ChatMessage[], context?: string): any[] {\n    const requestMessages: any[] = [];\n\n    // Add context as system message if provided\n    if (context) {\n      requestMessages.push({\n        role: 'system',\n        content: `Here's the current document context:\\n\\n${context}\\n\\nPlease use this context to inform your responses.`\n      });\n    }\n\n    // Convert chat messages to API format\n    for (const message of messages) {\n      if (message.role !== 'system') {\n        requestMessages.push({\n          role: message.role,\n          content: message.content\n        });\n      }\n    }\n\n    return requestMessages;\n  }\n\n  private async sendOpenAIMessage(provider: AIProvider, messages: any[]): Promise<string> {\n    const baseUrl = provider.baseUrl || 'https://api.openai.com/v1';\n    const url = `${baseUrl}/chat/completions`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${provider.apiKey}`\n      },\n      body: JSON.stringify({\n        model: provider.model,\n        messages,\n        max_tokens: this.settings.maxTokens,\n        temperature: this.settings.temperature,\n        stream: false\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`HTTP ${response.status}: ${error}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n      throw new Error('Invalid response format from AI provider');\n    }\n\n    return data.choices[0].message.content;\n  }\n\n  private async sendAnthropicMessage(provider: AIProvider, messages: any[]): Promise<string> {\n    const baseUrl = provider.baseUrl || 'https://api.anthropic.com';\n    const url = `${baseUrl}/v1/messages`;\n\n    // Anthropic has a different message format\n    const systemMessages = messages.filter(m => m.role === 'system');\n    const conversationMessages = messages.filter(m => m.role !== 'system');\n\n    const systemPrompt = systemMessages.map(m => m.content).join('\\n\\n');\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': provider.apiKey!,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: provider.model,\n        max_tokens: this.settings.maxTokens,\n        temperature: this.settings.temperature,\n        system: systemPrompt,\n        messages: conversationMessages\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`HTTP ${response.status}: ${error}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.content || !data.content[0] || !data.content[0].text) {\n      throw new Error('Invalid response format from Anthropic API');\n    }\n\n    return data.content[0].text;\n  }\n\n  private getProvider(providerId: string): AIProvider | undefined {\n    return this.settings.providers.find(p => p.id === providerId);\n  }\n\n  getProviders(): AIProvider[] {\n    return [...this.settings.providers];\n  }\n\n  validateProvider(provider: AIProvider): { valid: boolean; error?: string } {\n    if (!provider.name || !provider.model) {\n      return { valid: false, error: 'Provider name and model are required' };\n    }\n\n    if (!provider.apiKey) {\n      return { valid: false, error: 'API key is required' };\n    }\n\n    // Basic URL validation if baseUrl is provided\n    if (provider.baseUrl) {\n      try {\n        new URL(provider.baseUrl);\n      } catch {\n        return { valid: false, error: 'Invalid base URL format' };\n      }\n    }\n\n    return { valid: true };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,mBAA4D;;;ACA5D,sBAA+C;;;ACExC,SAAS,aAAqB;AACnC,SAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC;AAC/C;;;ADCO,IAAM,0BAAN,cAAsC,iCAAiB;AAAA,EAG5D,YAAY,KAAU,QAA4B;AAChD,UAAM,KAAK,MAAM;AACjB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,UAAgB;AACd,UAAM,EAAE,YAAY,IAAI;AACxB,gBAAY,MAAM;AAElB,gBAAY,SAAS,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAG5D,gBAAY,SAAS,MAAM,EAAE,MAAM,4BAA4B,CAAC;AAEhE,QAAI,wBAAQ,WAAW,EACpB,QAAQ,kBAAkB,EAC1B,QAAQ,yCAAyC,EACjD,YAAY,cAAY;AACvB,iBAAW,YAAY,KAAK,OAAO,SAAS,WAAW;AACrD,iBAAS,UAAU,SAAS,IAAI,SAAS,IAAI;AAAA,MAC/C;AACA,eAAS,SAAS,KAAK,OAAO,SAAS,eAAe,EACnD,SAAS,OAAO,UAAU;AACzB,aAAK,OAAO,SAAS,kBAAkB;AACvC,cAAM,KAAK,OAAO,aAAa;AAAA,MACjC,CAAC;AAAA,IACL,CAAC;AAGH,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,SAAS,UAAU,QAAQ,KAAK;AAC9D,YAAM,WAAW,KAAK,OAAO,SAAS,UAAU,CAAC;AACjD,WAAK,sBAAsB,aAAa,UAAU,CAAC;AAAA,IACrD;AAEA,QAAI,wBAAQ,WAAW,EACpB,QAAQ,kBAAkB,EAC1B,QAAQ,uBAAuB,EAC/B,UAAU,YAAU,OAClB,cAAc,cAAc,EAC5B,OAAO,EACP,QAAQ,MAAM;AACb,WAAK,OAAO,SAAS,UAAU,KAAK;AAAA,QAClC,IAAI,WAAW;AAAA,QACf,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AACD,WAAK,QAAQ;AAAA,IACf,CAAC,CAAC;AAGN,gBAAY,SAAS,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAErD,QAAI,wBAAQ,WAAW,EACpB,QAAQ,eAAe,EACvB,QAAQ,qCAAqC,EAC7C,YAAY,cAAY,SACtB,UAAU,SAAS,eAAe,EAClC,UAAU,QAAQ,cAAc,EAChC,UAAU,YAAY,iBAAiB,EACvC,SAAS,KAAK,OAAO,SAAS,YAAY,EAC1C,SAAS,OAAO,UAAyC;AACxD,WAAK,OAAO,SAAS,eAAe;AACpC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,OAAO,EACf,QAAQ,iCAAiC,EACzC,YAAY,cAAY,SACtB,UAAU,WAAW,SAAS,EAC9B,UAAU,WAAW,SAAS,EAC9B,UAAU,WAAW,SAAS,EAC9B,SAAS,KAAK,OAAO,SAAS,KAAK,EACnC,SAAS,OAAO,UAA6C;AAC5D,WAAK,OAAO,SAAS,QAAQ;AAC7B,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,iBAAiB,EACzB,QAAQ,sCAAsC,EAC9C,UAAU,YAAU,OAClB,SAAS,KAAK,OAAO,SAAS,cAAc,EAC5C,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,iBAAiB;AACtC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,iBAAiB,EACzB,QAAQ,kCAAkC,EAC1C,UAAU,YAAU,OAClB,SAAS,KAAK,OAAO,SAAS,cAAc,EAC5C,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,iBAAiB;AACtC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAGN,gBAAY,SAAS,MAAM,EAAE,MAAM,WAAW,CAAC;AAE/C,QAAI,wBAAQ,WAAW,EACpB,QAAQ,iBAAiB,EACzB,QAAQ,kCAAkC,EAC1C,UAAU,YAAU,OAClB,SAAS,KAAK,OAAO,SAAS,aAAa,EAC3C,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,gBAAgB;AACrC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,eAAe,EACvB,QAAQ,iEAAiE,EACzE,UAAU,YAAU,OAClB,UAAU,GAAG,IAAI,CAAC,EAClB,SAAS,KAAK,OAAO,SAAS,YAAY,EAC1C,kBAAkB,EAClB,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,eAAe;AACpC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,YAAY,EACpB,QAAQ,2CAA2C,EACnD,UAAU,YAAU,OAClB,UAAU,KAAK,KAAM,GAAG,EACxB,SAAS,KAAK,OAAO,SAAS,SAAS,EACvC,kBAAkB,EAClB,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,YAAY;AACjC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,WAAW,EACpB,QAAQ,aAAa,EACrB,QAAQ,+DAA+D,EACvE,UAAU,YAAU,OAClB,UAAU,GAAG,GAAG,GAAG,EACnB,SAAS,KAAK,OAAO,SAAS,WAAW,EACzC,kBAAkB,EAClB,SAAS,OAAO,UAAU;AACzB,WAAK,OAAO,SAAS,cAAc;AACnC,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAGN,gBAAY,SAAS,MAAM,EAAE,MAAM,UAAU,CAAC;AAE9C,QAAI,wBAAQ,WAAW,EACpB,QAAQ,wBAAwB,EAChC,QAAQ,mDAAmD,EAC3D,UAAU,YAAU,OAClB,cAAc,WAAW,EACzB,WAAW,EACX,QAAQ,MAAM;AACb,WAAK,OAAO,aAAa,MAAM;AAC/B,WAAK,OAAO,iBAAiB;AAC7B,WAAK,OAAO,iBAAiB;AAAA,IAC/B,CAAC,CAAC;AAAA,EACR;AAAA,EAEQ,sBAAsB,aAA0B,UAAsB,OAAe;AAC3F,UAAM,oBAAoB,YAAY,UAAU,kBAAkB;AAClE,sBAAkB,SAAS,MAAM,EAAE,MAAM,SAAS,KAAK,CAAC;AAExD,QAAI,wBAAQ,iBAAiB,EAC1B,QAAQ,eAAe,EACvB,QAAQ,UAAQ,KACd,SAAS,SAAS,IAAI,EACtB,SAAS,OAAO,UAAU;AACzB,eAAS,OAAO;AAChB,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,iBAAiB,EAC1B,QAAQ,OAAO,EACf,QAAQ,UAAQ,KACd,SAAS,SAAS,KAAK,EACvB,SAAS,OAAO,UAAU;AACzB,eAAS,QAAQ;AACjB,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,iBAAiB,EAC1B,QAAQ,UAAU,EAClB,QAAQ,UAAQ,KACd,SAAS,SAAS,WAAW,EAAE,EAC/B,SAAS,OAAO,UAAU;AACzB,eAAS,UAAU;AACnB,YAAM,KAAK,OAAO,aAAa;AAAA,IACjC,CAAC,CAAC;AAEN,QAAI,wBAAQ,iBAAiB,EAC1B,QAAQ,SAAS,EACjB,QAAQ,UAAQ;AACf,WAAK,QAAQ,OAAO;AACpB,WAAK,SAAS,SAAS,UAAU,EAAE,EAChC,SAAS,OAAO,UAAU;AACzB,iBAAS,SAAS;AAClB,cAAM,KAAK,OAAO,aAAa;AAAA,MACjC,CAAC;AAAA,IACL,CAAC;AAEH,QAAI,wBAAQ,iBAAiB,EAC1B,UAAU,YAAU,OAClB,cAAc,QAAQ,EACtB,WAAW,EACX,QAAQ,YAAY;AACnB,WAAK,OAAO,SAAS,UAAU,OAAO,OAAO,CAAC;AAC9C,YAAM,KAAK,OAAO,aAAa;AAC/B,WAAK,QAAQ;AAAA,IACf,CAAC,CAAC;AAAA,EACR;AACF;;;AEjOA,IAAAC,mBAAqE;AAI9D,IAAM,iBAAiB;AAEvB,IAAM,WAAN,cAAuB,0BAAS;AAAA,EAUrC,YAAY,MAAqB,QAA4B;AAC3D,UAAM,IAAI;AACV,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,cAAsB;AACpB,WAAO;AAAA,EACT;AAAA,EAEA,iBAAyB;AACvB,WAAO;AAAA,EACT;AAAA,EAEA,UAAkB;AAChB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,SAAS;AACb,UAAM,YAAY,KAAK,YAAY,SAAS,CAAC;AAC7C,cAAU,MAAM;AAChB,cAAU,SAAS,mBAAmB;AACtC,cAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW1B,UAAM,SAAS,UAAU,SAAS,OAAO,EAAE,KAAK,cAAc,CAAC;AAC/D,SAAK,aAAa,MAAM;AAGxB,SAAK,gBAAgB,UAAU,SAAS,OAAO,EAAE,KAAK,gBAAgB,CAAC;AACvE,SAAK,cAAc,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnC,UAAM,cAAc,UAAU,SAAS,OAAO,EAAE,KAAK,oBAAoB,CAAC;AAC1E,SAAK,kBAAkB,WAAW;AAGlC,SAAK,iBAAiB,UAAU,SAAS,OAAO,EAAE,KAAK,uBAAuB,CAAC;AAC/E,SAAK,gBAAgB,KAAK,cAAc;AAGxC,SAAK,WAAW;AAGhB,QAAI,CAAC,KAAK,OAAO,gBAAgB;AAC/B,WAAK,OAAO,eAAe;AAAA,IAC7B;AAEA,SAAK,QAAQ;AAGb,eAAW,MAAM;AACf,cAAQ,IAAI,6CAA6C;AACzD,WAAK,oBAAoB;AAAA,IAC3B,GAAG,GAAI;AAGP,eAAW,MAAM;AACf,WAAK,sBAAsB;AAAA,IAC7B,GAAG,IAAI;AAAA,EACT;AAAA,EAEQ,aAAa,QAAqB;AACxC,WAAO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWvB,UAAM,gBAAgB,OAAO,SAAS,OAAO,EAAE,KAAK,mBAAmB,CAAC;AACxE,kBAAc,MAAM,UAAU;AAE9B,SAAK,aAAa,cAAc,SAAS,UAAU,EAAE,KAAK,mBAAmB,CAAC;AAC9E,SAAK,WAAW,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYhC,SAAK,oBAAoB;AAGzB,UAAM,iBAAiB,OAAO,SAAS,OAAO,EAAE,KAAK,uBAAuB,CAAC;AAC7E,mBAAe,MAAM,UAAU;AAG/B,UAAM,gBAAgB,eAAe,SAAS,UAAU,EAAE,KAAK,sBAAsB,CAAC;AACtF,kBAAc,YAAY;AAC1B,kBAAc,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa9B,kBAAc,QAAQ;AACtB,kBAAc,UAAU,MAAM;AAE5B,WAAK,mBAAmB;AAAA,IAC1B;AAGA,UAAM,iBAAiB,eAAe,SAAS,UAAU,EAAE,KAAK,sBAAsB,CAAC;AACvF,mBAAe,YAAY;AAC3B,mBAAe,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa/B,mBAAe,QAAQ;AAGvB,SAAK,kBAAkB,eAAe,SAAS,OAAO,EAAE,KAAK,wBAAwB,CAAC;AACtF,SAAK,sBAAsB;AAG3B,UAAM,UAAU,CAAC,eAAe,cAAc;AAC9C,YAAQ,QAAQ,YAAU;AACxB,aAAO,iBAAiB,cAAc,MAAM;AAC1C,eAAO,MAAM,kBAAkB;AAAA,MACjC,CAAC;AACD,aAAO,iBAAiB,cAAc,MAAM;AAC1C,eAAO,MAAM,kBAAkB;AAAA,MACjC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEQ,sBAAsB;AApLhC;AAqLI,QAAI,CAAC,KAAK,YAAY;AACpB,cAAQ,IAAI,mCAAmC;AAC/C;AAAA,IACF;AAEA,YAAQ,IAAI,8BAA8B,KAAK,UAAU;AAGzD,SAAK,WAAW,YAAY;AAG5B,UAAM,aAAa,KAAK,WAAW,SAAS,UAAU;AAAA,MACpD,OAAO;AAAA,MACP,MAAM;AAAA,IACR,CAAC;AAGD,SAAI,YAAO,YAAP,mBAAgB,WAAW;AAC7B,UAAI;AACF,cAAM,QAAQ,OAAO,QAAQ,UAAU,gBAAgB;AACvD,gBAAQ,IAAI,yCAAyC,KAAK;AAE1D,mBAAW,QAAQ,OAAO;AACxB,gBAAM,SAAS,KAAK,WAAW,SAAS,UAAU;AAAA,YAChD,OAAO,KAAK;AAAA,YACZ,MAAM,KAAK;AAAA,UACb,CAAC;AACD,kBAAQ,IAAI,sBAAsB,KAAK,IAAI,KAAK,KAAK,EAAE,GAAG;AAAA,QAC5D;AAGA,gBAAQ,IAAI,uBAAuB,MAAM,MAAM,6CAA6C;AAC5F,gBAAQ,IAAI,2BAA2B,MAAM,KAAK,KAAK,WAAW,OAAO,EAAE,IAAI,UAAQ,EAAC,OAAO,IAAI,OAAO,MAAM,IAAI,KAAI,EAAE,CAAC;AAG3H,aAAK,WAAW,MAAM,UAAU;AAChC,aAAK,WAAW;AAChB,aAAK,WAAW,MAAM,UAAU;AAAA,MAElC,SAAS,OAAO;AACd,gBAAQ,KAAK,0CAA0C,KAAK;AAG5D,cAAM,oBAAoB,KAAK,WAAW,SAAS,UAAU;AAAA,UAC3D,OAAO;AAAA,UACP,MAAM;AAAA,QACR,CAAC;AACD,0BAAkB,WAAW;AAAA,MAC/B;AAAA,IACF,OAAO;AACL,cAAQ,IAAI,uDAAuD;AAGnE,YAAM,gBAAgB;AAAA,QACpB,EAAE,IAAI,qBAAqB,MAAM,8BAA8B;AAAA,MACjE;AAEA,iBAAW,QAAQ,eAAe;AAChC,cAAM,SAAS,KAAK,WAAW,SAAS,UAAU;AAAA,UAChD,OAAO,KAAK;AAAA,UACZ,MAAM,KAAK;AAAA,QACb,CAAC;AACD,eAAO,WAAW;AAAA,MACpB;AAGA,iBAAW,MAAM;AACf,gBAAQ,IAAI,yCAAyC;AACrD,aAAK,oBAAoB;AAAA,MAC3B,GAAG,GAAI;AAAA,IACT;AAGA,UAAM,cAAc,KAAK,OAAO,SAAS,eAAe;AACxD,SAAK,WAAW,QAAQ;AACxB,YAAQ,IAAI,wBAAwB,WAAW,oBAAoB,KAAK,WAAW,KAAK,EAAE;AAC1F,YAAQ,IAAI,6BAA6B,KAAK,WAAW,SAAS;AAClE,YAAQ,IAAI,4BAA4B,KAAK,WAAW,aAAa;AAAA,EACvE;AAAA,EAEA,qBAAqB;AAEnB,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEQ,gBAAgB,WAAwB;AAC9C,cAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU1B,SAAK,eAAe,UAAU,SAAS,YAAY;AAAA,MACjD,KAAK;AAAA,MACL,MAAM;AAAA,QACJ,aAAa;AAAA,QACb,MAAM;AAAA,MACR;AAAA,IACF,CAAC;AACD,SAAK,aAAa,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBlC,UAAM,aAAa,MAAM;AACvB,WAAK,aAAa,MAAM,SAAS;AACjC,YAAM,eAAe,KAAK,aAAa;AACvC,YAAM,YAAY;AAClB,YAAM,YAAY,KAAK,IAAI,cAAc,SAAS;AAClD,WAAK,aAAa,MAAM,SAAS,YAAY;AAAA,IAC/C;AAEA,SAAK,aAAa,iBAAiB,SAAS,UAAU;AACtD,SAAK,aAAa,iBAAiB,SAAS,MAAM;AAChD,WAAK,aAAa,MAAM,cAAc;AAAA,IACxC,CAAC;AACD,SAAK,aAAa,iBAAiB,QAAQ,MAAM;AAC/C,WAAK,aAAa,MAAM,cAAc;AAAA,IACxC,CAAC;AAED,SAAK,aAAa,iBAAiB,WAAW,CAAC,MAAM;AACnD,UAAI,EAAE,QAAQ,YAAY,EAAE,WAAW,EAAE,UAAU;AACjD,UAAE,eAAe;AACjB,aAAK,YAAY;AAAA,MACnB,WAAW,EAAE,QAAQ,WAAW,CAAC,EAAE,UAAU;AAC3C,UAAE,eAAe;AACjB,aAAK,YAAY;AAAA,MACnB;AAAA,IACF,CAAC;AAGD,SAAK,aAAa,UAAU,SAAS,UAAU;AAAA,MAC7C,KAAK;AAAA,IACP,CAAC;AACD,SAAK,WAAW,YAAY;AAC5B,SAAK,WAAW,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAehC,SAAK,WAAW,iBAAiB,cAAc,MAAM;AACnD,WAAK,WAAW,MAAM,YAAY;AAAA,IACpC,CAAC;AACD,SAAK,WAAW,iBAAiB,cAAc,MAAM;AACnD,WAAK,WAAW,MAAM,YAAY;AAAA,IACpC,CAAC;AAED,SAAK,WAAW,UAAU,MAAM,KAAK,YAAY;AAGjD,eAAW,YAAY,CAAC;AAAA,EAC1B;AAAA,EAEQ,kBAAkB,WAAwB;AAChD,cAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU1B,UAAM,gBAAgB,UAAU,SAAS,OAAO,EAAE,KAAK,iBAAiB,CAAC;AACzE,kBAAc,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAO9B,UAAM,eAAe,cAAc,SAAS,QAAQ,EAAE,MAAM,UAAU,CAAC;AACvE,iBAAa,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAM7B,UAAM,eAAe,cAAc,SAAS,QAAQ;AACpD,iBAAa,YAAY;AACzB,iBAAa,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW7B,iBAAa,QAAQ;AACrB,iBAAa,UAAU,MAAM,KAAK,mBAAmB;AAGrD,UAAM,qBAAqB,UAAU,SAAS,OAAO,EAAE,KAAK,oBAAoB,CAAC;AACjF,uBAAmB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnC,SAAK,mBAAmB;AAGxB,SAAK,mBAAmB,oBAAoB,yBAAyB;AACrE,SAAK,mBAAmB,mBAAmB,2BAA2B;AAGtE,iBAAa,iBAAiB,cAAc,MAAM;AAChD,mBAAa,MAAM,kBAAkB;AAAA,IACvC,CAAC;AACD,iBAAa,iBAAiB,cAAc,MAAM;AAChD,mBAAa,MAAM,kBAAkB;AAAA,IACvC,CAAC;AAAA,EACH;AAAA,EAIQ,mBAAmB,MAAc,MAAc;AACrD,QAAI,CAAC,KAAK;AAAkB;AAE5B,UAAM,UAAU,KAAK,iBAAiB,SAAS,OAAO,EAAE,KAAK,wBAAwB,CAAC;AACtF,YAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcxB,UAAM,UAAU,QAAQ,SAAS,MAAM;AACvC,YAAQ,YAAY;AACpB,YAAQ,MAAM,UAAU;AAExB,UAAM,UAAU,QAAQ,SAAS,QAAQ,EAAE,MAAM,KAAK,CAAC;AACvD,YAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAOxB,UAAM,YAAY,QAAQ,SAAS,UAAU,EAAE,MAAM,OAAI,CAAC;AAC1D,cAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB1B,YAAQ,UAAU,CAAC,MAAM;AACvB,UAAI,EAAE,WAAW,WAAW;AAE1B,gBAAQ,IAAI,qBAAqB,IAAI;AAAA,MACvC;AAAA,IACF;AAEA,cAAU,UAAU,CAAC,MAAM;AACzB,QAAE,gBAAgB;AAClB,cAAQ,OAAO;AAAA,IACjB;AAGA,YAAQ,iBAAiB,cAAc,MAAM;AAC3C,cAAQ,MAAM,kBAAkB;AAAA,IAClC,CAAC;AACD,YAAQ,iBAAiB,cAAc,MAAM;AAC3C,cAAQ,MAAM,kBAAkB;AAAA,IAClC,CAAC;AAED,cAAU,iBAAiB,cAAc,MAAM;AAC7C,gBAAU,MAAM,kBAAkB;AAClC,gBAAU,MAAM,QAAQ;AAAA,IAC1B,CAAC;AACD,cAAU,iBAAiB,cAAc,MAAM;AAC7C,gBAAU,MAAM,kBAAkB;AAClC,gBAAU,MAAM,QAAQ;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA,EAEQ,qBAAqB;AAE3B,UAAM,UAAU,KAAK,YAAY,SAAS,OAAO,EAAE,KAAK,0BAA0B,CAAC;AACnF,YAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaxB,UAAM,QAAQ,QAAQ,SAAS,OAAO,EAAE,KAAK,wBAAwB,CAAC;AACtE,UAAM,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUtB,UAAM,SAAS,MAAM,SAAS,KAAK;AACnC,WAAO,MAAM,UAAU;AACvB,WAAO,SAAS,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAEjD,UAAM,cAAc,OAAO,SAAS,UAAU,EAAE,MAAM,OAAI,CAAC;AAC3D,gBAAY,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO5B,gBAAY,UAAU,MAAM,QAAQ,OAAO;AAG3C,UAAM,cAAc,MAAM,SAAS,SAAS;AAAA,MAC1C,MAAM;AAAA,MACN,aAAa;AAAA,IACf,CAAC;AACD,gBAAY,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW5B,UAAM,UAAU,MAAM,SAAS,KAAK;AAGpC,UAAM,QAAQ,KAAK,IAAI,MAAM,iBAAiB;AAC9C,UAAM,cAAc,MAAM,MAAM,GAAG,EAAE;AAErC,gBAAY,QAAQ,UAAQ;AAC1B,YAAM,UAAU,QAAQ,SAAS,KAAK;AACtC,cAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWxB,cAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAMiB,KAAK,QAAQ;AAAA,oEACY,KAAK,IAAI;AAAA;AAAA;AAIvE,cAAQ,UAAU,MAAM;AACtB,aAAK,mBAAmB,KAAK,WAAW,OAAO,KAAK,IAAI;AACxD,gBAAQ,OAAO;AAAA,MACjB;AAEA,cAAQ,iBAAiB,cAAc,MAAM;AAC3C,gBAAQ,MAAM,kBAAkB;AAAA,MAClC,CAAC;AACD,cAAQ,iBAAiB,cAAc,MAAM;AAC3C,gBAAQ,MAAM,kBAAkB;AAAA,MAClC,CAAC;AAAA,IACH,CAAC;AAED,YAAQ,UAAU,CAAC,MAAM;AACvB,UAAI,EAAE,WAAW;AAAS,gBAAQ,OAAO;AAAA,IAC3C;AAGA,gBAAY,MAAM;AAAA,EACpB;AAAA,EAEA,MAAc,cAAc;AAC1B,UAAM,UAAU,KAAK,aAAa,MAAM,KAAK;AAC7C,QAAI,CAAC;AAAS;AAGd,UAAM,eAAe,KAAK,gBAAgB;AAE1C,SAAK,aAAa,QAAQ;AAC1B,SAAK,WAAW,WAAW;AAC3B,SAAK,WAAW,YAAY;AAG5B,QAAI,KAAK,iBAAiB;AACxB,WAAK,gBAAgB,MAAM,aAAa;AAAA,IAC1C;AAEA,QAAI;AAEF,YAAM,KAAK,OAAO,YAAY,SAAS,YAAY;AACnD,WAAK,QAAQ;AAAA,IACf,SAAS,OAAO;AACd,cAAQ,MAAM,0BAA0B,KAAK;AAC7C,UAAI,OAAO,UAAU,MAAM,OAAO,EAAE;AAAA,IACtC,UAAE;AACA,WAAK,WAAW,WAAW;AAC3B,WAAK,WAAW,YAAY;AAG5B,WAAK,sBAAsB;AAAA,IAC7B;AAAA,EACF;AAAA,EAEA,UAAU;AACR,SAAK,oBAAoB;AACzB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEQ,sBAAsB;AAI5B,QAAI,CAAC,KAAK;AAAY;AAGtB,QAAI,KAAK,OAAO,SAAS,aAAa;AACpC,WAAK,WAAW,QAAQ,KAAK,OAAO,SAAS;AAAA,IAC/C;AAAA,EACF;AAAA,EAEA,MAAc,iBAAiB;AAC7B,SAAK,cAAc,MAAM;AAEzB,QAAI,CAAC,KAAK,OAAO,kBAAkB,KAAK,OAAO,eAAe,SAAS,WAAW,GAAG;AACnF,YAAM,aAAa,KAAK,cAAc,SAAS,OAAO;AAAA,QACpD,KAAK;AAAA,QACL,MAAM;AAAA,MACR,CAAC;AACD,iBAAW,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAM3B;AAAA,IACF;AAEA,eAAW,WAAW,KAAK,OAAO,eAAe,UAAU;AACzD,YAAM,KAAK,cAAc,OAAO;AAAA,IAClC;AAGA,SAAK,cAAc,YAAY,KAAK,cAAc;AAAA,EACpD;AAAA,EAEA,MAAc,cAAc,SAAsB;AAChD,UAAM,YAAY,KAAK,cAAc,SAAS,OAAO;AAAA,MACnD,KAAK,6BAA6B,QAAQ,IAAI;AAAA,IAChD,CAAC;AAED,UAAM,SAAS,QAAQ,SAAS;AAChC,cAAU,MAAM,UAAU;AAAA;AAAA;AAAA,QAGtB,SAAS,+BAA+B,8BAA8B;AAAA;AAG1E,UAAM,SAAS,UAAU,SAAS,OAAO,EAAE,KAAK,sBAAsB,CAAC;AACvE,WAAO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,QAInB,SACE,yEACA,qEACJ;AAAA;AAAA;AAIF,QAAI,KAAK,OAAO,SAAS,kBAAkB,CAAC,QAAQ;AAElD,YAAM,YAAY,IAAI,2BAAU;AAChC,YAAM,kCAAiB;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,OAAO;AACL,aAAO,cAAc,QAAQ;AAAA,IAC/B;AAEA,QAAI,KAAK,OAAO,SAAS,gBAAgB;AACvC,YAAM,YAAY,UAAU,SAAS,OAAO;AAAA,QAC1C,KAAK;AAAA,QACL,MAAM,IAAI,KAAK,QAAQ,SAAS,EAAE,mBAAmB;AAAA,MACvD,CAAC;AACD,gBAAU,MAAM,UAAU;AAAA;AAAA;AAAA,sBAGV,SAAS,SAAS,GAAG,MAAM,SAAS,MAAM,MAAM;AAAA,sBAChD,SAAS,aAAa,YAAY;AAAA;AAAA,IAEpD;AAAA,EACF;AAAA,EAEQ,aAAa;AACnB,UAAM,YAAY,KAAK;AACvB,cAAU,YAAY,iBAAiB,iBAAiB,eAAe;AACvE,cAAU,SAAS,SAAS,KAAK,OAAO,SAAS,KAAK,EAAE;AAExD,QAAI,KAAK,OAAO,SAAS,UAAU,WAAW;AAC5C,WAAK,cAAc,MAAM,WAAW;AACpC,WAAK,aAAa,MAAM,YAAY;AAAA,IACtC,WAAW,KAAK,OAAO,SAAS,UAAU,WAAW;AACnD,WAAK,cAAc,MAAM,WAAW;AACpC,WAAK,aAAa,MAAM,YAAY;AAAA,IACtC;AAAA,EACF;AAAA,EAEQ,wBAAwB;AAlvBlC;AAmvBI,QAAI,CAAC,KAAK;AAAiB;AAG3B,UAAM,qBAAqB,CAAC,GAAC,YAAO,YAAP,mBAAgB;AAC7C,UAAM,gBAAgB,CAAC,GAAC,YAAO,gBAAP,mBAAoB;AAG5C,UAAM,iBAAiB,KAAK,gBAAgB,aAAa,aAAa;AAEtE,QAAI,SAAS;AACb,QAAI,QAAQ;AAEZ,QAAI,CAAC,sBAAsB,CAAC,eAAe;AACzC,eAAS;AACT,cAAQ;AAAA,IACV,WAAW,CAAC,sBAAsB,CAAC,eAAe;AAChD,eAAS;AACT,cAAQ;AAAA,IACV;AAEA,SAAK,gBAAgB,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA,oBAIrB,KAAK;AAAA;AAGrB,SAAK,gBAAgB;AAAA,MAAa;AAAA,MAChC,WAAW,UAAU,sBACrB,WAAW,YAAY,8BACvB;AAAA,IACF;AAEA,SAAK,gBAAgB,aAAa,eAAe,MAAM;AAGvD,QAAI,mBAAmB,UAAU,oBAAoB;AACnD,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AAAA,EAEQ,qBAAqB;AAE3B,UAAM,UAAU,KAAK,YAAY,SAAS,OAAO,EAAE,KAAK,0BAA0B,CAAC;AACnF,YAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaxB,UAAM,QAAQ,QAAQ,SAAS,OAAO,EAAE,KAAK,wBAAwB,CAAC;AACtE,UAAM,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUtB,UAAM,SAAS,MAAM,SAAS,KAAK;AACnC,WAAO,MAAM,UAAU;AACvB,WAAO,SAAS,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAE/C,UAAM,cAAc,OAAO,SAAS,UAAU,EAAE,MAAM,OAAI,CAAC;AAC3D,gBAAY,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO5B,gBAAY,UAAU,MAAM,QAAQ,OAAO;AAG3C,UAAM,eAAe,MAAM,SAAS,KAAK;AACzC,UAAM,WAAW,KAAK,OAAO,gBAAgB;AAE7C,aAAS,QAAQ,aAAW;AAz0BhC;AA00BM,YAAM,cAAc,aAAa,SAAS,KAAK;AAC/C,kBAAY,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW5B,YAAI,UAAK,OAAO,mBAAZ,mBAA4B,QAAO,QAAQ,IAAI;AACjD,oBAAY,MAAM,kBAAkB;AAAA,MACtC;AAEA,YAAM,cAAc,YAAY,SAAS,KAAK;AAC9C,kBAAY,SAAS,OAAO,EAAE,MAAM,QAAQ,OAAO,KAAK,gBAAgB,CAAC;AACzE,YAAM,iBAAe,aAAQ,aAAR,mBAAkB,WAAU;AACjD,kBAAY,SAAS,OAAO;AAAA,QAC1B,MAAM,GAAG,YAAY;AAAA,QACrB,KAAK;AAAA,MACP,CAAC,EAAE,MAAM,UAAU;AAEnB,YAAM,YAAY,YAAY,SAAS,UAAU,EAAE,MAAM,YAAK,CAAC;AAC/D,gBAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAO1B,kBAAY,UAAU,CAAC,MAAM;AAC3B,YAAI,EAAE,WAAW;AAAW;AAC5B,aAAK,OAAO,kBAAkB,QAAQ,EAAE;AACxC,aAAK,QAAQ;AACb,gBAAQ,OAAO;AAAA,MACjB;AAEA,gBAAU,UAAU,CAAC,MAAM;AACzB,UAAE,gBAAgB;AAClB,aAAK,OAAO,cAAc,QAAQ,EAAE;AACpC,gBAAQ,OAAO;AACf,aAAK,mBAAmB;AAAA,MAC1B;AAAA,IACF,CAAC;AAGD,UAAM,gBAAgB,MAAM,SAAS,UAAU,EAAE,MAAM,gBAAgB,CAAC;AACxE,kBAAc,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU9B,kBAAc,UAAU,MAAM;AAC5B,WAAK,OAAO,eAAe;AAC3B,WAAK,QAAQ;AACb,cAAQ,OAAO;AAAA,IACjB;AAEA,YAAQ,UAAU,CAAC,MAAM;AACvB,UAAI,EAAE,WAAW;AAAS,gBAAQ,OAAO;AAAA,IAC3C;AAAA,EACF;AAAA,EAEA,kBAA0B;AAh5B5B;AAi5BI,aAAO,UAAK,eAAL,mBAAiB,UAAS;AAAA,EACnC;AAAA,EAEA,QAAQ,MAAoB;AAC1B,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW,QAAQ;AAAA,IAC1B;AAAA,EACF;AAAA,EAEA,MAAM,UAAU;AAAA,EAEhB;AACF;;;ACp5BO,IAAM,oBAAN,MAAwB;AAAA,EAG7B,YAAY,UAAgC;AAC1C,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,eAAe,UAAgC;AAC7C,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,YAAY,UAAyB,SAAmC;AApBhF;AAqBI,UAAM,WAAW,KAAK,YAAY,KAAK,SAAS,eAAe;AAC/D,QAAI,CAAC,UAAU;AACb,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAEA,QAAI,CAAC,SAAS,QAAQ;AACpB,YAAM,IAAI,MAAM,8BAA8B,SAAS,IAAI,EAAE;AAAA,IAC/D;AAGA,UAAM,kBAAkB,KAAK,qBAAqB,UAAU,OAAO;AAEnE,QAAI;AACF,UAAI,SAAS,OAAO,cAAY,cAAS,YAAT,mBAAkB,SAAS,YAAW;AACpE,eAAO,MAAM,KAAK,kBAAkB,UAAU,eAAe;AAAA,MAC/D,WAAW,SAAS,OAAO,iBAAe,cAAS,YAAT,mBAAkB,SAAS,eAAc;AACjF,eAAO,MAAM,KAAK,qBAAqB,UAAU,eAAe;AAAA,MAClE,OAAO;AAEL,eAAO,MAAM,KAAK,kBAAkB,UAAU,eAAe;AAAA,MAC/D;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,sBAAsB,KAAK;AACzC,YAAM,IAAI,MAAM,uBAAuB,MAAM,OAAO,EAAE;AAAA,IACxD;AAAA,EACF;AAAA,EAEQ,qBAAqB,UAAyB,SAAyB;AAC7E,UAAM,kBAAyB,CAAC;AAGhC,QAAI,SAAS;AACX,sBAAgB,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,SAAS;AAAA;AAAA,EAA2C,OAAO;AAAA;AAAA;AAAA,MAC7D,CAAC;AAAA,IACH;AAGA,eAAW,WAAW,UAAU;AAC9B,UAAI,QAAQ,SAAS,UAAU;AAC7B,wBAAgB,KAAK;AAAA,UACnB,MAAM,QAAQ;AAAA,UACd,SAAS,QAAQ;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,kBAAkB,UAAsB,UAAkC;AACtF,UAAM,UAAU,SAAS,WAAW;AACpC,UAAM,MAAM,GAAG,OAAO;AAEtB,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB,UAAU,SAAS,MAAM;AAAA,MAC5C;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,SAAS;AAAA,QAChB;AAAA,QACA,YAAY,KAAK,SAAS;AAAA,QAC1B,aAAa,KAAK,SAAS;AAAA,QAC3B,QAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,YAAM,IAAI,MAAM,QAAQ,SAAS,MAAM,KAAK,KAAK,EAAE;AAAA,IACrD;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,QAAQ,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC,EAAE,SAAS;AACjE,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC5D;AAEA,WAAO,KAAK,QAAQ,CAAC,EAAE,QAAQ;AAAA,EACjC;AAAA,EAEA,MAAc,qBAAqB,UAAsB,UAAkC;AACzF,UAAM,UAAU,SAAS,WAAW;AACpC,UAAM,MAAM,GAAG,OAAO;AAGtB,UAAM,iBAAiB,SAAS,OAAO,OAAK,EAAE,SAAS,QAAQ;AAC/D,UAAM,uBAAuB,SAAS,OAAO,OAAK,EAAE,SAAS,QAAQ;AAErE,UAAM,eAAe,eAAe,IAAI,OAAK,EAAE,OAAO,EAAE,KAAK,MAAM;AAEnE,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,aAAa,SAAS;AAAA,QACtB,qBAAqB;AAAA,MACvB;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,SAAS;AAAA,QAChB,YAAY,KAAK,SAAS;AAAA,QAC1B,aAAa,KAAK,SAAS;AAAA,QAC3B,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,YAAM,IAAI,MAAM,QAAQ,SAAS,MAAM,KAAK,KAAK,EAAE;AAAA,IACrD;AAEA,UAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,QAAI,CAAC,KAAK,WAAW,CAAC,KAAK,QAAQ,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC,EAAE,MAAM;AAC9D,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAEA,WAAO,KAAK,QAAQ,CAAC,EAAE;AAAA,EACzB;AAAA,EAEQ,YAAY,YAA4C;AAC9D,WAAO,KAAK,SAAS,UAAU,KAAK,OAAK,EAAE,OAAO,UAAU;AAAA,EAC9D;AAAA,EAEA,eAA6B;AAC3B,WAAO,CAAC,GAAG,KAAK,SAAS,SAAS;AAAA,EACpC;AAAA,EAEA,iBAAiB,UAA0D;AACzE,QAAI,CAAC,SAAS,QAAQ,CAAC,SAAS,OAAO;AACrC,aAAO,EAAE,OAAO,OAAO,OAAO,uCAAuC;AAAA,IACvE;AAEA,QAAI,CAAC,SAAS,QAAQ;AACpB,aAAO,EAAE,OAAO,OAAO,OAAO,sBAAsB;AAAA,IACtD;AAGA,QAAI,SAAS,SAAS;AACpB,UAAI;AACF,YAAI,IAAI,SAAS,OAAO;AAAA,MAC1B,SAAQ;AACN,eAAO,EAAE,OAAO,OAAO,OAAO,0BAA0B;AAAA,MAC1D;AAAA,IACF;AAEA,WAAO,EAAE,OAAO,KAAK;AAAA,EACvB;AACF;;;AJhJA,IAAM,mBAAyC;AAAA,EAC7C,iBAAiB;AAAA,EACjB,WAAW;AAAA,IACT;AAAA,MACE,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,IACV;AAAA,EACF;AAAA,EACA,cAAc;AAAA,EACd,eAAe;AAAA,EACf,cAAc;AAAA,EACd,WAAW;AAAA,EACX,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,OAAO;AACT;AAEA,IAAqB,qBAArB,cAAgD,wBAAO;AAAA,EAAvD;AAAA;AAGE,0BAAqC;AACrC,wBAAyC,oBAAI,IAAI;AAAA;AAAA,EAEjD,MAAM,SAAS;AACb,UAAM,KAAK,aAAa;AAExB,SAAK,oBAAoB,IAAI,kBAAkB,KAAK,QAAQ;AAG5D,SAAK,oBAAoB;AAGzB,SAAK,aAAa,gBAAgB,CAAC,SAAS,IAAI,SAAS,MAAM,IAAI,CAAC;AAGpE,SAAK,YAAY;AAGjB,SAAK,cAAc,kBAAkB,qBAAqB,MAAM;AAC9D,WAAK,SAAS;AAAA,IAChB,CAAC;AAGD,SAAK,cAAc,IAAI,wBAAwB,KAAK,KAAK,IAAI,CAAC;AAG9D,UAAM,KAAK,iBAAiB;AAG5B,SAAK,yBAAyB;AAE9B,YAAQ,IAAI,4BAA4B;AAAA,EAC1C;AAAA,EAEA,WAAW;AACT,SAAK,iBAAiB;AACtB,YAAQ,IAAI,8BAA8B;AAAA,EAC5C;AAAA,EAEA,MAAM,eAAe;AACnB,SAAK,WAAW,OAAO,OAAO,CAAC,GAAG,kBAAkB,MAAM,KAAK,SAAS,CAAC;AAAA,EAC3E;AAAA,EAEA,MAAM,eAAe;AACnB,UAAM,KAAK,SAAS,KAAK,QAAQ;AACjC,QAAI,KAAK,mBAAmB;AAC1B,WAAK,kBAAkB,eAAe,KAAK,QAAQ;AAAA,IACrD;AAAA,EACF;AAAA,EAEQ,sBAAsB;AAC5B,QAAI,CAAC,OAAO,aAAa;AACvB,aAAO,cAAc,CAAC;AAAA,IACxB;AAEA,WAAO,YAAY,OAAO;AAAA,MACxB,UAAU,MAAM,KAAK,SAAS;AAAA,MAC9B,aAAa,CAAC,SAAiB,YAAqB,KAAK,YAAY,SAAS,OAAO;AAAA,MACrF,mBAAmB,MAAM,KAAK;AAAA,IAChC;AAAA,EACF;AAAA,EAEQ,mBAAmB;AACzB,QAAI,OAAO,eAAe,OAAO,YAAY,MAAM;AACjD,aAAO,OAAO,YAAY;AAAA,IAC5B;AAAA,EACF;AAAA,EAEQ,cAAc;AACpB,SAAK,WAAW;AAAA,MACd,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,MAAM,KAAK,SAAS;AAAA,IAChC,CAAC;AAED,SAAK,WAAW;AAAA,MACd,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,MAAM,KAAK,eAAe;AAAA,IACtC,CAAC;AAED,SAAK,WAAW;AAAA,MACd,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,gBAAgB,CAAC,WAAW;AAC1B,cAAM,YAAY,OAAO,aAAa;AACtC,YAAI,WAAW;AACb,eAAK,kBAAkB,SAAS;AAAA,QAClC,OAAO;AACL,cAAI,wBAAO,kBAAkB;AAAA,QAC/B;AAAA,MACF;AAAA,IACF,CAAC;AAED,SAAK,WAAW;AAAA,MACd,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,MAAM,KAAK,UAAU;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,WAAW;AACf,UAAM,eAAe,KAAK,IAAI,UAAU,gBAAgB,cAAc,EAAE,CAAC;AAEzE,QAAI,cAAc;AAChB,WAAK,IAAI,UAAU,WAAW,YAAY;AAC1C;AAAA,IACF;AAEA,QAAI;AAEF,YAAM,OAAO,KAAK,IAAI,UAAU,aAAa,KAAK;AAElD,UAAI,MAAM;AACR,cAAM,KAAK,aAAa;AAAA,UACtB,MAAM;AAAA,UACN,QAAQ;AAAA,QACV,CAAC;AACD,aAAK,IAAI,UAAU,WAAW,IAAI;AAClC;AAAA,MACF;AAGA,YAAM,YAAY,KAAK,IAAI,UAAU,QAAQ,SAAS,OAAO;AAC7D,UAAI,WAAW;AACb,cAAM,UAAU,aAAa;AAAA,UAC3B,MAAM;AAAA,UACN,QAAQ;AAAA,QACV,CAAC;AACD,aAAK,IAAI,UAAU,WAAW,SAAS;AACvC;AAAA,MACF;AAEA,cAAQ,MAAM,uCAAuC;AAAA,IAEvD,SAAS,OAAO;AACd,cAAQ,MAAM,4BAA4B,KAAK;AAAA,IACjD;AAAA,EACF;AAAA,EAEA,iBAAiB;AACf,SAAK,iBAAiB;AAAA,MACpB,IAAI,WAAW;AAAA,MACf,OAAO,SAAQ,oBAAI,KAAK,GAAE,mBAAmB,CAAC;AAAA,MAC9C,UAAU,CAAC;AAAA,MACX,WAAW,KAAK,IAAI;AAAA,MACpB,WAAW,KAAK,IAAI;AAAA,IACtB;AAEA,SAAK,aAAa,IAAI,KAAK,eAAe,IAAI,KAAK,cAAc;AACjE,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,MAAM,kBAAkB,cAAsB;AAC5C,UAAM,KAAK,SAAS;AAEpB,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,eAAe;AAAA,IACtB;AAEA,UAAM,iBAAiB;AAAA;AAAA,EAAoD,YAAY;AAAA;AAAA;AACvF,UAAM,KAAK,YAAY,cAAc;AAAA,EACvC;AAAA,EAEA,MAAM,YAAY;AAChB,UAAM,QAAQ,IAAI,eAAe,KAAK,KAAK,OAAO,YAAoB;AACpE,UAAI,CAAC,KAAK,gBAAgB;AACxB,aAAK,eAAe;AAAA,MACtB;AACA,YAAM,KAAK,YAAY,OAAO;AAAA,IAChC,CAAC;AACD,UAAM,KAAK;AAAA,EACb;AAAA,EAEA,MAAM,YAAY,SAAiB,cAAuB,SAAiC;AAnO7F;AAoOI,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,eAAe;AAAA,IACtB;AAEA,QAAI,CAAC,KAAK;AAAgB;AAG1B,UAAM,gBAAgB,KAAK,mBAAmB,OAAO;AAGrD,QAAI,gBAAgB,iBAAiB,QAAQ;AAC3C,oBAAc,OAAO;AAAA,IACvB;AAGA,UAAM,cAA2B;AAAA,MAC/B,IAAI,WAAW;AAAA,MACf,MAAM;AAAA,MACN;AAAA,MACA,WAAW,KAAK,IAAI;AAAA,MACpB,UAAU;AAAA,QACR,QAAQ,cAAc;AAAA,QACtB,eAAe,cAAc;AAAA,QAC7B;AAAA,QACA,cAAc,CAAC,CAAC,cAAc;AAAA,MAChC;AAAA,IACF;AAEA,SAAK,eAAe,SAAS,KAAK,WAAW;AAG7C,QAAI,cAAc;AAClB,QAAI,CAAC,eAAe,KAAK,SAAS,eAAe,GAAG;AAClD,oBAAc,MAAM,KAAK,mBAAmB;AAAA,IAC9C;AAEA,QAAI;AAEF,UAAI,gBAAgB,iBAAiB,QAAQ;AAE3C,cAAM,KAAK,2BAA2B,eAAe,WAAW;AAAA,MAClE,WAAW,cAAc,WAAW,UAAU,cAAc,WAAW,WAAW;AAEhF,cAAM,KAAK,2BAA2B,eAAe,WAAW;AAAA,MAClE,OAAO;AAEL,cAAM,KAAK,sBAAsB,eAAe,WAAW;AAAA,MAC7D;AAEA,WAAK,eAAe,YAAY,KAAK,IAAI;AAEzC,UAAI,KAAK,SAAS,eAAe;AAC/B,cAAM,KAAK,iBAAiB;AAAA,MAC9B;AAGA,WAAK,gBAAgB;AAGrB,WAAI,YAAO,YAAP,mBAAgB,QAAQ;AAC1B,eAAO,QAAQ,OAAO,KAAK,uBAAuB;AAAA,UAChD,WAAW,YAAY;AAAA,UACvB,UAAU,KAAK,eAAe,SAAS,KAAK,eAAe,SAAS,SAAS,CAAC;AAAA,QAChF,CAAC;AAAA,MACH;AAAA,IAEF,SAAS,OAAO;AACd,UAAI,wBAAO,0BAA0B,MAAM,OAAO,EAAE;AACpD,cAAQ,MAAM,eAAe,KAAK;AAGlC,YAAM,eAA4B;AAAA,QAChC,IAAI,WAAW;AAAA,QACf,MAAM;AAAA,QACN,SAAS,2BAA2B,MAAM,OAAO;AAAA,QACjD,WAAW,KAAK,IAAI;AAAA,QACpB,UAAU;AAAA,UACR,OAAO;AAAA,UACP,cAAc,MAAM;AAAA,QACtB;AAAA,MACF;AAEA,WAAK,eAAe,SAAS,KAAK,YAAY;AAC9C,WAAK,gBAAgB;AAAA,IACvB;AAAA,EACF;AAAA;AAAA,EAEQ,mBAAmB,SAAgC;AACzD,UAAM,eAAe,QAAQ,YAAY;AAGzC,UAAM,iBAAiB,QAAQ,MAAM,4BAA4B;AACjE,UAAM,aAAY,iDAAiB,QAAM,iDAAiB;AAG1D,UAAM,YAAY,QAAQ,MAAM,qGAAqG;AACrI,UAAM,gBAAgB,uCAAY;AAGlC,QAAI,SAAkD;AAEtD,QAAI,aAAa,SAAS,MAAM,KAAK,aAAa,SAAS,KAAK,KAAK,aAAa,SAAS,SAAS,GAAG;AACrG,eAAS;AAAA,IACX,WAAW,aAAa,SAAS,SAAS,KAAK,aAAa,SAAS,SAAS,KAAK,aAAa,SAAS,SAAS,GAAG;AACnH,eAAS;AAAA,IACX,WAAW,aAAa,SAAS,SAAS,KAAK,aAAa,SAAS,QAAQ,KAAK,aAAa,SAAS,OAAO,GAAG;AAChH,eAAS;AAAA,IACX;AAEA,WAAO;AAAA,MACL,iBAAiB;AAAA,MACjB;AAAA,MACA,MAAM,iBAAiB,KAAK,SAAS,eAAe;AAAA,MACpD;AAAA,MACA,mBAAmB,WAAW;AAAA,IAChC;AAAA,EACF;AAAA,EAEA,MAAc,2BAA2B,eAA8B,SAAiC;AA1V1G;AA4VI,QAAI,GAAC,YAAO,YAAP,mBAAgB,YAAW;AAC9B,YAAM,IAAI,MAAM,yFAAyF;AAAA,IAC3G;AAGA,QAAI,OAAO,QAAQ,QAAQ;AACzB,aAAO,QAAQ,OAAO,KAAK,2BAA2B;AAAA,QACpD,WAAW,KAAK,eAAgB,SAAS,KAAK,eAAgB,SAAS,SAAS,CAAC,EAAE;AAAA,QACnF,SAAS,KAAK,eAAgB,SAAS,KAAK,eAAgB,SAAS,SAAS,CAAC;AAAA,QAC/E,MAAM,cAAc;AAAA,MACtB,CAAC;AAAA,IACH;AAEA,QAAI;AAEF,YAAM,UAAyB;AAAA,QAC7B,IAAI,WAAW;AAAA,QACf,MAAM,cAAc,aAAa,WAAW,cAAc;AAAA,QAC1D,cAAc,cAAc,aAAa;AAAA,QACzC,MAAM,cAAc;AAAA,QACpB,aAAa,MAAM,KAAK,sBAAsB,cAAc,IAAI;AAAA,QAChE,UAAU;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ,cAAc;AAAA,UACtB,WAAW,KAAK,IAAI;AAAA,UACpB,WAAW,KAAK,eAAgB;AAAA,QAClC;AAAA,MACF;AAGA,YAAM,SAAS,MAAM,OAAO,QAAQ,UAAU,QAAQ,OAAO;AAE7D,UAAI,OAAO,SAAS;AAElB,cAAM,mBAAgC;AAAA,UACpC,IAAI,WAAW;AAAA,UACf,MAAM;AAAA,UACN,SAAS,KAAK,8BAA8B,QAAQ,aAAa;AAAA,UACjE,WAAW,KAAK,IAAI;AAAA,UACpB,UAAU;AAAA,YACR,uBAAuB;AAAA,YACvB,OAAO,OAAO;AAAA,YACd,MAAM,cAAc;AAAA,YACpB,gBAAgB,OAAO;AAAA,UACzB;AAAA,QACF;AAEA,aAAK,eAAgB,SAAS,KAAK,gBAAgB;AAAA,MACrD,OAAO;AACL,cAAM,IAAI,MAAM,wCAAuC,YAAO,WAAP,mBAAe,IAAI,OAAK,EAAE,SAAS,KAAK,KAAK,EAAE;AAAA,MACxG;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,sCAAsC,KAAK;AACzD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAc,sBAAsB,eAA8B,SAAiC;AAEjG,UAAM,WAAW,MAAM,KAAK,kBAAkB;AAAA,MAC5C,KAAK,eAAgB;AAAA,MACrB;AAAA,IACF;AAEA,UAAM,mBAAgC;AAAA,MACpC,IAAI,WAAW;AAAA,MACf,MAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAW,KAAK,IAAI;AAAA,MACpB,UAAU;AAAA,QACR,UAAU,KAAK,SAAS;AAAA,QACxB,OAAO,KAAK,SAAS;AAAA,MACvB;AAAA,IACF;AAEA,SAAK,eAAgB,SAAS,KAAK,gBAAgB;AAAA,EACrD;AAAA,EAEQ,8BAA8B,QAAa,eAAsC;AA1a3F;AA2aI,QAAI,WAAW;AAGf,gBAAY,KAAK,cAAc,KAAK,QAAQ,KAAK,GAAG,EAAE,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC,CAAC;AAAA;AAAA;AAE5F,SAAI,YAAO,WAAP,mBAAe,eAAe;AAChC,kBAAY;AACZ,kBAAY,KAAK,OAAO,OAAO,aAAa;AAAA;AAAA;AAAA,IAC9C;AAEA,UAAI,YAAO,WAAP,mBAAe,YAAW,OAAO,OAAO,QAAQ,SAAS,GAAG;AAC9D,kBAAY;AACZ,iBAAW,UAAU,OAAO,OAAO,QAAQ,MAAM,GAAG,CAAC,GAAG;AACtD,oBAAY,OAAO,OAAO,IAAI,kBAAkB,OAAO,IAAI,IAAI,OAAO,EAAE,MAAM,OAAO,QAAQ,OAAO,WAAW;AAAA;AAAA,MACjH;AAEA,UAAI,OAAO,OAAO,QAAQ,SAAS,GAAG;AACpC,oBAAY,cAAc,OAAO,OAAO,QAAQ,SAAS,CAAC;AAAA;AAAA,MAC5D;AACA,kBAAY;AAAA,IACd;AAEA,SAAI,YAAO,aAAP,mBAAiB,mBAAmB;AACtC,kBAAY,gFAAgF,OAAO,SAAS,iBAAiB;AAAA;AAAA;AAC7H,kBAAY;AAAA,IACd;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,sBAAsB,MAA4B;AAzclE;AA2cI,SAAI,YAAO,YAAP,mBAAgB,WAAW;AAC7B,YAAM,iBAAiB,OAAO,QAAQ,UAAU,QAAQ,IAAI;AAC5D,cAAO,iDAAgB,gBAAe,CAAC;AAAA,IACzC;AACA,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,MAAc,qBAAkD;AAldlE;AAmdI,UAAM,aAAa,KAAK,IAAI,UAAU,cAAc;AACpD,QAAI,CAAC;AAAY,aAAO;AAExB,QAAI;AACF,YAAM,UAAU,MAAM,KAAK,IAAI,MAAM,KAAK,UAAU;AACpD,YAAM,QAAQ,QAAQ,MAAM,IAAI;AAEhC,UAAI,MAAM,UAAU,KAAK,SAAS,eAAe,GAAG;AAClD,eAAO;AAAA,MACT;AAGA,YAAM,UAAS,UAAK,IAAI,UAAU,oBAAoB,QAAQ,UAAU,EAAE,YAAY,MAAvE,mBAA0E;AACzF,UAAI,QAAQ;AACV,cAAM,SAAS,OAAO,UAAU;AAChC,cAAM,QAAQ,KAAK,IAAI,GAAG,OAAO,OAAO,KAAK,SAAS,YAAY;AAClE,cAAM,MAAM,KAAK,IAAI,MAAM,QAAQ,OAAO,OAAO,KAAK,SAAS,YAAY;AAC3E,eAAO,MAAM,MAAM,OAAO,GAAG,EAAE,KAAK,IAAI;AAAA,MAC1C;AAEA,aAAO,MAAM,MAAM,GAAG,KAAK,SAAS,YAAY,EAAE,KAAK,IAAI;AAAA,IAC7D,SAAS,OAAO;AACd,cAAQ,MAAM,mCAAmC,KAAK;AACtD,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,kBAAkB;AACxB,UAAM,WAAW,KAAK,IAAI,UAAU,gBAAgB,cAAc,EAAE,CAAC;AACrE,QAAI,YAAY,SAAS,gBAAgB,UAAU;AACjD,eAAS,KAAK,QAAQ;AAAA,IACxB;AAAA,EACF;AAAA,EAEQ,2BAA2B;AArfrC;AAufI,eAAW,MAAM;AAvfrB,UAAAC;AAwfM,WAAIA,MAAA,OAAO,YAAP,gBAAAA,IAAgB,WAAW;AAC7B,aAAK,iBAAiB;AAAA,MACxB;AAAA,IACF,GAAG,GAAI;AAGP,SAAI,YAAO,YAAP,mBAAgB,QAAQ;AAC1B,aAAO,QAAQ,OAAO,GAAG,kBAAkB,CAAC,SAAc;AACxD,YAAI,KAAK,WAAW,oBAAoB;AACtC,kBAAQ,IAAI,qDAAqD;AACjE,eAAK,iBAAiB;AAAA,QACxB;AAAA,MACF,CAAC;AAED,aAAO,QAAQ,OAAO,GAAG,mBAAmB,MAAM;AAChD,aAAK,iBAAiB;AAAA,MACxB,CAAC;AAED,aAAO,QAAQ,OAAO,GAAG,gBAAgB,MAAM;AAC7C,aAAK,iBAAiB;AAAA,MACxB,CAAC;AAED,aAAO,QAAQ,OAAO,GAAG,gBAAgB,MAAM;AAC7C,aAAK,iBAAiB;AAAA,MACxB,CAAC;AAAA,IACH;AAGA,UAAM,gBAAgB,YAAY,MAAM;AAphB5C,UAAAA;AAqhBM,WAAIA,MAAA,OAAO,YAAP,gBAAAA,IAAgB,WAAW;AAC7B,aAAK,iBAAiB;AACtB,sBAAc,aAAa;AAAA,MAC7B;AAAA,IACF,GAAG,GAAI;AAGP,eAAW,MAAM;AACf,oBAAc,aAAa;AAAA,IAC7B,GAAG,GAAK;AAAA,EACV;AAAA,EAEQ,mBAAmB;AAEzB,UAAM,aAAa,KAAK,IAAI,UAAU,gBAAgB,cAAc;AACpE,eAAW,QAAQ,YAAY;AAC7B,UAAI,KAAK,gBAAgB,UAAU;AACjC,aAAK,KAAK,mBAAmB;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,mBAAmB;AACvB,QAAI;AACF,YAAM,OAAO,MAAM,KAAK,SAAS;AACjC,UAAI,QAAQ,KAAK,cAAc;AAC7B,mBAAW,WAAW,KAAK,cAAc;AACvC,eAAK,aAAa,IAAI,QAAQ,IAAI,OAAO;AAAA,QAC3C;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AAAA,IACtD;AAAA,EACF;AAAA,EAEA,MAAM,mBAAmB;AACvB,QAAI;AACF,YAAM,gBAAgB,MAAM,KAAK,KAAK,aAAa,OAAO,CAAC;AAC3D,YAAM,cAAc,MAAM,KAAK,SAAS,KAAK,CAAC;AAC9C,kBAAY,eAAe;AAC3B,YAAM,KAAK,SAAS,WAAW;AAAA,IACjC,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AAAA,IACtD;AAAA,EACF;AAAA,EAEA,kBAAiC;AAC/B,WAAO,MAAM,KAAK,KAAK,aAAa,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,YAAY,EAAE,SAAS;AAAA,EACxF;AAAA,EAEA,cAAc,WAAmB;AAC/B,SAAK,aAAa,OAAO,SAAS;AAClC,QAAI,KAAK,kBAAkB,KAAK,eAAe,OAAO,WAAW;AAC/D,WAAK,iBAAiB;AAAA,IACxB;AACA,SAAK,iBAAiB;AAAA,EACxB;AAAA,EAEA,kBAAkB,WAAmB;AACnC,UAAM,UAAU,KAAK,aAAa,IAAI,SAAS;AAC/C,QAAI,SAAS;AACX,WAAK,iBAAiB;AAAA,IACxB;AAAA,EACF;AACF;AAEA,IAAM,iBAAN,cAA6B,uBAAM;AAAA,EAIjC,YAAY,KAAU,UAA8C;AAClE,UAAM,GAAG;AACT,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,SAAS;AACP,UAAM,EAAE,UAAU,IAAI;AACtB,cAAU,MAAM;AAEhB,cAAU,SAAS,MAAM,EAAE,MAAM,aAAa,CAAC;AAE/C,SAAK,UAAU,UAAU,SAAS,YAAY;AAAA,MAC5C,MAAM;AAAA,QACJ,aAAa;AAAA,QACb,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AAED,UAAM,kBAAkB,UAAU,SAAS,OAAO;AAAA,MAChD,MAAM,EAAE,OAAO,yEAAyE;AAAA,IAC1F,CAAC;AAED,oBAAgB,SAAS,UAAU;AAAA,MACjC,MAAM;AAAA,MACN,MAAM,EAAE,OAAO,qBAAqB;AAAA,IACtC,CAAC,EAAE,UAAU,MAAM,KAAK,MAAM;AAE9B,UAAM,aAAa,gBAAgB,SAAS,UAAU;AAAA,MACpD,MAAM;AAAA,MACN,MAAM,EAAE,OAAO,4HAA4H;AAAA,IAC7I,CAAC;AAED,eAAW,UAAU,YAAY;AAC/B,YAAM,UAAU,KAAK,QAAQ,MAAM,KAAK;AACxC,UAAI,SAAS;AACX,cAAM,KAAK,SAAS,OAAO;AAC3B,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAEA,SAAK,QAAQ,MAAM;AAAA,EACrB;AAAA,EAEA,UAAU;AACR,UAAM,EAAE,UAAU,IAAI;AACtB,cAAU,MAAM;AAAA,EAClB;AACF;",
  "names": ["import_obsidian", "import_obsidian", "_a"]
}
