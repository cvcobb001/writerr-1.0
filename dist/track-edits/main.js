"use strict";var S=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var b=(n,t)=>{for(var e in t)S(n,e,{get:t[e],enumerable:!0})},D=(n,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of C(t))!x.call(n,s)&&s!==e&&S(n,s,{get:()=>t[s],enumerable:!(i=E(t,s))||i.enumerable});return n};var I=n=>D(S({},"__esModule",{value:!0}),n);var A={};b(A,{default:()=>m});module.exports=I(A);var y=require("obsidian");var o=require("obsidian"),l=class extends o.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Track Edits Settings"}),new o.Setting(t).setName("Enable tracking").setDesc("Automatically track edits when documents are modified").addToggle(e=>e.setValue(this.plugin.settings.enableTracking).onChange(async i=>{this.plugin.settings.enableTracking=i,await this.plugin.saveSettings(),i?this.plugin.startTracking():this.plugin.stopTracking()})),new o.Setting(t).setName("Show line numbers").setDesc("Display line numbers in the editor").addToggle(e=>e.setValue(this.plugin.settings.showLineNumbers).onChange(async i=>{this.plugin.settings.showLineNumbers=i,await this.plugin.saveSettings()})),new o.Setting(t).setName("Highlight changes").setDesc("Visually highlight recent changes in the editor").addToggle(e=>e.setValue(this.plugin.settings.highlightChanges).onChange(async i=>{this.plugin.settings.highlightChanges=i,await this.plugin.saveSettings()})),new o.Setting(t).setName("Data retention").setDesc("Number of days to keep edit history (0 = keep forever)").addSlider(e=>e.setLimits(0,365,1).setValue(this.plugin.settings.retentionDays).setDynamicTooltip().onChange(async i=>{this.plugin.settings.retentionDays=i,await this.plugin.saveSettings()})),new o.Setting(t).setName("Color scheme").setDesc("Choose the color scheme for change highlighting").addDropdown(e=>e.addOption("default","Default").addOption("colorblind","Colorblind friendly").addOption("dark","Dark theme optimized").setValue(this.plugin.settings.colorScheme).onChange(async i=>{this.plugin.settings.colorScheme=i,await this.plugin.saveSettings()})),new o.Setting(t).setName("Auto-save sessions").setDesc("Automatically save edit sessions as they occur").addToggle(e=>e.setValue(this.plugin.settings.autoSave).onChange(async i=>{this.plugin.settings.autoSave=i,await this.plugin.saveSettings()})),new o.Setting(t).setName("Export format").setDesc("Default format for exporting edit sessions").addDropdown(e=>e.addOption("json","JSON").addOption("csv","CSV").addOption("markdown","Markdown").setValue(this.plugin.settings.exportFormat).onChange(async i=>{this.plugin.settings.exportFormat=i,await this.plugin.saveSettings()})),t.createEl("h3",{text:"Actions"}),new o.Setting(t).setName("Export current session").setDesc("Export the current editing session").addButton(e=>e.setButtonText("Export").setCta().onClick(()=>{this.plugin.currentSession&&this.plugin.exportSession(this.plugin.currentSession.id)})),new o.Setting(t).setName("Clear all history").setDesc("Delete all stored edit history (cannot be undone)").addButton(e=>e.setButtonText("Clear").setWarning().onClick(()=>{this.plugin.clearEditHistory()}))}};function k(){return Math.random().toString(36).substr(2,9)}function T(n,t){let e;return(...i)=>{clearTimeout(e),e=setTimeout(()=>n(...i),t)}}function w(n){return n.trim().split(/\s+/).filter(t=>t.length>0).length}function v(n){return n.length}var h=class{constructor(t){this.sessions=new Map;this.activeSessions=new Map;this.plugin=t,this.loadSessions()}async loadSessions(){try{let t=await this.plugin.loadData();if(t&&t.sessions)for(let e of t.sessions)this.sessions.set(e.id,e)}catch(t){console.error("Failed to load edit sessions:",t)}}async saveSessions(){try{let t=Array.from(this.sessions.values());await this.plugin.saveData({sessions:t})}catch(t){console.error("Failed to save edit sessions:",t)}}startSession(t,e){this.sessions.set(t.id,t),this.activeSessions.set(t.id,e)}endSession(t){let e=this.sessions.get(t);e&&(e.endTime=Date.now(),this.activeSessions.delete(t),this.saveSessions())}recordChanges(t,e){let i=this.sessions.get(t);if(!i)return;i.changes.push(...e);let s=this.activeSessions.get(t);s&&this.updateSessionCounts(i,s)}async updateSessionCounts(t,e){try{let i=await this.plugin.app.vault.read(e);t.wordCount=w(i),t.characterCount=v(i)}catch(i){console.error("Failed to update session counts:",i)}}getSession(t){return this.sessions.get(t)}getSessionHistory(){return Array.from(this.sessions.values()).sort((t,e)=>e.startTime-t.startTime)}async saveSession(t){this.sessions.set(t.id,t),await this.saveSessions()}clearHistory(){this.sessions.clear(),this.activeSessions.clear(),this.saveSessions()}formatSessionForExport(t,e){switch(e){case"json":return JSON.stringify(t,null,2);case"csv":let i=`Timestamp,Type,From,To,Text,RemovedText
`;for(let a of t.changes){let f=[new Date(a.timestamp).toISOString(),a.type,a.from,a.to,`"${(a.text||"").replace(/"/g,'""')}"`,`"${(a.removedText||"").replace(/"/g,'""')}"`].join(",");i+=f+`
`}return i;case"markdown":let s=new Date(t.startTime).toLocaleString(),c=t.endTime?new Date(t.endTime).toLocaleString():"In progress",g=t.endTime?Math.round((t.endTime-t.startTime)/1e3/60)+" minutes":"In progress",r=`# Edit Session Report

`;if(r+=`- **Start:** ${s}
`,r+=`- **End:** ${c}
`,r+=`- **Duration:** ${g}
`,r+=`- **Changes:** ${t.changes.length}
`,r+=`- **Words:** ${t.wordCount}
`,r+=`- **Characters:** ${t.characterCount}

`,t.changes.length>0){r+=`## Changes

`;for(let a of t.changes){let f=new Date(a.timestamp).toLocaleTimeString();r+=`- **${f}** - ${a.type} at position ${a.from}-${a.to}
`,a.text&&(r+=`  - Added: "${a.text}"
`),a.removedText&&(r+=`  - Removed: "${a.removedText}"
`)}}return r;default:return JSON.stringify(t,null,2)}}cleanupOldSessions(){if(this.plugin.settings.retentionDays===0)return;let t=Date.now()-this.plugin.settings.retentionDays*24*60*60*1e3,e=[];for(let[i,s]of this.sessions.entries())s.startTime<t&&e.push(i);for(let i of e)this.sessions.delete(i);e.length>0&&this.saveSessions()}};var d=require("@codemirror/view"),p=require("@codemirror/state"),u=class{constructor(t){this.trackingIndicator=null;this.plugin=t}showTrackingIndicator(){this.trackingIndicator||(this.trackingIndicator=document.createElement("div"),this.trackingIndicator.className="track-edits-indicator",this.trackingIndicator.innerHTML="\u{1F534} Tracking",this.trackingIndicator.style.cssText=`
      position: fixed;
      top: 10px;
      right: 10px;
      background: var(--background-modifier-error);
      color: var(--text-on-accent);
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 1000;
      opacity: 0.8;
    `,document.body.appendChild(this.trackingIndicator))}hideTrackingIndicator(){this.trackingIndicator&&(this.trackingIndicator.remove(),this.trackingIndicator=null)}createChangeDecorations(t){let e=[],i=Date.now();for(let s of t){if(i-s.timestamp>5e3)continue;let c=this.createChangeDecoration(s);c&&e.push(c)}return d.Decoration.set(e)}createChangeDecoration(t){let e="track-edits-change";switch(t.type){case"insert":e+=" track-edits-insert";break;case"delete":e+=" track-edits-delete";break;case"replace":e+=" track-edits-replace";break}return e+=` track-edits-${this.plugin.settings.colorScheme}`,d.Decoration.mark({class:e,attributes:{title:`${t.type} at ${new Date(t.timestamp).toLocaleTimeString()}`}}).range(t.from,t.to)}createHighlightExtension(){let t=p.StateEffect.define();return[p.StateField.define({create(){return d.Decoration.none},update(i,s){i=i.map(s.changes);for(let c of s.effects)c.is(t)&&(i=this.plugin.editRenderer.createChangeDecorations(c.value));return i},provide:i=>d.EditorView.decorations.from(i)}),d.ViewPlugin.fromClass(class{constructor(i){}update(i){}})]}};var P={enableTracking:!0,showLineNumbers:!0,highlightChanges:!0,retentionDays:30,colorScheme:"default",autoSave:!0,exportFormat:"json"},m=class extends y.Plugin{constructor(){super(...arguments);this.currentSession=null;this.debouncedSave=T(()=>this.saveCurrentSession(),1e3)}async onload(){await this.loadSettings(),this.editTracker=new h(this),this.editRenderer=new u(this),this.initializeGlobalAPI(),this.registerEditorChangeHandler(),this.registerActiveLeafChangeHandler(),this.addCommands(),this.addSettingTab(new l(this.app,this)),this.settings.enableTracking&&this.startTracking(),console.log("Track Edits plugin loaded")}onunload(){this.stopTracking(),this.cleanupGlobalAPI(),console.log("Track Edits plugin unloaded")}async loadSettings(){this.settings=Object.assign({},P,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}initializeGlobalAPI(){window.WriterrlAPI||(window.WriterrlAPI={}),window.WriterrlAPI.trackEdits={getCurrentSession:()=>this.currentSession,getSessionHistory:()=>this.editTracker.getSessionHistory(),startTracking:()=>this.startTracking(),stopTracking:()=>this.stopTracking(),exportSession:e=>this.exportSession(e)}}cleanupGlobalAPI(){window.WriterrlAPI&&window.WriterrlAPI.trackEdits&&delete window.WriterrlAPI.trackEdits}registerEditorChangeHandler(){this.registerEvent(this.app.workspace.on("editor-change",(e,i)=>{if(this.settings.enableTracking&&this.currentSession){let s=this.extractChangesFromEditor(e);s.length>0&&(this.editTracker.recordChanges(this.currentSession.id,s),this.debouncedSave())}}))}registerActiveLeafChangeHandler(){this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{this.settings.enableTracking&&this.restartSession()}))}extractChangesFromEditor(e){return[]}addCommands(){this.addCommand({id:"start-tracking",name:"Start tracking edits",callback:()=>this.startTracking()}),this.addCommand({id:"stop-tracking",name:"Stop tracking edits",callback:()=>this.stopTracking()}),this.addCommand({id:"export-current-session",name:"Export current session",callback:()=>this.exportCurrentSession()}),this.addCommand({id:"view-edit-history",name:"View edit history",callback:()=>this.viewEditHistory()}),this.addCommand({id:"clear-edit-history",name:"Clear edit history",callback:()=>this.clearEditHistory()})}startTracking(){this.currentSession&&this.stopTracking();let e=this.app.workspace.getActiveFile();e&&(this.currentSession={id:k(),startTime:Date.now(),changes:[],wordCount:0,characterCount:0},this.editTracker.startSession(this.currentSession,e),this.editRenderer.showTrackingIndicator())}stopTracking(){this.currentSession&&(this.currentSession.endTime=Date.now(),this.saveCurrentSession(),this.editTracker.endSession(this.currentSession.id),this.editRenderer.hideTrackingIndicator(),this.currentSession=null)}restartSession(){this.currentSession&&(this.stopTracking(),this.startTracking())}async saveCurrentSession(){this.currentSession&&this.settings.autoSave&&await this.editTracker.saveSession(this.currentSession)}exportCurrentSession(){this.currentSession&&this.exportSession(this.currentSession.id)}exportSession(e){let i=this.editTracker.getSession(e);if(!i)return"";let s=this.editTracker.formatSessionForExport(i,this.settings.exportFormat),c=new Blob([s],{type:"text/plain"}),g=URL.createObjectURL(c),r=document.createElement("a");return r.href=g,r.download=`edit-session-${e}.${this.settings.exportFormat}`,r.click(),URL.revokeObjectURL(g),s}viewEditHistory(){console.log("Opening edit history view...")}clearEditHistory(){this.editTracker.clearHistory()}};
