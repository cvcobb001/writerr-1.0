# Writerr Production Deployment Configuration
# Security-hardened configuration for production environments

apiVersion: v1
kind: ConfigMap
metadata:
  name: writerr-production-config
  namespace: writerr
data:
  # Environment Configuration
  NODE_ENV: "production"
  LOG_LEVEL: "warn"
  ENABLE_DEBUG: "false"
  
  # Security Configuration
  SECURITY_LEVEL: "strict"
  ENABLE_INPUT_SANITIZATION: "true"
  ENABLE_FUNCTION_SANDBOXING: "true"
  ENABLE_MODE_VALIDATION: "true"
  ENABLE_DATA_ENCRYPTION: "true"
  ENABLE_AUDIT_LOGGING: "true"
  
  # Resource Limits
  MAX_MEMORY_PER_PLUGIN: "256MB"
  MAX_EXECUTION_TIME: "30000"
  MAX_CONCURRENT_OPERATIONS: "10"
  MAX_FILE_SIZE: "10MB"
  MAX_EDIT_HISTORY_SIZE: "100MB"
  
  # AI Provider Security
  AI_PROVIDERS_SECURITY_MODE: "strict"
  ENABLE_API_KEY_VALIDATION: "true"
  ENABLE_REQUEST_RATE_LIMITING: "true"
  ENABLE_RESPONSE_SANITIZATION: "true"
  MAX_TOKENS_PER_REQUEST: "8192"
  MAX_REQUESTS_PER_MINUTE: "60"
  
  # Data Protection
  ENABLE_SENSITIVE_DATA_DETECTION: "true"
  ENABLE_DATA_LOSS_PREVENTION: "true"
  DATA_RETENTION_DAYS: "90"
  BACKUP_ENCRYPTION: "true"
  
  # Monitoring
  ENABLE_PERFORMANCE_MONITORING: "true"
  ENABLE_SECURITY_MONITORING: "true"
  ENABLE_ERROR_TRACKING: "true"
  METRICS_COLLECTION_INTERVAL: "60000"
  
  # Network Security
  ENABLE_CORS_STRICT_MODE: "true"
  ALLOWED_ORIGINS: "https://obsidian.md"
  ENABLE_CSP: "true"
  ENABLE_HSTS: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: writerr-ai-editorial-functions
  namespace: writerr
spec:
  replicas: 2
  selector:
    matchLabels:
      app: writerr-ai-editorial-functions
  template:
    metadata:
      labels:
        app: writerr-ai-editorial-functions
        security-policy: strict
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: ai-editorial-functions
        image: writerr/ai-editorial-functions:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: NODE_ENV
        - name: SECURITY_LEVEL
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: SECURITY_LEVEL
        - name: MAX_EXECUTION_TIME
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: MAX_EXECUTION_TIME
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /var/log
        - name: security-config
          mountPath: /etc/security
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: security-config
        secret:
          secretName: writerr-security-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: writerr-chat
  namespace: writerr
spec:
  replicas: 2
  selector:
    matchLabels:
      app: writerr-chat
  template:
    metadata:
      labels:
        app: writerr-chat
        security-policy: strict
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: writerr-chat
        image: writerr/writerr-chat:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: NODE_ENV
        - name: ENABLE_MODE_VALIDATION
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: ENABLE_MODE_VALIDATION
        - name: AI_PROVIDERS_SECURITY_MODE
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: AI_PROVIDERS_SECURITY_MODE
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /var/log
        - name: modes-storage
          mountPath: /var/modes
        - name: security-config
          mountPath: /etc/security
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: modes-storage
        persistentVolumeClaim:
          claimName: writerr-modes-pvc
      - name: security-config
        secret:
          secretName: writerr-security-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: writerr-track-edits
  namespace: writerr
spec:
  replicas: 2
  selector:
    matchLabels:
      app: writerr-track-edits
  template:
    metadata:
      labels:
        app: writerr-track-edits
        security-policy: strict
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: track-edits
        image: writerr/track-edits:latest
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: NODE_ENV
        - name: ENABLE_DATA_ENCRYPTION
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: ENABLE_DATA_ENCRYPTION
        - name: MAX_EDIT_HISTORY_SIZE
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: MAX_EDIT_HISTORY_SIZE
        - name: ENABLE_SENSITIVE_DATA_DETECTION
          valueFrom:
            configMapKeyRef:
              name: writerr-production-config
              key: ENABLE_SENSITIVE_DATA_DETECTION
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /var/log
        - name: edits-storage
          mountPath: /var/edits
        - name: security-config
          mountPath: /etc/security
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: edits-storage
        persistentVolumeClaim:
          claimName: writerr-edits-pvc
      - name: security-config
        secret:
          secretName: writerr-security-config

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: writerr-modes-pvc
  namespace: writerr
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: writerr-edits-pvc
  namespace: writerr
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: writerr-service
  namespace: writerr
spec:
  selector:
    app: writerr
  ports:
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  type: LoadBalancer

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: writerr-network-policy
  namespace: writerr
spec:
  podSelector:
    matchLabels:
      security-policy: strict
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: obsidian
    ports:
    - protocol: TCP
      port: 8443
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-providers
    ports:
    - protocol: TCP
      port: 443
  - to:
    - namespaceSelector:
        matchLabels:
          name: logging
    ports:
    - protocol: TCP
      port: 9200

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: writerr-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'

---
apiVersion: v1
kind: Secret
metadata:
  name: writerr-security-config
  namespace: writerr
type: Opaque
stringData:
  security.json: |
    {
      "inputSanitization": {
        "enabled": true,
        "strictMode": true,
        "maxInputLength": 50000,
        "allowHtml": false,
        "allowScripts": false,
        "allowTemplates": true
      },
      "functionSandbox": {
        "enabled": true,
        "maxExecutionTime": 30000,
        "maxMemoryUsage": 52428800,
        "allowNetworkAccess": false,
        "allowFileSystemAccess": false,
        "allowProcessAccess": false
      },
      "modeValidation": {
        "enabled": true,
        "strictMode": true,
        "maxPromptLength": 10000,
        "enablePromptInjectionDetection": true,
        "enableTemplateInjectionDetection": true
      },
      "dataValidation": {
        "enabled": true,
        "maxEditSize": 1048576,
        "maxHistorySize": 104857600,
        "enableSensitiveDataDetection": true,
        "enableDataEncryption": true,
        "compressionEnabled": true
      },
      "aiProviders": {
        "securityMode": "strict",
        "enableRequestValidation": true,
        "enableResponseSanitization": true,
        "maxTokensPerRequest": 8192,
        "rateLimiting": {
          "enabled": true,
          "maxRequestsPerMinute": 60,
          "maxRequestsPerHour": 1000
        }
      },
      "monitoring": {
        "enableSecurityAuditing": true,
        "enablePerformanceMonitoring": true,
        "enableErrorTracking": true,
        "logLevel": "warn",
        "sensitiveDataLogging": false
      }
    }
  
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # Production TLS certificate would go here
    -----END CERTIFICATE-----
  
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # Production TLS private key would go here
    -----END PRIVATE KEY-----

---
# Horizontal Pod Autoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: writerr-hpa
  namespace: writerr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: writerr-ai-editorial-functions
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80