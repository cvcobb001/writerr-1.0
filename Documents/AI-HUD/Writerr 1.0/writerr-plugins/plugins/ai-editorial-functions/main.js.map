{
  "version": 3,
  "sources": ["src/main.ts", "src/settings.ts", "src/function-manager.ts", "src/mode-manager.ts"],
  "sourcesContent": ["import { Plugin, Editor, MarkdownView, Modal, Notice, Menu } from 'obsidian';\nimport { AIEditorialFunctionsSettingsTab } from './settings';\nimport { FunctionManager } from './function-manager';\nimport { ModeManager } from './mode-manager';\nimport { EditorialFunction, WritingMode, WriterrlGlobalAPI } from '@shared/types';\n\ninterface AIEditorialFunctionsSettings {\n  currentMode: string;\n  enableQuickAccess: boolean;\n  showCategoryIcons: boolean;\n  autoApplyFormatting: boolean;\n  confirmBeforeApply: boolean;\n  customFunctions: EditorialFunction[];\n  customModes: WritingMode[];\n}\n\nconst DEFAULT_SETTINGS: AIEditorialFunctionsSettings = {\n  currentMode: 'general',\n  enableQuickAccess: true,\n  showCategoryIcons: true,\n  autoApplyFormatting: true,\n  confirmBeforeApply: true,\n  customFunctions: [],\n  customModes: []\n};\n\nexport default class AIEditorialFunctionsPlugin extends Plugin {\n  settings: AIEditorialFunctionsSettings;\n  functionManager: FunctionManager;\n  modeManager: ModeManager;\n  statusBarItem: HTMLElement;\n\n  async onload() {\n    await this.loadSettings();\n\n    this.functionManager = new FunctionManager(this);\n    this.modeManager = new ModeManager(this);\n\n    // Initialize global API\n    this.initializeGlobalAPI();\n\n    // Add commands\n    this.addCommands();\n\n    // Add context menu items\n    this.registerContextMenus();\n\n    // Add ribbon icon with menu\n    this.addRibbonIcon('wand-2', 'AI Editorial Functions', (event) => {\n      this.showFunctionMenu(event);\n    });\n\n    // Add status bar item\n    this.statusBarItem = this.addStatusBarItem();\n    this.updateStatusBar();\n\n    // Add settings tab\n    this.addSettingTab(new AIEditorialFunctionsSettingsTab(this.app, this));\n\n    console.log('AI Editorial Functions plugin loaded');\n  }\n\n  onunload() {\n    this.cleanupGlobalAPI();\n    console.log('AI Editorial Functions plugin unloaded');\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n    this.updateStatusBar();\n  }\n\n  private initializeGlobalAPI() {\n    if (!window.WriterrlAPI) {\n      window.WriterrlAPI = {} as WriterrlGlobalAPI;\n    }\n\n    window.WriterrlAPI.editorialFunctions = {\n      getFunctions: (category?: string) => this.functionManager.getFunctions(category),\n      executeFunction: (functionId: string, text: string, parameters?: Record<string, any>) => \n        this.functionManager.executeFunction(functionId, text, parameters),\n      getModes: (category?: string) => this.modeManager.getModes(category),\n      setMode: (modeId: string) => this.setMode(modeId)\n    };\n  }\n\n  private cleanupGlobalAPI() {\n    if (window.WriterrlAPI && window.WriterrlAPI.editorialFunctions) {\n      delete window.WriterrlAPI.editorialFunctions;\n    }\n  }\n\n  private addCommands() {\n    // Mode switching commands\n    this.addCommand({\n      id: 'switch-to-academic-mode',\n      name: 'Switch to Academic Writing Mode',\n      callback: () => this.setMode('academic')\n    });\n\n    this.addCommand({\n      id: 'switch-to-business-mode',\n      name: 'Switch to Business Writing Mode',\n      callback: () => this.setMode('business')\n    });\n\n    this.addCommand({\n      id: 'switch-to-fiction-mode',\n      name: 'Switch to Fiction Writing Mode',\n      callback: () => this.setMode('fiction')\n    });\n\n    this.addCommand({\n      id: 'switch-to-technical-mode',\n      name: 'Switch to Technical Writing Mode',\n      callback: () => this.setMode('technical')\n    });\n\n    // Function execution commands\n    this.addCommand({\n      id: 'show-function-menu',\n      name: 'Show editorial functions menu',\n      editorCallback: (editor, view) => {\n        this.showFunctionMenu();\n      }\n    });\n\n    this.addCommand({\n      id: 'quick-edit-selection',\n      name: 'Quick edit selected text',\n      editorCallback: (editor) => {\n        const selection = editor.getSelection();\n        if (selection) {\n          this.showQuickEditModal(selection, editor);\n        } else {\n          new Notice('No text selected');\n        }\n      }\n    });\n\n    // Specific function commands (most common ones)\n    this.addCommand({\n      id: 'improve-clarity',\n      name: 'Improve clarity of selected text',\n      editorCallback: (editor) => this.executeQuickFunction('improve-clarity', editor)\n    });\n\n    this.addCommand({\n      id: 'fix-grammar',\n      name: 'Fix grammar of selected text',\n      editorCallback: (editor) => this.executeQuickFunction('fix-grammar', editor)\n    });\n\n    this.addCommand({\n      id: 'enhance-style',\n      name: 'Enhance writing style of selected text',\n      editorCallback: (editor) => this.executeQuickFunction('enhance-style', editor)\n    });\n\n    this.addCommand({\n      id: 'summarize-text',\n      name: 'Summarize selected text',\n      editorCallback: (editor) => this.executeQuickFunction('summarize', editor)\n    });\n  }\n\n  private registerContextMenus() {\n    this.registerEvent(\n      this.app.workspace.on('editor-menu', (menu: Menu, editor: Editor, view: MarkdownView) => {\n        const selection = editor.getSelection();\n        if (selection) {\n          menu.addSeparator();\n          \n          const submenu = menu.addItem((item) => {\n            item.setTitle('AI Editorial Functions');\n            item.setIcon('wand-2');\n          });\n\n          // Add quick functions to context menu\n          const quickFunctions = [\n            { id: 'improve-clarity', title: 'Improve Clarity' },\n            { id: 'fix-grammar', title: 'Fix Grammar' },\n            { id: 'enhance-style', title: 'Enhance Style' },\n            { id: 'summarize', title: 'Summarize' }\n          ];\n\n          for (const func of quickFunctions) {\n            submenu.addItem((item) => {\n              item.setTitle(func.title);\n              item.onClick(() => this.executeQuickFunction(func.id, editor));\n            });\n          }\n\n          submenu.addSeparator();\n          submenu.addItem((item) => {\n            item.setTitle('More Functions...');\n            item.onClick(() => this.showFunctionMenu());\n          });\n        }\n      })\n    );\n  }\n\n  private async executeQuickFunction(functionId: string, editor: Editor) {\n    const selection = editor.getSelection();\n    if (!selection) {\n      new Notice('No text selected');\n      return;\n    }\n\n    try {\n      const result = await this.functionManager.executeFunction(functionId, selection);\n      if (this.settings.confirmBeforeApply) {\n        this.showResultModal(selection, result, editor);\n      } else {\n        editor.replaceSelection(result);\n        new Notice('Text updated');\n      }\n    } catch (error) {\n      new Notice(`Error: ${error.message}`);\n    }\n  }\n\n  private showFunctionMenu(event?: MouseEvent) {\n    const modal = new FunctionMenuModal(this.app, this, (functionId: string) => {\n      const editor = this.getActiveEditor();\n      if (editor) {\n        this.executeQuickFunction(functionId, editor);\n      }\n    });\n    modal.open();\n  }\n\n  private showQuickEditModal(selectedText: string, editor: Editor) {\n    const modal = new QuickEditModal(this.app, selectedText, async (prompt: string) => {\n      try {\n        const result = await this.functionManager.executeCustomPrompt(selectedText, prompt);\n        if (this.settings.confirmBeforeApply) {\n          this.showResultModal(selectedText, result, editor);\n        } else {\n          editor.replaceSelection(result);\n          new Notice('Text updated');\n        }\n      } catch (error) {\n        new Notice(`Error: ${error.message}`);\n      }\n    });\n    modal.open();\n  }\n\n  private showResultModal(originalText: string, editedText: string, editor: Editor) {\n    const modal = new ResultPreviewModal(this.app, originalText, editedText, (accept: boolean) => {\n      if (accept) {\n        editor.replaceSelection(editedText);\n        new Notice('Text updated');\n      }\n    });\n    modal.open();\n  }\n\n  private getActiveEditor(): Editor | null {\n    const view = this.app.workspace.getActiveViewOfType(MarkdownView);\n    return view ? view.editor : null;\n  }\n\n  setMode(modeId: string) {\n    this.settings.currentMode = modeId;\n    this.saveSettings();\n    new Notice(`Switched to ${modeId} writing mode`);\n  }\n\n  getCurrentMode(): WritingMode | null {\n    return this.modeManager.getMode(this.settings.currentMode);\n  }\n\n  private updateStatusBar() {\n    const currentMode = this.getCurrentMode();\n    if (currentMode) {\n      this.statusBarItem.setText(`\uD83D\uDCDD ${currentMode.name}`);\n      this.statusBarItem.title = `Current writing mode: ${currentMode.description}`;\n    } else {\n      this.statusBarItem.setText('\uD83D\uDCDD General');\n      this.statusBarItem.title = 'No specific writing mode selected';\n    }\n  }\n}\n\nclass FunctionMenuModal extends Modal {\n  plugin: AIEditorialFunctionsPlugin;\n  onSelect: (functionId: string) => void;\n\n  constructor(app: any, plugin: AIEditorialFunctionsPlugin, onSelect: (functionId: string) => void) {\n    super(app);\n    this.plugin = plugin;\n    this.onSelect = onSelect;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.empty();\n\n    contentEl.createEl('h2', { text: 'AI Editorial Functions' });\n\n    const functions = this.plugin.functionManager.getFunctions();\n    const categories = ['academic', 'business', 'fiction', 'technical'];\n\n    for (const category of categories) {\n      const categoryFunctions = functions.filter(f => f.category === category);\n      if (categoryFunctions.length === 0) continue;\n\n      const categoryEl = contentEl.createEl('div', { cls: 'function-category' });\n      categoryEl.createEl('h3', { text: category.charAt(0).toUpperCase() + category.slice(1) });\n\n      for (const func of categoryFunctions) {\n        const functionEl = categoryEl.createEl('div', { cls: 'function-item' });\n        functionEl.style.cssText = `\n          padding: 8px 12px;\n          margin: 2px 0;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        `;\n\n        functionEl.createEl('strong', { text: func.name });\n        functionEl.createEl('div', { text: func.description, cls: 'function-description' });\n\n        functionEl.addEventListener('click', () => {\n          this.onSelect(func.id);\n          this.close();\n        });\n\n        functionEl.addEventListener('mouseenter', () => {\n          functionEl.style.backgroundColor = 'var(--background-modifier-hover)';\n        });\n\n        functionEl.addEventListener('mouseleave', () => {\n          functionEl.style.backgroundColor = '';\n        });\n      }\n    }\n  }\n\n  onClose() {\n    const { contentEl } = this;\n    contentEl.empty();\n  }\n}\n\nclass QuickEditModal extends Modal {\n  selectedText: string;\n  onSubmit: (prompt: string) => Promise<void>;\n\n  constructor(app: any, selectedText: string, onSubmit: (prompt: string) => Promise<void>) {\n    super(app);\n    this.selectedText = selectedText;\n    this.onSubmit = onSubmit;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.empty();\n\n    contentEl.createEl('h2', { text: 'Quick Edit with Custom Prompt' });\n\n    const previewEl = contentEl.createEl('div', { cls: 'selected-text-preview' });\n    previewEl.style.cssText = `\n      background: var(--background-secondary);\n      padding: 10px;\n      border-radius: 4px;\n      margin: 10px 0;\n      max-height: 150px;\n      overflow-y: auto;\n    `;\n    previewEl.textContent = this.selectedText;\n\n    const promptInput = contentEl.createEl('textarea', {\n      attr: { \n        placeholder: 'Enter your editing instructions (e.g., \"Make this more formal\", \"Simplify the language\", \"Add more details\")',\n        rows: '3'\n      }\n    });\n    promptInput.style.cssText = `\n      width: 100%;\n      margin: 10px 0;\n      padding: 8px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n    `;\n\n    const buttonContainer = contentEl.createEl('div', { cls: 'button-container' });\n    buttonContainer.style.cssText = `\n      display: flex;\n      justify-content: flex-end;\n      gap: 10px;\n      margin-top: 15px;\n    `;\n\n    const cancelButton = buttonContainer.createEl('button', { text: 'Cancel' });\n    cancelButton.onclick = () => this.close();\n\n    const submitButton = buttonContainer.createEl('button', { text: 'Apply Edit' });\n    submitButton.style.cssText = `\n      background: var(--interactive-accent);\n      color: var(--text-on-accent);\n    `;\n    submitButton.onclick = async () => {\n      const prompt = promptInput.value.trim();\n      if (prompt) {\n        this.close();\n        await this.onSubmit(prompt);\n      }\n    };\n\n    promptInput.focus();\n  }\n\n  onClose() {\n    const { contentEl } = this;\n    contentEl.empty();\n  }\n}\n\nclass ResultPreviewModal extends Modal {\n  originalText: string;\n  editedText: string;\n  onDecision: (accept: boolean) => void;\n\n  constructor(app: any, originalText: string, editedText: string, onDecision: (accept: boolean) => void) {\n    super(app);\n    this.originalText = originalText;\n    this.editedText = editedText;\n    this.onDecision = onDecision;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.empty();\n\n    contentEl.createEl('h2', { text: 'Preview Changes' });\n\n    const container = contentEl.createEl('div', { cls: 'diff-container' });\n    container.style.cssText = `\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 20px;\n      margin: 15px 0;\n    `;\n\n    // Original text\n    const originalContainer = container.createEl('div');\n    originalContainer.createEl('h3', { text: 'Original' });\n    const originalEl = originalContainer.createEl('div', { cls: 'text-preview original' });\n    originalEl.style.cssText = `\n      background: var(--background-secondary);\n      padding: 15px;\n      border-radius: 4px;\n      max-height: 300px;\n      overflow-y: auto;\n      border: 2px solid var(--background-modifier-error);\n    `;\n    originalEl.textContent = this.originalText;\n\n    // Edited text\n    const editedContainer = container.createEl('div');\n    editedContainer.createEl('h3', { text: 'Edited' });\n    const editedEl = editedContainer.createEl('div', { cls: 'text-preview edited' });\n    editedEl.style.cssText = `\n      background: var(--background-secondary);\n      padding: 15px;\n      border-radius: 4px;\n      max-height: 300px;\n      overflow-y: auto;\n      border: 2px solid var(--background-modifier-success);\n    `;\n    editedEl.textContent = this.editedText;\n\n    // Buttons\n    const buttonContainer = contentEl.createEl('div', { cls: 'button-container' });\n    buttonContainer.style.cssText = `\n      display: flex;\n      justify-content: flex-end;\n      gap: 10px;\n      margin-top: 20px;\n    `;\n\n    const rejectButton = buttonContainer.createEl('button', { text: 'Keep Original' });\n    rejectButton.onclick = () => {\n      this.onDecision(false);\n      this.close();\n    };\n\n    const acceptButton = buttonContainer.createEl('button', { text: 'Apply Changes' });\n    acceptButton.style.cssText = `\n      background: var(--interactive-accent);\n      color: var(--text-on-accent);\n    `;\n    acceptButton.onclick = () => {\n      this.onDecision(true);\n      this.close();\n    };\n  }\n\n  onClose() {\n    const { contentEl } = this;\n    contentEl.empty();\n  }\n}", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport AIEditorialFunctionsPlugin from './main';\n\nexport class AIEditorialFunctionsSettingsTab extends PluginSettingTab {\n  plugin: AIEditorialFunctionsPlugin;\n\n  constructor(app: App, plugin: AIEditorialFunctionsPlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display(): void {\n    const { containerEl } = this;\n    containerEl.empty();\n\n    containerEl.createEl('h2', { text: 'AI Editorial Functions Settings' });\n\n    // Current Mode\n    new Setting(containerEl)\n      .setName('Current writing mode')\n      .setDesc('Choose the active writing mode for context-aware functions')\n      .addDropdown(dropdown => dropdown\n        .addOption('general', 'General Writing')\n        .addOption('academic', 'Academic Writing')\n        .addOption('business', 'Business Writing')\n        .addOption('fiction', 'Fiction Writing')\n        .addOption('technical', 'Technical Writing')\n        .setValue(this.plugin.settings.currentMode)\n        .onChange(async (value) => {\n          this.plugin.settings.currentMode = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Interface Settings\n    containerEl.createEl('h3', { text: 'Interface' });\n\n    new Setting(containerEl)\n      .setName('Enable quick access')\n      .setDesc('Add editorial functions to the context menu when text is selected')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.enableQuickAccess)\n        .onChange(async (value) => {\n          this.plugin.settings.enableQuickAccess = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Show category icons')\n      .setDesc('Display category icons in function menus')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showCategoryIcons)\n        .onChange(async (value) => {\n          this.plugin.settings.showCategoryIcons = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Confirm before applying')\n      .setDesc('Show a preview before applying editorial changes')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.confirmBeforeApply)\n        .onChange(async (value) => {\n          this.plugin.settings.confirmBeforeApply = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Auto-apply formatting')\n      .setDesc('Automatically apply basic formatting fixes (punctuation, spacing)')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.autoApplyFormatting)\n        .onChange(async (value) => {\n          this.plugin.settings.autoApplyFormatting = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Function Categories\n    containerEl.createEl('h3', { text: 'Available Functions by Category' });\n\n    const categories = [\n      {\n        name: 'Academic',\n        key: 'academic',\n        functions: [\n          'Argument Structure Analysis',\n          'Citation Formatting',\n          'Thesis Statement Enhancement',\n          'Academic Tone Adjustment',\n          'Literature Review Synthesis'\n        ]\n      },\n      {\n        name: 'Business',\n        key: 'business',\n        functions: [\n          'Executive Summary Creation',\n          'Professional Tone Enhancement',\n          'Action Item Extraction',\n          'Meeting Notes Formatting',\n          'Proposal Structure'\n        ]\n      },\n      {\n        name: 'Fiction',\n        key: 'fiction',\n        functions: [\n          'Dialogue Enhancement',\n          'Character Development',\n          'Narrative Flow Improvement',\n          'Setting Description',\n          'Pacing Analysis'\n        ]\n      },\n      {\n        name: 'Technical',\n        key: 'technical',\n        functions: [\n          'API Documentation',\n          'Code Comment Enhancement',\n          'Technical Specification',\n          'Troubleshooting Guide',\n          'User Manual Creation'\n        ]\n      }\n    ];\n\n    for (const category of categories) {\n      const categoryEl = containerEl.createEl('div', { cls: 'function-category-info' });\n      categoryEl.style.cssText = `\n        margin: 15px 0;\n        padding: 15px;\n        background: var(--background-secondary);\n        border-radius: 6px;\n      `;\n\n      categoryEl.createEl('h4', { text: category.name });\n      \n      const functionList = categoryEl.createEl('ul');\n      functionList.style.cssText = `\n        margin: 8px 0 0 20px;\n        color: var(--text-muted);\n      `;\n\n      for (const func of category.functions) {\n        functionList.createEl('li', { text: func });\n      }\n    }\n\n    // Custom Functions (placeholder for future expansion)\n    containerEl.createEl('h3', { text: 'Custom Functions' });\n    \n    const customFunctionsNote = containerEl.createEl('div', { cls: 'setting-note' });\n    customFunctionsNote.style.cssText = `\n      padding: 10px;\n      background: var(--background-modifier-form-field);\n      border-radius: 4px;\n      font-style: italic;\n      color: var(--text-muted);\n    `;\n    customFunctionsNote.textContent = 'Custom function creation will be available in a future update. Stay tuned!';\n\n    // Usage Tips\n    containerEl.createEl('h3', { text: 'Usage Tips' });\n    \n    const tipsContainer = containerEl.createEl('div', { cls: 'usage-tips' });\n    tipsContainer.style.cssText = `\n      background: var(--background-secondary);\n      padding: 15px;\n      border-radius: 6px;\n      margin: 10px 0;\n    `;\n\n    const tips = [\n      'Select text and right-click to access quick editorial functions',\n      'Use Ctrl/Cmd + P to search for \"editorial\" commands',\n      'Switch writing modes to get context-appropriate suggestions',\n      'The status bar shows your current writing mode',\n      'Use the ribbon icon to access all available functions'\n    ];\n\n    const tipsList = tipsContainer.createEl('ul');\n    for (const tip of tips) {\n      tipsList.createEl('li', { text: tip });\n    }\n\n    // Keyboard Shortcuts\n    containerEl.createEl('h3', { text: 'Keyboard Shortcuts' });\n    \n    const shortcutsContainer = containerEl.createEl('div', { cls: 'keyboard-shortcuts' });\n    shortcutsContainer.style.cssText = `\n      background: var(--background-secondary);\n      padding: 15px;\n      border-radius: 6px;\n      margin: 10px 0;\n    `;\n\n    const shortcuts = [\n      { command: 'Quick edit selection', shortcut: 'Set in Hotkeys settings' },\n      { command: 'Show function menu', shortcut: 'Set in Hotkeys settings' },\n      { command: 'Improve clarity', shortcut: 'Set in Hotkeys settings' },\n      { command: 'Fix grammar', shortcut: 'Set in Hotkeys settings' }\n    ];\n\n    const shortcutTable = shortcutsContainer.createEl('table');\n    shortcutTable.style.cssText = `\n      width: 100%;\n      border-collapse: collapse;\n    `;\n\n    const headerRow = shortcutTable.createEl('tr');\n    headerRow.createEl('th', { text: 'Command' }).style.cssText = 'text-align: left; padding: 8px; border-bottom: 1px solid var(--background-modifier-border);';\n    headerRow.createEl('th', { text: 'Shortcut' }).style.cssText = 'text-align: left; padding: 8px; border-bottom: 1px solid var(--background-modifier-border);';\n\n    for (const shortcut of shortcuts) {\n      const row = shortcutTable.createEl('tr');\n      row.createEl('td', { text: shortcut.command }).style.cssText = 'padding: 6px 8px;';\n      row.createEl('td', { text: shortcut.shortcut }).style.cssText = 'padding: 6px 8px; color: var(--text-muted); font-style: italic;';\n    }\n\n    const shortcutsNote = shortcutsContainer.createEl('p', { \n      text: 'Go to Settings \u2192 Hotkeys and search for \"AI Editorial\" to set custom keyboard shortcuts.' \n    });\n    shortcutsNote.style.cssText = 'margin-top: 10px; font-size: 0.9em; color: var(--text-muted);';\n  }\n}", "import { Notice } from 'obsidian';\nimport { EditorialFunction } from '@shared/types';\nimport AIEditorialFunctionsPlugin from './main';\n\nexport class FunctionManager {\n  private plugin: AIEditorialFunctionsPlugin;\n  private builtInFunctions: EditorialFunction[];\n\n  constructor(plugin: AIEditorialFunctionsPlugin) {\n    this.plugin = plugin;\n    this.initializeBuiltInFunctions();\n  }\n\n  private initializeBuiltInFunctions() {\n    this.builtInFunctions = [\n      // Academic Functions\n      {\n        id: 'improve-argument-structure',\n        name: 'Improve Argument Structure',\n        description: 'Analyze and enhance the logical flow and structure of academic arguments',\n        category: 'academic',\n        prompt: 'Analyze the argument structure in this text and improve its logical flow, clarity, and persuasiveness. Maintain academic tone and add transitions where needed:'\n      },\n      {\n        id: 'enhance-citation-format',\n        name: 'Enhance Citations',\n        description: 'Improve citation formatting and integration within academic text',\n        category: 'academic',\n        prompt: 'Review and improve the citation formatting and integration in this text. Ensure proper academic style and smooth integration with the surrounding text:'\n      },\n      {\n        id: 'strengthen-thesis',\n        name: 'Strengthen Thesis',\n        description: 'Enhance thesis statement clarity, specificity, and argumentative power',\n        category: 'academic',\n        prompt: 'Strengthen this thesis statement by making it more specific, clear, and arguable. Ensure it clearly states the main argument and previews supporting points:'\n      },\n      {\n        id: 'academic-tone-adjustment',\n        name: 'Academic Tone Adjustment',\n        description: 'Adjust text to match appropriate academic tone and style',\n        category: 'academic',\n        prompt: 'Adjust this text to match appropriate academic tone and style. Make it more formal, precise, and scholarly while maintaining readability:'\n      },\n\n      // Business Functions\n      {\n        id: 'create-executive-summary',\n        name: 'Create Executive Summary',\n        description: 'Generate a concise executive summary from detailed business content',\n        category: 'business',\n        prompt: 'Create a concise executive summary from this content. Focus on key points, decisions, and action items that executives need to know:'\n      },\n      {\n        id: 'enhance-professional-tone',\n        name: 'Enhance Professional Tone',\n        description: 'Improve professional tone and business communication style',\n        category: 'business',\n        prompt: 'Enhance the professional tone of this text. Make it more polished, confident, and appropriate for business communication:'\n      },\n      {\n        id: 'extract-action-items',\n        name: 'Extract Action Items',\n        description: 'Identify and format action items and next steps from business content',\n        category: 'business',\n        prompt: 'Extract and clearly format all action items, next steps, and deliverables from this text. Present them as a bulleted list with responsible parties and deadlines where mentioned:'\n      },\n      {\n        id: 'format-meeting-notes',\n        name: 'Format Meeting Notes',\n        description: 'Structure and format meeting notes for clarity and actionability',\n        category: 'business',\n        prompt: 'Structure and format these meeting notes. Organize by agenda items, highlight decisions made, action items, and next steps:'\n      },\n\n      // Fiction Functions\n      {\n        id: 'enhance-dialogue',\n        name: 'Enhance Dialogue',\n        description: 'Improve dialogue naturalness, character voice, and dramatic effect',\n        category: 'fiction',\n        prompt: 'Enhance this dialogue to make it more natural, distinctive to each character, and dramatically effective. Improve rhythm, subtext, and character voice:'\n      },\n      {\n        id: 'develop-character',\n        name: 'Develop Character',\n        description: 'Enhance character development and personality in narrative text',\n        category: 'fiction',\n        prompt: 'Enhance the character development in this text. Make the characters more vivid, complex, and distinctive through actions, dialogue, and internal thoughts:'\n      },\n      {\n        id: 'improve-narrative-flow',\n        name: 'Improve Narrative Flow',\n        description: 'Enhance pacing, transitions, and narrative momentum',\n        category: 'fiction',\n        prompt: 'Improve the narrative flow of this text. Enhance pacing, smooth transitions between scenes, and maintain reader engagement throughout:'\n      },\n      {\n        id: 'enhance-setting-description',\n        name: 'Enhance Setting Description',\n        description: 'Improve scene setting and atmospheric description',\n        category: 'fiction',\n        prompt: 'Enhance the setting description in this text. Make it more vivid and atmospheric while using sensory details to immerse the reader:'\n      },\n\n      // Technical Functions\n      {\n        id: 'improve-api-documentation',\n        name: 'Improve API Documentation',\n        description: 'Enhance API documentation clarity, completeness, and usability',\n        category: 'technical',\n        prompt: 'Improve this API documentation. Make it clearer, more complete, and easier to understand. Include proper parameter descriptions, examples, and error handling:'\n      },\n      {\n        id: 'enhance-code-comments',\n        name: 'Enhance Code Comments',\n        description: 'Improve code comments for clarity and maintainability',\n        category: 'technical',\n        prompt: 'Enhance these code comments to make them clearer and more helpful for future developers. Explain the why behind complex logic:'\n      },\n      {\n        id: 'create-technical-spec',\n        name: 'Create Technical Specification',\n        description: 'Generate comprehensive technical specifications from requirements',\n        category: 'technical',\n        prompt: 'Create a comprehensive technical specification from this content. Include system requirements, architecture decisions, and implementation details:'\n      },\n      {\n        id: 'improve-troubleshooting-guide',\n        name: 'Improve Troubleshooting Guide',\n        description: 'Enhance troubleshooting documentation with clear steps and solutions',\n        category: 'technical',\n        prompt: 'Improve this troubleshooting guide. Make the steps clearer, add common solutions, and organize by problem severity:'\n      },\n\n      // General Functions (available in all modes)\n      {\n        id: 'improve-clarity',\n        name: 'Improve Clarity',\n        description: 'Enhance text clarity and readability',\n        category: 'academic', // Default category, but available in all modes\n        prompt: 'Improve the clarity and readability of this text. Make it easier to understand while preserving the original meaning and tone:'\n      },\n      {\n        id: 'fix-grammar',\n        name: 'Fix Grammar',\n        description: 'Correct grammatical errors and improve sentence structure',\n        category: 'academic',\n        prompt: 'Fix any grammatical errors in this text and improve sentence structure while maintaining the original style and meaning:'\n      },\n      {\n        id: 'enhance-style',\n        name: 'Enhance Writing Style',\n        description: 'Improve overall writing style and flow',\n        category: 'academic',\n        prompt: 'Enhance the writing style of this text. Improve flow, vary sentence structure, and make it more engaging while maintaining appropriateness for the context:'\n      },\n      {\n        id: 'summarize',\n        name: 'Summarize',\n        description: 'Create a concise summary of the selected text',\n        category: 'academic',\n        prompt: 'Create a concise summary of this text. Capture the main points and key information in a shorter, more digestible format:'\n      },\n      {\n        id: 'expand-ideas',\n        name: 'Expand Ideas',\n        description: 'Develop and elaborate on ideas in the selected text',\n        category: 'academic',\n        prompt: 'Expand and elaborate on the ideas in this text. Add more depth, examples, and supporting details while maintaining coherence:'\n      }\n    ];\n  }\n\n  getFunctions(category?: string): EditorialFunction[] {\n    const allFunctions = [...this.builtInFunctions, ...this.plugin.settings.customFunctions];\n    \n    if (category) {\n      return allFunctions.filter(f => f.category === category);\n    }\n    \n    return allFunctions;\n  }\n\n  getFunction(functionId: string): EditorialFunction | undefined {\n    const allFunctions = [...this.builtInFunctions, ...this.plugin.settings.customFunctions];\n    return allFunctions.find(f => f.id === functionId);\n  }\n\n  async executeFunction(functionId: string, text: string, parameters?: Record<string, any>): Promise<string> {\n    const func = this.getFunction(functionId);\n    if (!func) {\n      throw new Error(`Function '${functionId}' not found`);\n    }\n\n    return await this.executeWithPrompt(func.prompt, text, parameters);\n  }\n\n  async executeCustomPrompt(text: string, customPrompt: string): Promise<string> {\n    return await this.executeWithPrompt(customPrompt, text);\n  }\n\n  private async executeWithPrompt(prompt: string, text: string, parameters?: Record<string, any>): Promise<string> {\n    // Check if Writerr Chat is available for AI processing\n    if (!window.WriterrlAPI?.chat) {\n      throw new Error('Writerr Chat plugin is required for AI editorial functions. Please install and configure the Writerr Chat plugin.');\n    }\n\n    try {\n      // Build the full prompt with context\n      const fullPrompt = this.buildFullPrompt(prompt, text, parameters);\n      \n      // Use the chat API to get AI response\n      const response = await this.sendToAI(fullPrompt);\n      \n      // Extract the edited text from the response\n      return this.extractEditedText(response, text);\n      \n    } catch (error) {\n      console.error('Error executing editorial function:', error);\n      throw new Error(`Failed to process text: ${error.message}`);\n    }\n  }\n\n  private buildFullPrompt(basePrompt: string, text: string, parameters?: Record<string, any>): string {\n    let fullPrompt = basePrompt;\n    \n    // Add current mode context\n    const currentMode = this.plugin.getCurrentMode();\n    if (currentMode) {\n      fullPrompt += `\\n\\nContext: This is ${currentMode.name.toLowerCase()} writing. ${currentMode.description}`;\n    }\n    \n    // Add parameters if provided\n    if (parameters && Object.keys(parameters).length > 0) {\n      fullPrompt += '\\n\\nAdditional parameters:';\n      for (const [key, value] of Object.entries(parameters)) {\n        fullPrompt += `\\n- ${key}: ${value}`;\n      }\n    }\n    \n    fullPrompt += `\\n\\nText to edit:\\n\\n${text}\\n\\nPlease provide only the improved text without additional commentary.`;\n    \n    return fullPrompt;\n  }\n\n  private async sendToAI(prompt: string): Promise<string> {\n    // This is a placeholder - in a real implementation, this would interface\n    // with the AI provider through the Chat plugin\n    \n    // Simulate AI processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // For now, return a mock response\n    // In the actual implementation, this would call:\n    // return await window.WriterrlAPI.chat.sendMessage(prompt);\n    \n    throw new Error('AI provider not implemented yet. This is a placeholder for the actual AI integration.');\n  }\n\n  private extractEditedText(aiResponse: string, originalText: string): string {\n    // This would extract the edited text from the AI response\n    // For now, return the original text as a placeholder\n    \n    // In actual implementation, this might:\n    // 1. Parse the AI response to find the edited text\n    // 2. Clean up any formatting or extra text\n    // 3. Validate that the response is reasonable\n    \n    return aiResponse.trim();\n  }\n\n  // Utility methods for function management\n  addCustomFunction(func: EditorialFunction): void {\n    // Check for duplicate IDs\n    if (this.getFunction(func.id)) {\n      throw new Error(`Function with ID '${func.id}' already exists`);\n    }\n    \n    this.plugin.settings.customFunctions.push(func);\n    this.plugin.saveSettings();\n  }\n\n  removeCustomFunction(functionId: string): boolean {\n    const index = this.plugin.settings.customFunctions.findIndex(f => f.id === functionId);\n    if (index === -1) return false;\n    \n    this.plugin.settings.customFunctions.splice(index, 1);\n    this.plugin.saveSettings();\n    return true;\n  }\n\n  getFunctionsByCurrentMode(): EditorialFunction[] {\n    const currentMode = this.plugin.getCurrentMode();\n    if (!currentMode) {\n      return this.getFunctions();\n    }\n    \n    // Get functions specific to the current mode, plus general functions\n    const modeFunctions = this.getFunctions(currentMode.category);\n    const generalFunctions = ['improve-clarity', 'fix-grammar', 'enhance-style', 'summarize', 'expand-ideas'];\n    const generalFuncs = this.builtInFunctions.filter(f => generalFunctions.includes(f.id));\n    \n    return [...modeFunctions, ...generalFuncs];\n  }\n}", "import { WritingMode, EditorialFunction } from '@shared/types';\nimport AIEditorialFunctionsPlugin from './main';\n\nexport class ModeManager {\n  private plugin: AIEditorialFunctionsPlugin;\n  private builtInModes: WritingMode[];\n\n  constructor(plugin: AIEditorialFunctionsPlugin) {\n    this.plugin = plugin;\n    this.initializeBuiltInModes();\n  }\n\n  private initializeBuiltInModes() {\n    this.builtInModes = [\n      {\n        id: 'general',\n        name: 'General Writing',\n        description: 'General purpose writing with focus on clarity and readability',\n        category: 'academic', // Default category\n        systemPrompt: 'You are a helpful writing assistant focused on improving clarity, grammar, and overall readability. Maintain the author\\'s voice and intent while making the text clearer and more engaging.',\n        functions: []\n      },\n      {\n        id: 'academic',\n        name: 'Academic Writing',\n        description: 'Scholarly writing with emphasis on argument structure, evidence, and formal tone',\n        category: 'academic',\n        systemPrompt: 'You are an academic writing specialist. Focus on improving argument structure, evidence presentation, citation integration, and maintaining appropriate scholarly tone. Ensure logical flow and rigorous analysis.',\n        functions: []\n      },\n      {\n        id: 'business',\n        name: 'Business Writing',\n        description: 'Professional communication with focus on clarity, action items, and business outcomes',\n        category: 'business',\n        systemPrompt: 'You are a business communication expert. Focus on professional tone, clear action items, executive-level clarity, and outcome-oriented language. Make content scannable and actionable.',\n        functions: []\n      },\n      {\n        id: 'fiction',\n        name: 'Fiction Writing',\n        description: 'Creative writing with emphasis on character development, dialogue, and narrative flow',\n        category: 'fiction',\n        systemPrompt: 'You are a fiction writing coach. Focus on character development, dialogue naturalness, narrative pacing, setting description, and reader engagement. Enhance dramatic effect and emotional impact.',\n        functions: []\n      },\n      {\n        id: 'technical',\n        name: 'Technical Writing',\n        description: 'Technical documentation with focus on accuracy, completeness, and user guidance',\n        category: 'technical',\n        systemPrompt: 'You are a technical writing specialist. Focus on accuracy, completeness, step-by-step clarity, and user-centered documentation. Ensure technical concepts are explained clearly for the target audience.',\n        functions: []\n      }\n    ];\n  }\n\n  getModes(category?: string): WritingMode[] {\n    const allModes = [...this.builtInModes, ...this.plugin.settings.customModes];\n    \n    if (category) {\n      return allModes.filter(m => m.category === category);\n    }\n    \n    return allModes;\n  }\n\n  getMode(modeId: string): WritingMode | null {\n    const allModes = [...this.builtInModes, ...this.plugin.settings.customModes];\n    return allModes.find(m => m.id === modeId) || null;\n  }\n\n  getCurrentMode(): WritingMode | null {\n    return this.getMode(this.plugin.settings.currentMode);\n  }\n\n  setMode(modeId: string): boolean {\n    const mode = this.getMode(modeId);\n    if (!mode) return false;\n    \n    this.plugin.settings.currentMode = modeId;\n    this.plugin.saveSettings();\n    return true;\n  }\n\n  getModeSystemPrompt(modeId: string): string {\n    const mode = this.getMode(modeId);\n    return mode ? mode.systemPrompt : this.builtInModes[0].systemPrompt; // Default to general\n  }\n\n  getModeFunctions(modeId: string): EditorialFunction[] {\n    const mode = this.getMode(modeId);\n    if (!mode) return [];\n    \n    // Get functions specific to this mode's category\n    return this.plugin.functionManager.getFunctions(mode.category);\n  }\n\n  // Custom mode management\n  addCustomMode(mode: WritingMode): void {\n    // Check for duplicate IDs\n    if (this.getMode(mode.id)) {\n      throw new Error(`Mode with ID '${mode.id}' already exists`);\n    }\n    \n    this.plugin.settings.customModes.push(mode);\n    this.plugin.saveSettings();\n  }\n\n  removeCustomMode(modeId: string): boolean {\n    // Don't allow removal of built-in modes\n    if (this.builtInModes.some(m => m.id === modeId)) {\n      return false;\n    }\n    \n    const index = this.plugin.settings.customModes.findIndex(m => m.id === modeId);\n    if (index === -1) return false;\n    \n    this.plugin.settings.customModes.splice(index, 1);\n    \n    // If the removed mode was current, switch to general\n    if (this.plugin.settings.currentMode === modeId) {\n      this.plugin.settings.currentMode = 'general';\n    }\n    \n    this.plugin.saveSettings();\n    return true;\n  }\n\n  updateCustomMode(modeId: string, updates: Partial<WritingMode>): boolean {\n    const index = this.plugin.settings.customModes.findIndex(m => m.id === modeId);\n    if (index === -1) return false;\n    \n    const mode = this.plugin.settings.customModes[index];\n    Object.assign(mode, updates);\n    \n    this.plugin.saveSettings();\n    return true;\n  }\n\n  // Mode-specific context for AI prompts\n  buildModeContext(modeId: string, additionalContext?: string): string {\n    const mode = this.getMode(modeId);\n    if (!mode) return '';\n    \n    let context = `Current writing mode: ${mode.name}\\n`;\n    context += `Mode description: ${mode.description}\\n`;\n    context += `System guidance: ${mode.systemPrompt}`;\n    \n    if (additionalContext) {\n      context += `\\n\\nAdditional context: ${additionalContext}`;\n    }\n    \n    return context;\n  }\n\n  // Get mode-appropriate suggestions\n  getModeSuggestions(modeId: string): string[] {\n    const mode = this.getMode(modeId);\n    if (!mode) return [];\n    \n    const suggestions: Record<string, string[]> = {\n      'academic': [\n        'Focus on argument structure and evidence',\n        'Use formal, scholarly tone',\n        'Integrate citations smoothly',\n        'Ensure logical flow between paragraphs',\n        'Support claims with credible sources'\n      ],\n      'business': [\n        'Lead with key takeaways',\n        'Use action-oriented language',\n        'Make content scannable',\n        'Include clear next steps',\n        'Focus on business outcomes'\n      ],\n      'fiction': [\n        'Show don\\'t tell',\n        'Develop character voice',\n        'Enhance sensory details',\n        'Improve dialogue naturalness',\n        'Maintain narrative momentum'\n      ],\n      'technical': [\n        'Be precise and accurate',\n        'Use clear step-by-step instructions',\n        'Include examples and code snippets',\n        'Consider the target audience',\n        'Test all procedures'\n      ],\n      'general': [\n        'Focus on clarity and readability',\n        'Use active voice when possible',\n        'Vary sentence structure',\n        'Remove unnecessary words',\n        'Improve flow and transitions'\n      ]\n    };\n    \n    return suggestions[mode.category] || suggestions['general'];\n  }\n\n  // Export mode configuration\n  exportModeConfiguration(): string {\n    const config = {\n      currentMode: this.plugin.settings.currentMode,\n      customModes: this.plugin.settings.customModes,\n      exportedAt: new Date().toISOString()\n    };\n    \n    return JSON.stringify(config, null, 2);\n  }\n\n  // Import mode configuration\n  importModeConfiguration(configJson: string): { success: boolean; message: string } {\n    try {\n      const config = JSON.parse(configJson);\n      \n      if (!config.customModes || !Array.isArray(config.customModes)) {\n        return { success: false, message: 'Invalid configuration format' };\n      }\n      \n      // Validate each custom mode\n      for (const mode of config.customModes) {\n        if (!mode.id || !mode.name || !mode.category || !mode.systemPrompt) {\n          return { success: false, message: 'Invalid mode structure in configuration' };\n        }\n      }\n      \n      // Import custom modes (don't overwrite, add new ones)\n      let importedCount = 0;\n      for (const mode of config.customModes) {\n        if (!this.getMode(mode.id)) {\n          this.plugin.settings.customModes.push(mode);\n          importedCount++;\n        }\n      }\n      \n      // Set current mode if it's valid\n      if (config.currentMode && this.getMode(config.currentMode)) {\n        this.plugin.settings.currentMode = config.currentMode;\n      }\n      \n      this.plugin.saveSettings();\n      \n      return { \n        success: true, \n        message: `Successfully imported ${importedCount} custom modes` \n      };\n      \n    } catch (error) {\n      return { \n        success: false, \n        message: `Import failed: ${error.message}` \n      };\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["import_obsidian"]
}
