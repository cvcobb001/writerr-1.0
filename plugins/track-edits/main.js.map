{
  "version": 3,
  "sources": ["src/main.ts", "src/settings.ts", "../../shared/utils/index.ts", "src/edit-tracker.ts", "src/edit-renderer.ts", "src/side-panel-view.ts", "src/edit-cluster-manager.ts", "src/ui/ToggleStateManager.ts", "src/components/ToggleConfirmationModal.ts"],
  "sourcesContent": ["import { Plugin, MarkdownView, Editor, EditorChange, TFile, WorkspaceLeaf, ItemView } from 'obsidian';\nimport { StateField, StateEffect, Transaction, ChangeSpec } from '@codemirror/state';\nimport { EditorView, ViewUpdate, ViewPlugin, Decoration, DecorationSet, WidgetType } from '@codemirror/view';\nimport { TrackEditsSettingsTab } from './settings';\nimport { EditTracker } from './edit-tracker';\nimport { EditRenderer } from './edit-renderer';\nimport { EditSidePanelView } from './side-panel-view';\nimport { EditClusterManager } from './edit-cluster-manager';\nimport { ToggleStateManager } from './ui/ToggleStateManager';\nimport { ToggleConfirmationModal } from './components/ToggleConfirmationModal';\nimport { EditSession, EditChange, WriterrlGlobalAPI } from '../../../shared/types';\nimport { generateId, debounce } from '../../../shared/utils';\n\ninterface TrackEditsSettings {\n  enableTracking: boolean;\n  showLineNumbers: boolean;\n  highlightChanges: boolean;\n  retentionDays: number;\n  colorScheme: 'default' | 'colorblind' | 'dark';\n  autoSave: boolean;\n  exportFormat: 'json' | 'csv' | 'markdown';\n  enableClustering: boolean;\n  clusterTimeWindow: number;\n  showSidePanelOnStart: boolean;\n  // AI Integration settings\n  aiAlwaysEnabled: boolean;\n  aiProvider: string;\n  aiModel: string;\n  systemPromptPath: string;\n}\n\nconst DEFAULT_SETTINGS: TrackEditsSettings = {\n  enableTracking: true,\n  showLineNumbers: true,\n  highlightChanges: true,\n  retentionDays: 30,\n  colorScheme: 'default',\n  autoSave: true,\n  exportFormat: 'json',\n  enableClustering: true,\n  clusterTimeWindow: 2000,\n  showSidePanelOnStart: true,\n  // AI Integration defaults\n  aiAlwaysEnabled: false,\n  aiProvider: '',\n  aiModel: '',\n  systemPromptPath: 'prompts/system-prompt.md'\n};\n\n// Development monitoring - remove before production\nconst DEBUG_MODE = true;\nconst PERF_MONITOR = true;\n\nclass DebugMonitor {\n  private static logs: { timestamp: number; type: string; data: any }[] = [];\n  private static perfCounters = new Map<string, { count: number; totalTime: number; maxTime: number }>();\n  \n  static log(type: string, data: any) {\n    if (!DEBUG_MODE) return;\n    this.logs.push({ timestamp: Date.now(), type, data });\n    \n    // Log with expanded object details for better visibility\n    console.log(`[Track Edits ${type}]`, JSON.stringify(data, null, 2));\n    \n    // Keep only last 1000 logs\n    if (this.logs.length > 1000) {\n      this.logs.splice(0, 500);\n    }\n  }\n  \n  static startTimer(name: string) {\n    if (!PERF_MONITOR) return null;\n    return { name, start: performance.now() };\n  }\n  \n  static endTimer(timer: { name: string; start: number } | null) {\n    if (!timer || !PERF_MONITOR) return;\n    const duration = performance.now() - timer.start;\n    \n    const counter = this.perfCounters.get(timer.name) || { count: 0, totalTime: 0, maxTime: 0 };\n    counter.count++;\n    counter.totalTime += duration;\n    counter.maxTime = Math.max(counter.maxTime, duration);\n    this.perfCounters.set(timer.name, counter);\n    \n    if (duration > 16) {\n      console.warn(`[Track Edits PERF] ${timer.name} took ${duration.toFixed(2)}ms (>16ms target)`);\n    }\n  }\n  \n  static getReport() {\n    return {\n      recentLogs: this.logs.slice(-50),\n      perfStats: Object.fromEntries(this.perfCounters.entries()),\n      summary: {\n        totalLogs: this.logs.length,\n        perfCounters: this.perfCounters.size,\n        slowOperations: Array.from(this.perfCounters.entries())\n          .filter(([_, stats]) => stats.maxTime > 16)\n          .map(([name, stats]) => ({ name, maxTime: stats.maxTime, avgTime: stats.totalTime / stats.count }))\n      }\n    };\n  }\n  \n  static clear() {\n    this.logs = [];\n    this.perfCounters.clear();\n  }\n}\n\n// Global state for CodeMirror integration\nlet currentPluginInstance: TrackEditsPlugin | null = null;\nlet isRejectingEdit = false;\n\n// DEBUG: Add global access for debugging\nif (DEBUG_MODE) {\n  (window as any).TrackEditsDebug = {\n    getReport: () => DebugMonitor.getReport(),\n    clearLogs: () => DebugMonitor.clear(),\n    getCurrentState: () => ({\n      currentPluginInstance: !!currentPluginInstance,\n      isRejectingEdit,\n      currentEdits: currentPluginInstance?.currentEdits?.length || 0,\n      hasSession: !!currentPluginInstance?.currentSession\n    }),\n    logCurrent: () => {\n      const state = (window as any).TrackEditsDebug.getCurrentState();\n      console.log('[Track Edits Debug]', state);\n      return state;\n    }\n  };\n  console.log('[Track Edits] Debug mode enabled. Access via window.TrackEditsDebug');\n}\n\n// State effects for decoration management\nconst addDecorationEffect = StateEffect.define<{edit: EditChange, decoration: Decoration}>();\nconst removeDecorationEffect = StateEffect.define<string>(); // edit ID\nconst clearAllDecorationsEffect = StateEffect.define<boolean>();\n\n// Custom widget for showing deleted text\nclass DeletionWidget extends WidgetType {\n  public editId: string; // Make public for StateField access\n  \n  constructor(private deletedText: string, editId: string) {\n    super();\n    this.editId = editId; // Store as public property\n  }\n  \n  toDOM(): HTMLElement {\n    const span = document.createElement('span');\n    span.className = 'track-edits-decoration track-edits-decoration-delete';\n    span.textContent = this.deletedText;\n    span.setAttribute('data-edit-id', this.editId);\n    span.style.cssText = `\n      color: #f85149;\n      text-decoration: line-through;\n      opacity: 0.7;\n      background: transparent;\n    `;\n    return span;\n  }\n}\n\n// Create decoration for edit visualization  \nfunction createEditDecoration(edit: EditChange): Decoration {\n  const attributes = { 'data-edit-id': edit.id };\n  \n  if (edit.type === 'insert') {\n    return Decoration.mark({\n      class: 'track-edits-decoration track-edits-decoration-insert',\n      attributes: attributes\n    });\n  } else if (edit.type === 'delete') {\n    return Decoration.widget({\n      widget: new DeletionWidget(edit.removedText || '', edit.id),\n      side: -1\n    });\n  }\n  \n  // Fallback\n  return Decoration.mark({ \n    class: 'track-edits-decoration track-edits-decoration-insert', \n    attributes \n  });\n}\n\n// StateField for managing decorations\nconst editDecorationField = StateField.define<DecorationSet>({\n  create() {\n    DebugMonitor.log('STATEFIELD_CREATE', { message: 'StateField created with empty decoration set' });\n    return Decoration.none;\n  },\n  update(decorations, tr) {\n    const timer = DebugMonitor.startTimer('StateField.update');\n    \n    const initialSize = decorations.size;\n    DebugMonitor.log('STATEFIELD_UPDATE_START', {\n      hasChanges: !!tr.changes,\n      changeCount: tr.changes ? tr.changes.desc.length : 0,\n      effectCount: tr.effects.length,\n      currentDecorations: initialSize,\n      docLength: tr.newDoc.length\n    });\n    \n    // Map existing decorations to new positions\n    const mapTimer = DebugMonitor.startTimer('decorations.map');\n    decorations = decorations.map(tr.changes);\n    DebugMonitor.endTimer(mapTimer);\n    \n    let addedDecorations = 0;\n    let removedDecorations = 0;\n    \n    // Process effects for new decorations\n    for (const effect of tr.effects) {\n      if (effect.is(addDecorationEffect)) {\n        const { edit, decoration } = effect.value;\n        \n        DebugMonitor.log('ADD_DECORATION_EFFECT', {\n          editId: edit.id,\n          editType: edit.type,\n          position: { from: edit.from, to: edit.to },\n          textLength: edit.text?.length || 0\n        });\n        \n        if (edit.type === 'delete') {\n          // Widget decorations for deletions\n          const pos = edit.from;\n          decorations = decorations.update({\n            add: [decoration.range(pos)]\n          });\n          addedDecorations++;\n        } else if (edit.type === 'insert') {\n          // Mark decorations for additions\n          const start = edit.from;\n          const end = start + (edit.text?.length || 0);\n          \n          if (end <= tr.newDoc.length && start <= end && start >= 0) {\n            decorations = decorations.update({\n              add: [decoration.range(start, end)]\n            });\n            addedDecorations++;\n          } else {\n            DebugMonitor.log('INVALID_DECORATION_POSITION', {\n              editId: edit.id,\n              start, end,\n              docLength: tr.newDoc.length,\n              reason: 'Position out of bounds'\n            });\n          }\n        }\n      } else if (effect.is(removeDecorationEffect)) {\n        const editId = effect.value;\n        DebugMonitor.log('REMOVE_DECORATION_EFFECT', { editId });\n        \n        decorations = decorations.update({\n          filter: (from, to, decoration) => {\n            const spec = (decoration as any).spec;\n            if (spec?.attributes?.['data-edit-id'] === editId) {\n              removedDecorations++;\n              return false;\n            }\n            if (spec?.widget && spec.widget.editId === editId) {\n              removedDecorations++;\n              return false;\n            }\n            return true;\n          }\n        });\n      } else if (effect.is(clearAllDecorationsEffect)) {\n        DebugMonitor.log('CLEAR_ALL_DECORATIONS_EFFECT', { previousSize: decorations.size });\n        removedDecorations = decorations.size;\n        decorations = Decoration.none;\n      }\n    }\n    \n    const finalSize = decorations.size;\n    DebugMonitor.log('STATEFIELD_UPDATE_END', {\n      initialSize,\n      finalSize,\n      addedDecorations,\n      removedDecorations,\n      netChange: finalSize - initialSize\n    });\n    \n    DebugMonitor.endTimer(timer);\n    return decorations;\n  },\n  provide: f => EditorView.decorations.from(f)\n});\n\n// ViewPlugin for change detection\nconst changeDetectionPlugin = ViewPlugin.fromClass(class {\n  constructor(private view: EditorView) {}\n  \n  update(update: ViewUpdate) {\n    const timer = DebugMonitor.startTimer('ViewPlugin.update');\n    \n    DebugMonitor.log('UPDATE', {\n      docChanged: update.docChanged,\n      isRejectingEdit,\n      hasPluginInstance: !!currentPluginInstance,\n      changeCount: update.changes ? update.changes.desc.length : 0,\n      viewportChanged: update.viewportChanged,\n      focusChanged: update.focusChanged\n    });\n    \n    // Check if we should process changes (plugin exists, tracking enabled, not rejecting)\n    const shouldProcessChanges = update.docChanged && \n                                 !isRejectingEdit && \n                                 currentPluginInstance &&\n                                 currentPluginInstance.settings.enableTracking &&\n                                 (!currentPluginInstance.toggleStateManager || \n                                  currentPluginInstance.toggleStateManager.isTrackingEnabled);\n    \n    if (shouldProcessChanges) {\n      const extractTimer = DebugMonitor.startTimer('extractEditsFromUpdate');\n      const edits = this.extractEditsFromUpdate(update);\n      DebugMonitor.endTimer(extractTimer);\n      \n      DebugMonitor.log('EDITS_EXTRACTED', {\n        editCount: edits.length,\n        edits: edits.map(e => ({ id: e.id, type: e.type, from: e.from, to: e.to, textLength: e.text?.length || 0 }))\n      });\n      \n      if (edits.length > 0) {\n        // Add decorations immediately\n        const decorationTimer = DebugMonitor.startTimer('createDecorations');\n        const decorationEffects = edits.map(edit => {\n          const decoration = createEditDecoration(edit);\n          return addDecorationEffect.of({ edit, decoration });\n        });\n        DebugMonitor.endTimer(decorationTimer);\n        \n        DebugMonitor.log('DECORATIONS_CREATED', {\n          effectCount: decorationEffects.length\n        });\n        \n        requestAnimationFrame(() => {\n          const dispatchTimer = DebugMonitor.startTimer('viewDispatch');\n          this.view.dispatch({ effects: decorationEffects });\n          DebugMonitor.endTimer(dispatchTimer);\n          \n          DebugMonitor.log('DECORATIONS_DISPATCHED', {\n            effectCount: decorationEffects.length\n          });\n        });\n        \n        // Update plugin state\n        currentPluginInstance.handleEditsFromCodeMirror(edits);\n      }\n    }\n    \n    DebugMonitor.endTimer(timer);\n  }\n  \n  extractEditsFromUpdate(update: ViewUpdate): EditChange[] {\n    const edits: EditChange[] = [];\n    \n    update.changes.iterChanges((from, to, fromB, toB, insert) => {\n      const removedText = update.startState.doc.sliceString(from, to);\n      const insertedText = insert.toString();\n      \n      // Create separate deletion and addition edits\n      if (removedText) {\n        edits.push({\n          id: generateId(),\n          type: 'delete',\n          from: from,\n          to: to,\n          text: '',\n          removedText: removedText,\n          timestamp: Date.now()\n        });\n      }\n      \n      if (insertedText) {\n        edits.push({\n          id: generateId(),\n          type: 'insert',\n          from: fromB,\n          to: toB,\n          text: insertedText,\n          removedText: '',\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    return edits;\n  }\n});\n\nexport default class TrackEditsPlugin extends Plugin {\n  settings: TrackEditsSettings;\n  editTracker: EditTracker;\n  editRenderer: EditRenderer;\n  clusterManager: EditClusterManager;\n  sidePanelView: EditSidePanelView | null = null;\n  toggleStateManager: ToggleStateManager | null = null;\n  currentSession: EditSession | null = null;\n  currentEdits: EditChange[] = [];\n  private currentEditorView: EditorView | null = null;\n  private ribbonIconEl: HTMLElement | null = null;\n  private debouncedSave = debounce(() => this.saveCurrentSession(), 1000);\n  private debouncedPanelUpdate = debounce(() => this.updateSidePanel(), 100);\n  private debouncedRibbonClick = debounce(() => this.handleRibbonClick(), 300);\n  private isProcessingChange = false;\n  private isRestartingSession = false;\n  private lastActiveFile: string | null = null;\n\n  async onload() {\n    await this.loadSettings();\n\n    // Set global reference for CodeMirror integration\n    currentPluginInstance = this;\n\n    this.editTracker = new EditTracker(this);\n    this.editRenderer = new EditRenderer(this);\n    this.clusterManager = new EditClusterManager(this);\n\n    // Initialize toggle state manager\n    this.toggleStateManager = new ToggleStateManager(this.app, (enabled) => {\n      if (enabled) {\n        this.startTracking();\n      } else {\n        this.handleToggleOff();\n      }\n    });\n\n    // Initialize global API\n    this.initializeGlobalAPI();\n\n    // Register CodeMirror extensions for native integration\n    this.registerEditorExtension([changeDetectionPlugin, editDecorationField]);\n\n    // Register remaining safe event handlers\n    this.registerSafeEventHandlers();\n    \n    // Register side panel view\n    this.registerView('track-edits-side-panel', (leaf) => new EditSidePanelView(leaf, this));\n\n    // Add commands\n    this.addCommands();\n\n    // Add settings tab\n    this.addSettingTab(new TrackEditsSettingsTab(this.app, this));\n\n    // Add ribbon icon\n    this.addRibbonIcon();\n\n    // Start tracking if enabled\n    if (this.settings.enableTracking) {\n      this.startTracking();\n    }\n\n    console.log('Track Edits v2.0 plugin loaded');\n  }\n\n  onunload() {\n    try {\n      this.stopTracking();\n      this.cleanupGlobalAPI();\n      \n      // Clean up toggle state manager\n      if (this.toggleStateManager) {\n        this.toggleStateManager.destroy();\n        this.toggleStateManager = null;\n      }\n      \n      console.log('Track Edits plugin unloaded');\n    } catch (error) {\n      console.error('Track Edits: Error during plugin unload:', error);\n    }\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n  }\n\n  private initializeGlobalAPI() {\n    if (!window.WriterrlAPI) {\n      window.WriterrlAPI = {} as WriterrlGlobalAPI;\n    }\n\n    window.WriterrlAPI.trackEdits = {\n      getCurrentSession: () => this.currentSession,\n      getSessionHistory: () => this.editTracker.getSessionHistory(),\n      startTracking: () => this.startTracking(),\n      stopTracking: () => this.stopTracking(),\n      exportSession: (sessionId: string) => this.exportSession(sessionId)\n    };\n  }\n\n  private cleanupGlobalAPI() {\n    if (window.WriterrlAPI && window.WriterrlAPI.trackEdits) {\n      delete window.WriterrlAPI.trackEdits;\n    }\n  }\n\n  private registerSafeEventHandlers() {\n    console.log('[Track Edits DEBUG] Registering event handlers');\n    \n    // CodeMirror ViewPlugin handles edit detection - no need for editor-change events\n    \n    // Handle active leaf changes with proper session state checking\n    this.registerEvent(\n      this.app.workspace.on('active-leaf-change', () => {\n        if (this.isRestartingSession) return; // Prevent recursion during restart\n        if (!this.settings || !this.settings.enableTracking) return;\n        \n        const activeFile = this.app.workspace.getActiveFile();\n        const currentFilePath = activeFile?.path || null;\n        \n        // Only restart if we actually switched to a different file AND we have a session AND it's a real file change\n        if (this.currentSession && \n            this.lastActiveFile !== currentFilePath && \n            this.lastActiveFile !== null && // Don't restart on initial load\n            currentFilePath !== null) { // Don't restart when closing files\n          \n          console.log('Track Edits: File changed from', this.lastActiveFile, 'to', currentFilePath);\n          this.lastActiveFile = currentFilePath;\n          this.restartSession();\n        } else if (!this.currentSession && \n                   activeFile && \n                   currentFilePath !== this.lastActiveFile && \n                   !this.isRestartingSession) {\n          // Start tracking if no session exists and we have a file (but not during ribbon operations)\n          console.log('Track Edits: Starting new session for file:', currentFilePath);\n          this.lastActiveFile = currentFilePath;\n          this.startTracking();\n        }\n      })\n    );\n  }\n  \n  private handleEditorChange(editor: Editor, info: MarkdownView | any) {\n    console.log('[Track Edits DEBUG] handleEditorChange called');\n    console.log('[Track Edits DEBUG] Editor:', editor);\n    console.log('[Track Edits DEBUG] Info:', info);\n    console.log('[Track Edits DEBUG] Current session:', this.currentSession);\n    console.log('[Track Edits DEBUG] Settings enableTracking:', this.settings.enableTracking);\n    \n    const changes = this.extractChangesFromEditor(editor);\n    console.log('[Track Edits DEBUG] Extracted changes:', changes);\n    \n    if (changes.length === 0) {\n      console.log('[Track Edits DEBUG] No changes detected, returning early');\n      return;\n    }\n    \n    console.log('Track Edits v2.0: Recording', changes.length, 'changes');\n    \n    // Add to current edits array for clustering\n    this.currentEdits.push(...changes);\n    console.log('[Track Edits DEBUG] Current edits array length:', this.currentEdits.length);\n    \n    // Immediate decoration rendering\n    console.log('[Track Edits DEBUG] About to call showChangeDecorations');\n    this.editRenderer.showChangeDecorations(changes);\n    console.log('[Track Edits DEBUG] Called showChangeDecorations');\n    \n    // Record changes in tracker\n    this.editTracker.recordChanges(this.currentSession.id, changes);\n    \n    // Batched side panel update\n    this.debouncedPanelUpdate();\n    \n    // Save session\n    this.debouncedSave();\n  }\n  \n  private updateSidePanel() {\n    if (this.sidePanelView) {\n      const clusters = this.clusterManager.clusterEdits(this.currentEdits);\n      this.sidePanelView.updateClusters(clusters);\n    }\n  }\n\n  private extractChangesFromEditor(editor: Editor): EditChange[] {\n    console.log('[Track Edits DEBUG] extractChangesFromEditor called');\n    \n    // Get the last change from editor transaction\n    const doc = editor.getDoc();\n    const cursor = editor.getCursor();\n    console.log('[Track Edits DEBUG] Cursor position:', cursor);\n    \n    const line = doc.getLine(cursor.line);\n    console.log('[Track Edits DEBUG] Current line:', line);\n    console.log('[Track Edits DEBUG] Line length:', line?.length);\n    \n    // Create a simple change record for demonstration\n    // In production, you'd hook into CodeMirror's transaction system\n    if (line && line.length > 0) {\n      console.log('Track Edits v2.0: Detected editor change at line', cursor.line, 'position', cursor.ch);\n      \n      // Calculate document position (absolute position from start of document)\n      const docPosition = editor.posToOffset(cursor);\n      const fromPos = Math.max(0, docPosition - 1);\n      const toPos = docPosition;\n      \n      const characterAtCursor = line.charAt(cursor.ch - 1) || '';\n      console.log('[Track Edits DEBUG] Character at cursor:', characterAtCursor);\n      console.log('[Track Edits DEBUG] Doc position:', docPosition);\n      console.log('[Track Edits DEBUG] From pos:', fromPos, 'To pos:', toPos);\n      \n      const change = {\n        id: generateId(),\n        timestamp: Date.now(),\n        type: 'insert' as const,\n        from: fromPos,\n        to: toPos,\n        text: characterAtCursor,\n        author: 'user'\n      };\n      \n      console.log('[Track Edits DEBUG] Created change object:', change);\n      return [change];\n    }\n    \n    console.log('[Track Edits DEBUG] No valid line found, returning empty array');\n    return [];\n  }\n\n  private addRibbonIcon() {\n    this.ribbonIconEl = super.addRibbonIcon('edit', 'Track Edits', (evt: MouseEvent) => {\n      // Use ToggleStateManager to handle ribbon clicks\n      if (this.toggleStateManager) {\n        this.toggleStateManager.setTrackingEnabled(!this.toggleStateManager.isTrackingEnabled);\n      } else {\n        // Fallback to direct toggle\n        this.debouncedRibbonClick();\n      }\n    });\n    \n    // Connect ribbon icon to ToggleStateManager\n    if (this.ribbonIconEl && this.toggleStateManager) {\n      this.toggleStateManager.setRibbonIcon(this.ribbonIconEl);\n    }\n    \n    this.updateRibbonIcon();\n  }\n\n  private updateRibbonIcon() {\n    if (this.ribbonIconEl) {\n      const isTracking = !!this.currentSession;\n      const tooltipText = isTracking ? 'Track Edits: ON (Click to stop)' : 'Track Edits: OFF (Click to start)';\n      this.ribbonIconEl.setAttribute('aria-label', tooltipText);\n      this.ribbonIconEl.setAttribute('title', tooltipText);\n    }\n  }\n\n  private handleRibbonClick() {\n    // Prevent recursive calls during ribbon toggle\n    if (this.isRestartingSession) {\n      console.log('Track Edits: Ribbon click ignored during session restart');\n      return;\n    }\n\n    // Set flag to prevent active-leaf-change interference\n    this.isRestartingSession = true;\n    \n    try {\n      if (this.currentSession) {\n        this.stopTracking();\n        console.log('Track Edits: Stopped tracking via ribbon icon');\n      } else {\n        this.startTracking();\n        console.log('Track Edits: Started tracking via ribbon icon');\n      }\n    } catch (error) {\n      console.error('Track Edits: Error in ribbon icon handler:', error);\n    } finally {\n      // Clear flag after a brief delay to allow UI to settle\n      setTimeout(() => {\n        this.isRestartingSession = false;\n      }, 100);\n    }\n  }\n\n  private addCommands() {\n    this.addCommand({\n      id: 'start-tracking',\n      name: 'Start tracking edits',\n      callback: () => this.startTracking()\n    });\n\n    this.addCommand({\n      id: 'stop-tracking',\n      name: 'Stop tracking edits',\n      callback: () => this.stopTracking()\n    });\n\n    this.addCommand({\n      id: 'toggle-side-panel',\n      name: 'Toggle Track Edits side panel',\n      callback: () => this.toggleSidePanel()\n    });\n\n    this.addCommand({\n      id: 'export-current-session',\n      name: 'Export current session',\n      callback: () => this.exportCurrentSession()\n    });\n\n    this.addCommand({\n      id: 'view-edit-history',\n      name: 'View edit history',\n      callback: () => this.viewEditHistory()\n    });\n\n    this.addCommand({\n      id: 'clear-edit-history',\n      name: 'Clear edit history',\n      callback: () => this.clearEditHistory()\n    });\n\n    // DEBUG COMMANDS - Remove before production\n    if (DEBUG_MODE) {\n      this.addCommand({\n        id: 'debug-show-report',\n        name: '\uD83D\uDC1B Show Debug Report',\n        callback: () => {\n          const report = DebugMonitor.getReport();\n          const modal = document.createElement('div');\n          modal.style.cssText = `\n            position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);\n            width: 80%; max-width: 800px; height: 70%; \n            background: var(--background-primary); border: 1px solid var(--background-modifier-border);\n            border-radius: 8px; padding: 20px; z-index: 10000;\n            overflow-y: auto; font-family: var(--font-monospace);\n          `;\n          \n          const reportText = JSON.stringify(report, null, 2);\n          modal.innerHTML = `\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n              <h2>Track Edits Debug Report</h2>\n              <div>\n                <button onclick=\"navigator.clipboard.writeText(this.dataset.report)\" data-report=\"${reportText.replace(/\"/g, '&quot;')}\" style=\"padding: 5px 10px; margin-right: 5px;\">Copy All</button>\n                <button onclick=\"this.parentElement.parentElement.parentElement.remove()\" style=\"padding: 5px 10px;\">Close</button>\n              </div>\n            </div>\n            <div style=\"margin-bottom: 15px;\">\n              <h3>Performance Stats <button onclick=\"navigator.clipboard.writeText(JSON.stringify(${JSON.stringify(report.perfStats)}, null, 2))\" style=\"font-size: 11px; padding: 2px 5px;\">Copy</button></h3>\n              <pre style=\"user-select: text; cursor: text; background: var(--background-secondary); padding: 10px; border-radius: 4px;\">${JSON.stringify(report.perfStats, null, 2)}</pre>\n            </div>\n            <div style=\"margin-bottom: 15px;\">\n              <h3>Summary <button onclick=\"navigator.clipboard.writeText(JSON.stringify(${JSON.stringify(report.summary)}, null, 2))\" style=\"font-size: 11px; padding: 2px 5px;\">Copy</button></h3>\n              <pre style=\"user-select: text; cursor: text; background: var(--background-secondary); padding: 10px; border-radius: 4px;\">${JSON.stringify(report.summary, null, 2)}</pre>\n            </div>\n            <div>\n              <h3>Recent Logs (Last 50) <button onclick=\"navigator.clipboard.writeText(JSON.stringify(${JSON.stringify(report.recentLogs)}, null, 2))\" style=\"font-size: 11px; padding: 2px 5px;\">Copy</button></h3>\n              <pre style=\"user-select: text; cursor: text; background: var(--background-secondary); padding: 10px; border-radius: 4px; font-size: 11px; max-height: 400px; overflow-y: auto;\">${JSON.stringify(report.recentLogs, null, 2)}</pre>\n            </div>\n          `;\n          \n          document.body.appendChild(modal);\n        }\n      });\n\n      this.addCommand({\n        id: 'debug-clear-logs',\n        name: '\uD83D\uDC1B Clear Debug Logs',\n        callback: () => {\n          DebugMonitor.clear();\n          console.log('[Track Edits] Debug logs cleared');\n        }\n      });\n\n      this.addCommand({\n        id: 'debug-current-state',\n        name: '\uD83D\uDC1B Show Current State',\n        callback: () => {\n          const state = {\n            currentSession: this.currentSession,\n            currentEdits: this.currentEdits.length,\n            isRejectingEdit,\n            hasPluginInstance: !!currentPluginInstance,\n            settings: this.settings,\n            sidePanelView: !!this.sidePanelView\n          };\n          console.log('[Track Edits] Current State:', state);\n        }\n      });\n\n      this.addCommand({\n        id: 'debug-dump-logs-console',\n        name: '\uD83D\uDC1B Dump Logs to Console',\n        callback: () => {\n          const report = DebugMonitor.getReport();\n          console.log('=== TRACK EDITS DEBUG REPORT ===');\n          console.log('Performance Stats:', report.perfStats);\n          console.log('Summary:', report.summary);\n          console.log('Recent Logs:', report.recentLogs);\n          console.log('=== END REPORT ===');\n        }\n      });\n    }\n  }\n\n  startTracking() {\n    // Prevent multiple simultaneous session starts\n    if (this.currentSession && !this.isRestartingSession) {\n      console.log('Track Edits: Session already active, stopping first');\n      this.stopTracking();\n    }\n\n    const activeFile = this.app.workspace.getActiveFile();\n    if (!activeFile) {\n      console.log('Track Edits: No active file to track');\n      return;\n    }\n\n    // Get and store current editor view for accept/reject operations (robust resolution like v2.0)\n    this.currentEditorView = this.findCurrentEditorView();\n    if (this.currentEditorView) {\n      DebugMonitor.log('EDITOR_VIEW_STORED', { \n        hasView: !!this.currentEditorView,\n        method: 'successful'\n      });\n    } else {\n      DebugMonitor.log('EDITOR_VIEW_STORAGE_FAILED', { reason: 'no editor found' });\n      console.warn('Track Edits: No active editor found during startTracking');\n    }\n\n    // Additional safety check - prevent starting if we're already starting\n    if (this.currentSession && this.currentSession.id && this.currentSession.startTime) {\n      console.log('Track Edits: Preventing duplicate session creation');\n      return;\n    }\n\n    // Update tracked file\n    this.lastActiveFile = activeFile.path;\n\n    this.currentSession = {\n      id: generateId(),\n      startTime: Date.now(),\n      changes: [],\n      wordCount: 0,\n      characterCount: 0\n    };\n    \n    // Reset current edits array\n    this.currentEdits = [];\n\n    this.editTracker.startSession(this.currentSession, activeFile);\n    this.editRenderer.showTrackingIndicator();\n    \n    // Show side panel if setting is enabled\n    if (this.settings.showSidePanelOnStart) {\n      this.showSidePanel();\n    }\n    \n    console.log('Track Edits v2.0: Started tracking session', this.currentSession.id);\n    \n    // Update ribbon icon tooltip\n    this.updateRibbonIcon();\n    \n    // Update side panel to show new status\n    this.updateSidePanel();\n  }\n\n  stopTracking() {\n    try {\n      if (this.currentSession) {\n        this.currentSession.endTime = Date.now();\n        this.saveCurrentSession();\n        if (this.editTracker) {\n          this.editTracker.endSession(this.currentSession.id);\n        }\n        if (this.editRenderer) {\n          this.editRenderer.hideTrackingIndicator();\n        }\n        \n        // Clear all decorations from the document\n        this.clearAllDecorations();\n        \n        // Clear current edits\n        this.currentEdits = [];\n        this.currentSession = null;\n        this.lastActiveFile = null;\n        \n        // Clear stored editor view\n        this.currentEditorView = null;\n        \n        // Update side panel\n        if (this.sidePanelView) {\n          this.sidePanelView.updateClusters([]);\n        }\n      }\n    } catch (error) {\n      console.error('Track Edits: Error stopping tracking:', error);\n      // Ensure currentSession is cleared even if other operations fail\n      this.currentSession = null;\n      this.currentEdits = [];\n      this.lastActiveFile = null;\n    }\n    \n    // Update ribbon icon tooltip\n    this.updateRibbonIcon();\n    \n    // Update side panel to show new status\n    this.updateSidePanel();\n  }\n\n  private restartSession() {\n    try {\n      if (this.isRestartingSession) {\n        console.log('Track Edits: Restart already in progress, ignoring');\n        return; // Prevent recursive calls\n      }\n      if (!this.currentSession) {\n        console.log('Track Edits: No session to restart');\n        return; // No session to restart\n      }\n      \n      this.isRestartingSession = true;\n      console.log('Track Edits v2.0: Restarting session due to file change');\n      \n      // Store the current session ID for logging\n      const previousSessionId = this.currentSession.id;\n      \n      this.stopTracking();\n      \n      // Longer delay to ensure cleanup completes and prevent rapid restarts\n      setTimeout(() => {\n        try {\n          if (this.settings.enableTracking && !this.currentSession) {\n            console.log('Track Edits: Starting new session after restart from', previousSessionId);\n            this.startTracking();\n          }\n        } catch (startError) {\n          console.error('Track Edits: Error starting new session after restart:', startError);\n        } finally {\n          this.isRestartingSession = false;\n        }\n      }, 150); // Increased delay to ensure proper cleanup\n    } catch (error) {\n      console.error('Track Edits: Error restarting session:', error);\n      this.isRestartingSession = false;\n    }\n  }\n\n  private async saveCurrentSession() {\n    if (this.currentSession && this.settings.autoSave) {\n      await this.editTracker.saveSession(this.currentSession);\n    }\n  }\n\n  private exportCurrentSession() {\n    if (!this.currentSession) return;\n    this.exportSession(this.currentSession.id);\n  }\n\n  private exportSession(sessionId: string): string {\n    const session = this.editTracker.getSession(sessionId);\n    if (!session) return '';\n\n    const exportData = this.editTracker.formatSessionForExport(session, this.settings.exportFormat);\n    \n    // Create and download file\n    const blob = new Blob([exportData], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `edit-session-${sessionId}.${this.settings.exportFormat}`;\n    a.click();\n    URL.revokeObjectURL(url);\n\n    return exportData;\n  }\n\n  private viewEditHistory() {\n    // Open a modal or view to show edit history\n    console.log('Opening edit history view...');\n  }\n\n  private clearEditHistory() {\n    this.editTracker.clearHistory();\n  }\n  \n  private async toggleSidePanel() {\n    const existingLeaf = this.app.workspace.getLeavesOfType('track-edits-side-panel')[0];\n    \n    if (existingLeaf) {\n      existingLeaf.detach();\n    } else {\n      await this.showSidePanel();\n    }\n  }\n  \n  private async showSidePanel() {\n    const rightLeaf = this.app.workspace.getRightLeaf(false);\n    await rightLeaf.setViewState({\n      type: 'track-edits-side-panel',\n      active: true\n    });\n    \n    this.sidePanelView = rightLeaf.view as EditSidePanelView;\n    this.app.workspace.revealLeaf(rightLeaf);\n  }\n  \n  acceptEditCluster(clusterId: string) {\n    const timer = DebugMonitor.startTimer('acceptEditCluster');\n    \n    // Get the cluster and its edits\n    const cluster = this.clusterManager.getCluster(clusterId);\n    if (!cluster) {\n      DebugMonitor.log('ACCEPT_CLUSTER_FAILED', { clusterId, reason: 'cluster not found' });\n      DebugMonitor.endTimer(timer);\n      return;\n    }\n\n    DebugMonitor.log('ACCEPT_CLUSTER_START', {\n      clusterId,\n      editCount: cluster.edits.length,\n      editIds: cluster.edits.map(e => e.id)\n    });\n\n    // Remove decorations from CodeMirror view for this cluster's edits\n    DebugMonitor.log('ACCEPT_REMOVING_DECORATIONS', {\n      hasStoredView: !!this.currentEditorView,\n      editIds: cluster.edits.map(e => e.id)\n    });\n    this.removeDecorationsFromView(cluster.edits.map(e => e.id));\n\n    // Remove edits from current array that belong to this cluster\n    this.currentEdits = this.currentEdits.filter(edit => \n      !cluster.edits.find(clusterEdit => clusterEdit.id === edit.id)\n    );\n    \n    // Update side panel display\n    this.updateSidePanel();\n    \n    DebugMonitor.log('ACCEPT_CLUSTER_COMPLETE', {\n      clusterId,\n      remainingEdits: this.currentEdits.length\n    });\n    \n    DebugMonitor.endTimer(timer);\n  }\n  \n  rejectEditCluster(clusterId: string) {\n    const timer = DebugMonitor.startTimer('rejectEditCluster');\n    \n    // Get the cluster and its edits\n    const cluster = this.clusterManager.getCluster(clusterId);\n    if (!cluster) {\n      DebugMonitor.log('REJECT_CLUSTER_FAILED', { clusterId, reason: 'cluster not found' });\n      DebugMonitor.endTimer(timer);\n      return;\n    }\n\n    DebugMonitor.log('REJECT_CLUSTER_START', {\n      clusterId,\n      editCount: cluster.edits.length,\n      editIds: cluster.edits.map(e => e.id)\n    });\n\n    // Get editor view with fallback like v2.0\n    let editorView = this.currentEditorView;\n    \n    DebugMonitor.log('REJECT_CHECKING_VIEW', {\n      hasStoredView: !!this.currentEditorView,\n      viewType: this.currentEditorView ? this.currentEditorView.constructor.name : 'null'\n    });\n    \n    if (!editorView) {\n      DebugMonitor.log('REJECT_FALLBACK_SEARCH', { reason: 'no stored editor view, searching' });\n      editorView = this.findCurrentEditorView();\n    }\n    \n    if (!editorView) {\n      DebugMonitor.log('REJECT_CLUSTER_FAILED', { reason: 'no editor view available' });\n      DebugMonitor.endTimer(timer);\n      return;\n    }\n\n    // Debug: Log all edits in cluster before filtering\n    DebugMonitor.log('REJECT_ALL_EDITS_IN_CLUSTER', {\n      allEdits: cluster.edits.map(e => ({ id: e.id, type: e.type, from: e.from, to: e.to, textLength: e.text?.length || 0 }))\n    });\n\n    // Process both insertions (remove) and deletions (restore)\n    const insertionsToRemove = cluster.edits\n      .filter(edit => edit.type === 'insert')\n      .sort((a, b) => b.from - a.from); // Reverse order to avoid position shifts\n\n    const deletionsToRestore = cluster.edits\n      .filter(edit => edit.type === 'delete')\n      .sort((a, b) => a.from - b.from); // Forward order for deletions\n\n    DebugMonitor.log('REJECT_FILTERED_EDITS', {\n      insertionsToRemove: insertionsToRemove.map(e => ({ id: e.id, type: e.type, from: e.from, to: e.to, textLength: e.text?.length || 0 })),\n      deletionsToRestore: deletionsToRestore.map(e => ({ id: e.id, type: e.type, from: e.from, to: e.to, removedTextLength: e.removedText?.length || 0 }))\n    });\n\n    // Use CodeMirror directly like accept does, not Obsidian Editor API\n    const doc = editorView.state.doc;\n    \n    // Revert text changes for insertions using CodeMirror API\n    // Prevent recursion during our own edit\n    isRejectingEdit = true;\n    \n    try {\n      DebugMonitor.log('REJECT_TEXT_PROCESSING', {\n        insertionsToRemove: insertionsToRemove.length,\n        deletionsToRestore: deletionsToRestore.length,\n        docLength: doc.length\n      });\n      \n      // Build transaction to remove insertions and restore deletions\n      const changes = [];\n      \n      // First, remove all insertions (in reverse order)\n      for (const edit of insertionsToRemove) {\n        if (edit.text) {\n          DebugMonitor.log('REJECT_PROCESSING_INSERTION', {\n            editId: edit.id,\n            editText: edit.text,\n            editFrom: edit.from,\n            editTextLength: edit.text.length\n          });\n          \n          // Validate text exists at expected position\n          const currentText = doc.sliceString(edit.from, edit.from + edit.text.length);\n          \n          DebugMonitor.log('REJECT_TEXT_COMPARISON', {\n            editId: edit.id,\n            position: { from: edit.from, to: edit.from + edit.text.length },\n            expectedText: edit.text,\n            currentText,\n            matches: currentText === edit.text\n          });\n          \n          if (currentText === edit.text) {\n            changes.push({ from: edit.from, to: edit.from + edit.text.length, insert: '' });\n            DebugMonitor.log('REJECT_REVERT_INSERT', {\n              editId: edit.id,\n              removedText: edit.text\n            });\n          } else {\n            DebugMonitor.log('REJECT_REVERT_SKIPPED', {\n              editId: edit.id,\n              reason: 'text mismatch',\n              expected: edit.text,\n              found: currentText\n            });\n          }\n        }\n      }\n\n      // Then, restore all deletions (in forward order)\n      for (const edit of deletionsToRestore) {\n        if (edit.removedText) {\n          DebugMonitor.log('REJECT_PROCESSING_DELETION', {\n            editId: edit.id,\n            removedText: edit.removedText,\n            editFrom: edit.from,\n            removedTextLength: edit.removedText.length\n          });\n          \n          // Insert the deleted text back at its original position\n          changes.push({ from: edit.from, to: edit.from, insert: edit.removedText });\n          DebugMonitor.log('REJECT_RESTORE_DELETION', {\n            editId: edit.id,\n            restoredText: edit.removedText,\n            position: edit.from\n          });\n        }\n      }\n      \n      // Apply all text changes and decoration removals in single transaction\n      const decorationRemoveEffects = cluster.edits.map(edit => \n        removeDecorationEffect.of(edit.id)\n      );\n      \n      if (changes.length > 0) {\n        const transaction = editorView.state.update({ \n          changes,\n          effects: decorationRemoveEffects\n        });\n        editorView.dispatch(transaction);\n        DebugMonitor.log('REJECT_CHANGES_APPLIED', {\n          changeCount: changes.length,\n          effectCount: decorationRemoveEffects.length\n        });\n      } else {\n        // Only dispatch decoration effects if no text changes\n        editorView.dispatch({\n          effects: decorationRemoveEffects\n        });\n      }\n      \n      DebugMonitor.log('REJECT_DISPATCH_COMPLETE', {\n        processedEdits: insertionsToRemove.length + deletionsToRestore.length,\n        effectCount: decorationRemoveEffects.length\n      });\n    } finally {\n      isRejectingEdit = false;\n    }\n\n    // Remove edits from current array that belong to this cluster\n    this.currentEdits = this.currentEdits.filter(edit => \n      !cluster.edits.find(clusterEdit => clusterEdit.id === edit.id)\n    );\n    \n    // Update side panel display\n    this.updateSidePanel();\n    \n    DebugMonitor.log('REJECT_CLUSTER_COMPLETE', {\n      clusterId,\n      remainingEdits: this.currentEdits.length\n    });\n    \n    DebugMonitor.endTimer(timer);\n  }\n\n  // Batch operations for better performance\n  acceptAllEditClusters(clusterIds: string[]) {\n    const timer = DebugMonitor.startTimer('acceptAllEditClusters');\n    DebugMonitor.log('ACCEPT_ALL_START', { clusterIds, count: clusterIds.length });\n    \n    // Process all clusters without intermediate side panel updates\n    clusterIds.forEach(clusterId => {\n      const cluster = this.clusterManager.getCluster(clusterId);\n      if (cluster && this.currentEditorView) {\n        // Remove decorations for each cluster\n        cluster.edits.forEach(edit => {\n          this.currentEditorView!.dispatch({\n            effects: removeDecorationEffect.of(edit.id)\n          });\n        });\n        \n        // Remove edits from current edits array\n        this.currentEdits = this.currentEdits.filter(edit => \n          !cluster.edits.find(clusterEdit => clusterEdit.id === edit.id)\n        );\n      }\n    });\n    \n    // Single side panel update at the end\n    this.updateSidePanel();\n    \n    DebugMonitor.log('ACCEPT_ALL_COMPLETE', {\n      processedCount: clusterIds.length,\n      remainingEdits: this.currentEdits.length\n    });\n    DebugMonitor.endTimer(timer);\n  }\n\n  rejectAllEditClusters(clusterIds: string[]) {\n    const timer = DebugMonitor.startTimer('rejectAllEditClusters');\n    DebugMonitor.log('REJECT_ALL_START', { clusterIds, count: clusterIds.length });\n    \n    // Process all clusters without intermediate side panel updates\n    clusterIds.forEach(clusterId => {\n      const cluster = this.clusterManager.getCluster(clusterId);\n      if (cluster && this.currentEditorView) {\n        // Group edits by type\n        const insertionsToRemove = cluster.edits.filter(edit => edit.type === 'insert');\n        const deletionsToRestore = cluster.edits.filter(edit => edit.type === 'delete');\n        \n        // Remove decorations and restore text\n        cluster.edits.forEach(edit => {\n          this.currentEditorView!.dispatch({\n            effects: removeDecorationEffect.of(edit.id)\n          });\n        });\n        \n        // Apply CodeMirror changes for text restoration\n        if (insertionsToRemove.length > 0 || deletionsToRestore.length > 0) {\n          const doc = this.currentEditorView.state.doc;\n          const changes: ChangeSpec[] = [];\n          \n          // Remove insertions and restore deletions\n          for (const edit of insertionsToRemove) {\n            if (edit.text) {\n              const currentText = doc.sliceString(edit.from, edit.from + edit.text.length);\n              if (currentText === edit.text) {\n                changes.push({ from: edit.from, to: edit.from + edit.text.length, insert: '' });\n              }\n            }\n          }\n          \n          for (const edit of deletionsToRestore) {\n            if (edit.removedText) {\n              changes.push({ from: edit.from, to: edit.from, insert: edit.removedText });\n            }\n          }\n          \n          if (changes.length > 0) {\n            this.currentEditorView.dispatch({ changes });\n          }\n        }\n        \n        // Remove edits from current edits array\n        this.currentEdits = this.currentEdits.filter(edit => \n          !cluster.edits.find(clusterEdit => clusterEdit.id === edit.id)\n        );\n      }\n    });\n    \n    // Single side panel update at the end\n    this.updateSidePanel();\n    \n    DebugMonitor.log('REJECT_ALL_COMPLETE', {\n      processedCount: clusterIds.length,\n      remainingEdits: this.currentEdits.length\n    });\n    DebugMonitor.endTimer(timer);\n  }\n\n  private findCurrentEditorView(): EditorView | null {\n    // Method 1: Try active view first\n    const activeLeaf = this.app.workspace.getActiveViewOfType(MarkdownView);\n    if (activeLeaf && activeLeaf.editor) {\n      const editorView = (activeLeaf.editor as any).cm as EditorView;\n      if (editorView) {\n        DebugMonitor.log('FOUND_EDITOR_VIEW', { method: 'active_view' });\n        return editorView;\n      }\n    }\n\n    // Method 2: Search all workspace leaves for MarkdownView (v2.0 fallback pattern)\n    const leaves = this.app.workspace.getLeavesOfType('markdown');\n    for (const leaf of leaves) {\n      const view = leaf.view as MarkdownView;\n      if (view && view.editor) {\n        const editorView = (view.editor as any).cm as EditorView;\n        if (editorView) {\n          DebugMonitor.log('FOUND_EDITOR_VIEW', { method: 'leaf_search', leafId: leaf.id });\n          return editorView;\n        }\n      }\n    }\n\n    // Method 3: Try the most recently active leaf (last resort)\n    const mostRecentLeaf = this.app.workspace.getMostRecentLeaf();\n    if (mostRecentLeaf && mostRecentLeaf.view instanceof MarkdownView && mostRecentLeaf.view.editor) {\n      const editorView = (mostRecentLeaf.view.editor as any).cm as EditorView;\n      if (editorView) {\n        DebugMonitor.log('FOUND_EDITOR_VIEW', { method: 'most_recent_leaf' });\n        return editorView;\n      }\n    }\n\n    DebugMonitor.log('EDITOR_VIEW_NOT_FOUND', { \n      activeLeafExists: !!activeLeaf,\n      markdownLeavesCount: leaves.length,\n      mostRecentLeafExists: !!mostRecentLeaf\n    });\n    return null;\n  }\n\n  private removeDecorationsFromView(editIds: string[]) {\n    let editorView = this.currentEditorView;\n    \n    // If no stored view, try to find current one (v2.0 fallback pattern)\n    if (!editorView) {\n      DebugMonitor.log('REMOVE_DECORATIONS_FALLBACK', { reason: 'no stored editor view, searching' });\n      editorView = this.findCurrentEditorView();\n    }\n    \n    if (!editorView) {\n      DebugMonitor.log('REMOVE_DECORATIONS_FAILED', { reason: 'no editor view available' });\n      return;\n    }\n\n    const removeEffects = editIds.map(editId => removeDecorationEffect.of(editId));\n    \n    DebugMonitor.log('REMOVING_DECORATIONS', {\n      editIds,\n      effectCount: removeEffects.length,\n      hasEditorView: !!editorView,\n      usingStored: editorView === this.currentEditorView\n    });\n\n    editorView.dispatch({ effects: removeEffects });\n  }\n\n  private handleToggleOff() {\n    // Epic's decision tree: Check for pending edits\n    const pendingEditCount = this.currentEdits.length;\n    \n    DebugMonitor.log('HANDLE_TOGGLE_OFF', {\n      pendingEdits: pendingEditCount,\n      hasSession: !!this.currentSession\n    });\n\n    // If no pending edits, toggle off directly\n    if (pendingEditCount === 0) {\n      DebugMonitor.log('TOGGLE_OFF_NO_EDITS', { action: 'direct_toggle' });\n      this.stopTracking();\n      return;\n    }\n\n    // TODO: Add \"skip confirmation\" logic in future update when checkbox is working\n\n    // Show confirmation modal for pending edits (Epic's core UX pattern)\n    DebugMonitor.log('TOGGLE_OFF_SHOW_MODAL', { pendingEdits: pendingEditCount });\n    this.showToggleConfirmationModal(pendingEditCount);\n  }\n\n  private showToggleConfirmationModal(editCount: number) {\n    const modal = new ToggleConfirmationModal(this.app, {\n      editCount,\n      onConfirm: () => {\n        DebugMonitor.log('TOGGLE_CONFIRMATION_CONFIRMED', { editCount });\n        this.discardEditsAndStop();\n      },\n      onCancel: () => {\n        DebugMonitor.log('TOGGLE_CONFIRMATION_CANCELLED', { editCount });\n        // Reset toggle state back to enabled since user cancelled\n        // Do NOT call setTrackingEnabled as it triggers the callback again\n        // Just update the UI state directly\n        if (this.toggleStateManager && this.ribbonIconEl) {\n          // Manually update UI without triggering callback\n          this.ribbonIconEl.classList.add('track-edits-enabled');\n          this.ribbonIconEl.classList.remove('track-edits-disabled');\n        }\n      }\n    });\n    \n    modal.open();\n  }\n\n  private discardEditsAndStop() {\n    // Epic's approach: Use existing proven reject functionality\n    const clusters = this.clusterManager.clusterEdits(this.currentEdits);\n    const clusterIds = clusters.map(cluster => cluster.id);\n    \n    if (clusterIds.length > 0) {\n      DebugMonitor.log('DISCARD_EDITS_VIA_REJECT', { \n        clusterCount: clusterIds.length,\n        method: 'rejectAllEditClusters'\n      });\n      // Leverage existing battle-tested reject functionality\n      this.rejectAllEditClusters(clusterIds);\n    } else {\n      // Fallback to direct clearing if no clusters\n      DebugMonitor.log('DISCARD_EDITS_DIRECT_CLEAR', { \n        editCount: this.currentEdits.length,\n        method: 'clearAllDecorations'\n      });\n      this.clearAllDecorations();\n    }\n    \n    // Complete the stop tracking process\n    this.stopTracking();\n  }\n\n  private clearAllDecorations() {\n    let editorView = this.currentEditorView;\n    \n    // If no stored view, try to find current one\n    if (!editorView) {\n      editorView = this.findCurrentEditorView();\n    }\n    \n    if (!editorView) {\n      DebugMonitor.log('CLEAR_ALL_DECORATIONS_FAILED', { reason: 'no editor view available' });\n      return;\n    }\n\n    DebugMonitor.log('CLEAR_ALL_DECORATIONS_START', {\n      currentEditsCount: this.currentEdits.length,\n      hasEditorView: !!editorView\n    });\n\n    // Use our custom clear all decorations effect\n    editorView.dispatch({\n      effects: clearAllDecorationsEffect.of(true)\n    });\n\n    DebugMonitor.log('CLEAR_ALL_DECORATIONS_COMPLETE', {\n      method: 'clearAllDecorationsEffect'\n    });\n  }\n\n  handleEditsFromCodeMirror(edits: EditChange[]) {\n    const timer = DebugMonitor.startTimer('handleEditsFromCodeMirror');\n    \n    DebugMonitor.log('HANDLE_EDITS', {\n      editCount: edits.length,\n      enableTracking: this.settings.enableTracking,\n      hasSession: !!this.currentSession,\n      currentEditsCount: this.currentEdits.length,\n      edits: edits.map(e => ({ id: e.id, type: e.type, from: e.from, to: e.to }))\n    });\n    \n    // Check both settings and toggle state manager\n    const isTrackingEnabled = this.settings.enableTracking && \n                              (!this.toggleStateManager || this.toggleStateManager.isTrackingEnabled);\n    \n    if (!isTrackingEnabled || !this.currentSession) {\n      DebugMonitor.log('HANDLE_EDITS_SKIPPED', {\n        reason: !this.settings.enableTracking ? 'settings disabled' : \n                !this.toggleStateManager?.isTrackingEnabled ? 'toggle disabled' : 'no session'\n      });\n      DebugMonitor.endTimer(timer);\n      return;\n    }\n\n    // Add edits to current array\n    this.currentEdits.push(...edits);\n\n    // Record changes in tracker\n    const trackerTimer = DebugMonitor.startTimer('editTracker.recordChanges');\n    this.editTracker.recordChanges(this.currentSession.id, edits);\n    DebugMonitor.endTimer(trackerTimer);\n\n    // Update side panel (debounced)\n    this.debouncedPanelUpdate();\n\n    // Save session (debounced)\n    this.debouncedSave();\n\n    DebugMonitor.log('HANDLE_EDITS_COMPLETE', {\n      processedCount: edits.length,\n      totalEdits: this.currentEdits.length\n    });\n    \n    DebugMonitor.endTimer(timer);\n  }\n\n  // AI Integration Methods (stubs for future implementation)\n  async runAIAnalysisOnce(): Promise<void> {\n    console.log('Track Edits: AI analysis triggered manually');\n    \n    // TODO: Implement AI analysis using AI Providers plugin integration\n    // This will analyze current edit clusters and provide insights\n    \n    // For now, just log the current state\n    DebugMonitor.log('AI_ANALYSIS_TRIGGERED', {\n      clustersCount: this.currentEdits.length,\n      hasSession: !!this.currentSession,\n      aiProvider: this.settings.aiProvider,\n      aiModel: this.settings.aiModel\n    });\n    \n    // Simulate AI processing delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    console.log('Track Edits: AI analysis complete (stub)');\n  }\n\n  private async loadSystemPrompt(): Promise<string> {\n    try {\n      const promptPath = this.settings.systemPromptPath;\n      const adapter = this.app.vault.adapter;\n      \n      // Check if prompt file exists\n      if (await adapter.exists(promptPath)) {\n        return await adapter.read(promptPath);\n      } else {\n        // Create default prompt file if it doesn't exist\n        const defaultPrompt = await this.getDefaultSystemPrompt();\n        await adapter.write(promptPath, defaultPrompt);\n        return defaultPrompt;\n      }\n    } catch (error) {\n      console.error('Track Edits: Error loading system prompt:', error);\n      return this.getDefaultSystemPrompt();\n    }\n  }\n\n  private async getDefaultSystemPrompt(): Promise<string> {\n    return `# Track Edits AI Analysis System Prompt\\n\\nYou are a Track Edits SME specializing in analyzing keystroke patterns and typing behavior.\\n\\nAnalyze edit clusters to identify user intent and provide workflow insights.\\n\\nFocus on typing patterns, not content quality.`;\n  }\n}", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport TrackEditsPlugin from './main';\n\nexport class TrackEditsSettingsTab extends PluginSettingTab {\n  plugin: TrackEditsPlugin;\n\n  constructor(app: App, plugin: TrackEditsPlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display(): void {\n    const { containerEl } = this;\n    containerEl.empty();\n\n    containerEl.createEl('h2', { text: 'Track Edits Settings' });\n\n    new Setting(containerEl)\n      .setName('Enable tracking')\n      .setDesc('Automatically track edits when documents are modified')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.enableTracking)\n        .onChange(async (value) => {\n          this.plugin.settings.enableTracking = value;\n          await this.plugin.saveSettings();\n          if (value) {\n            this.plugin.startTracking();\n          } else {\n            this.plugin.stopTracking();\n          }\n        }));\n\n    new Setting(containerEl)\n      .setName('Show line numbers')\n      .setDesc('Display line numbers in the editor')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showLineNumbers)\n        .onChange(async (value) => {\n          this.plugin.settings.showLineNumbers = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Highlight changes')\n      .setDesc('Visually highlight recent changes in the editor')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.highlightChanges)\n        .onChange(async (value) => {\n          this.plugin.settings.highlightChanges = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Data retention')\n      .setDesc('Number of days to keep edit history (0 = keep forever)')\n      .addSlider(slider => slider\n        .setLimits(0, 365, 1)\n        .setValue(this.plugin.settings.retentionDays)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.retentionDays = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Color scheme')\n      .setDesc('Choose the color scheme for change highlighting')\n      .addDropdown(dropdown => dropdown\n        .addOption('default', 'Default')\n        .addOption('colorblind', 'Colorblind friendly')\n        .addOption('dark', 'Dark theme optimized')\n        .setValue(this.plugin.settings.colorScheme)\n        .onChange(async (value: 'default' | 'colorblind' | 'dark') => {\n          this.plugin.settings.colorScheme = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Auto-save sessions')\n      .setDesc('Automatically save edit sessions as they occur')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.autoSave)\n        .onChange(async (value) => {\n          this.plugin.settings.autoSave = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Export format')\n      .setDesc('Default format for exporting edit sessions')\n      .addDropdown(dropdown => dropdown\n        .addOption('json', 'JSON')\n        .addOption('csv', 'CSV')\n        .addOption('markdown', 'Markdown')\n        .setValue(this.plugin.settings.exportFormat)\n        .onChange(async (value: 'json' | 'csv' | 'markdown') => {\n          this.plugin.settings.exportFormat = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Actions section\n    containerEl.createEl('h3', { text: 'Actions' });\n\n    new Setting(containerEl)\n      .setName('Export current session')\n      .setDesc('Export the current editing session')\n      .addButton(button => button\n        .setButtonText('Export')\n        .setCta()\n        .onClick(() => {\n          if (this.plugin.currentSession) {\n            this.plugin.exportSession(this.plugin.currentSession.id);\n          }\n        }));\n\n    new Setting(containerEl)\n      .setName('Clear all history')\n      .setDesc('Delete all stored edit history (cannot be undone)')\n      .addButton(button => button\n        .setButtonText('Clear')\n        .setWarning()\n        .onClick(() => {\n          this.plugin.clearEditHistory();\n        }));\n  }\n}", "// Shared utilities for all Writerr Obsidian plugins\n\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\nexport function formatTimestamp(timestamp: number): string {\n  return new Date(timestamp).toLocaleString();\n}\n\nexport function getWordCount(text: string): number {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n}\n\nexport function getCharacterCount(text: string): number {\n  return text.length;\n}\n\nexport function sanitizeFilename(filename: string): string {\n  return filename.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n}\n\nexport function exportToJSON(data: any): string {\n  return JSON.stringify(data, null, 2);\n}\n\nexport function parseMarkdown(content: string): { frontmatter: Record<string, any>; body: string } {\n  const frontmatterRegex = /^---\\s*\\n(.*?)\\n---\\s*\\n(.*)$/s;\n  const match = content.match(frontmatterRegex);\n  \n  if (match) {\n    try {\n      const frontmatter = JSON.parse(match[1]);\n      return { frontmatter, body: match[2] };\n    } catch {\n      // If JSON parsing fails, treat as YAML or plain text\n      return { frontmatter: {}, body: content };\n    }\n  }\n  \n  return { frontmatter: {}, body: content };\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}", "import { TFile } from 'obsidian';\nimport { EditSession, EditChange } from '@shared/types';\nimport { generateId, getWordCount, getCharacterCount } from '@shared/utils';\nimport TrackEditsPlugin from './main';\n\nexport class EditTracker {\n  private plugin: TrackEditsPlugin;\n  private sessions: Map<string, EditSession> = new Map();\n  private activeSessions: Map<string, TFile> = new Map();\n\n  constructor(plugin: TrackEditsPlugin) {\n    this.plugin = plugin;\n    this.loadSessions();\n  }\n\n  async loadSessions() {\n    try {\n      const data = await this.plugin.loadData();\n      if (data && data.sessions) {\n        for (const session of data.sessions) {\n          this.sessions.set(session.id, session);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load edit sessions:', error);\n    }\n  }\n\n  async saveSessions() {\n    try {\n      const sessionsArray = Array.from(this.sessions.values());\n      await this.plugin.saveData({ sessions: sessionsArray });\n    } catch (error) {\n      console.error('Failed to save edit sessions:', error);\n    }\n  }\n\n  startSession(session: EditSession, file: TFile) {\n    this.sessions.set(session.id, session);\n    this.activeSessions.set(session.id, file);\n  }\n\n  endSession(sessionId: string) {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.endTime = Date.now();\n      this.activeSessions.delete(sessionId);\n      this.saveSessions();\n    }\n  }\n\n  recordChanges(sessionId: string, changes: EditChange[]) {\n    const session = this.sessions.get(sessionId);\n    if (!session) return;\n\n    session.changes.push(...changes);\n    \n    // Update word and character counts\n    const file = this.activeSessions.get(sessionId);\n    if (file) {\n      this.updateSessionCounts(session, file);\n    }\n  }\n\n  private async updateSessionCounts(session: EditSession, file: TFile) {\n    try {\n      const content = await this.plugin.app.vault.read(file);\n      session.wordCount = getWordCount(content);\n      session.characterCount = getCharacterCount(content);\n    } catch (error) {\n      console.error('Failed to update session counts:', error);\n    }\n  }\n\n  getSession(sessionId: string): EditSession | undefined {\n    return this.sessions.get(sessionId);\n  }\n\n  getSessionHistory(): EditSession[] {\n    return Array.from(this.sessions.values()).sort((a, b) => b.startTime - a.startTime);\n  }\n\n  async saveSession(session: EditSession) {\n    this.sessions.set(session.id, session);\n    await this.saveSessions();\n  }\n\n  clearHistory() {\n    this.sessions.clear();\n    this.activeSessions.clear();\n    this.saveSessions();\n  }\n\n  formatSessionForExport(session: EditSession, format: 'json' | 'csv' | 'markdown'): string {\n    switch (format) {\n      case 'json':\n        return JSON.stringify(session, null, 2);\n      \n      case 'csv':\n        let csv = 'Timestamp,Type,From,To,Text,RemovedText\\n';\n        for (const change of session.changes) {\n          const row = [\n            new Date(change.timestamp).toISOString(),\n            change.type,\n            change.from,\n            change.to,\n            `\"${(change.text || '').replace(/\"/g, '\"\"')}\"`,\n            `\"${(change.removedText || '').replace(/\"/g, '\"\"')}\"`\n          ].join(',');\n          csv += row + '\\n';\n        }\n        return csv;\n      \n      case 'markdown':\n        const startDate = new Date(session.startTime).toLocaleString();\n        const endDate = session.endTime ? new Date(session.endTime).toLocaleString() : 'In progress';\n        const duration = session.endTime ? \n          Math.round((session.endTime - session.startTime) / 1000 / 60) + ' minutes' : \n          'In progress';\n\n        let markdown = `# Edit Session Report\\n\\n`;\n        markdown += `- **Start:** ${startDate}\\n`;\n        markdown += `- **End:** ${endDate}\\n`;\n        markdown += `- **Duration:** ${duration}\\n`;\n        markdown += `- **Changes:** ${session.changes.length}\\n`;\n        markdown += `- **Words:** ${session.wordCount}\\n`;\n        markdown += `- **Characters:** ${session.characterCount}\\n\\n`;\n\n        if (session.changes.length > 0) {\n          markdown += `## Changes\\n\\n`;\n          for (const change of session.changes) {\n            const time = new Date(change.timestamp).toLocaleTimeString();\n            markdown += `- **${time}** - ${change.type} at position ${change.from}-${change.to}\\n`;\n            if (change.text) {\n              markdown += `  - Added: \"${change.text}\"\\n`;\n            }\n            if (change.removedText) {\n              markdown += `  - Removed: \"${change.removedText}\"\\n`;\n            }\n          }\n        }\n\n        return markdown;\n      \n      default:\n        return JSON.stringify(session, null, 2);\n    }\n  }\n\n  // Clean up old sessions based on retention policy\n  cleanupOldSessions() {\n    if (this.plugin.settings.retentionDays === 0) return; // Keep forever\n\n    const cutoffTime = Date.now() - (this.plugin.settings.retentionDays * 24 * 60 * 60 * 1000);\n    const toDelete: string[] = [];\n\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.startTime < cutoffTime) {\n        toDelete.push(sessionId);\n      }\n    }\n\n    for (const sessionId of toDelete) {\n      this.sessions.delete(sessionId);\n    }\n\n    if (toDelete.length > 0) {\n      this.saveSessions();\n    }\n  }\n}", "import { EditChange } from '@shared/types';\nimport TrackEditsPlugin from './main';\nimport { MarkdownView } from 'obsidian';\n\nexport class EditRenderer {\n  private plugin: TrackEditsPlugin;\n  private trackingIndicator: HTMLElement | null = null;\n  private decorationContainer: HTMLElement | null = null;\n  private activeDecorations: HTMLElement[] = [];\n\n  constructor(plugin: TrackEditsPlugin) {\n    this.plugin = plugin;\n  }\n\n  showTrackingIndicator() {\n    // Status is now shown in the side panel - no need for separate indicator\n    console.log('Track Edits v2.0: Tracking started (status shown in side panel)');\n  }\n\n  hideTrackingIndicator() {\n    try {\n      // Remove any lingering tracking indicator if it exists\n      if (this.trackingIndicator && this.trackingIndicator.parentNode) {\n        this.trackingIndicator.remove();\n        this.trackingIndicator = null;\n      }\n      \n      // Also clear any active decorations\n      this.clearDecorations();\n      console.log('Track Edits v2.0: Tracking stopped (status shown in side panel)');\n    } catch (error) {\n      console.error('Track Edits: Error hiding tracking indicator:', error);\n      this.trackingIndicator = null;\n    }\n  }\n\n  // Safe decoration system using DOM overlay approach\n  showChangeDecorations(changes: EditChange[]) {\n    this.clearDecorations();\n    \n    const activeLeaf = this.plugin.app.workspace.getActiveViewOfType(MarkdownView);\n    if (!activeLeaf || !activeLeaf.editor) {\n      console.log('Track Edits v2.0: No active editor found for decorations');\n      return;\n    }\n\n    console.log('Track Edits v2.0: Showing decorations for', changes.length, 'changes');\n    \n    // Use safe DOM overlay approach instead of CodeMirror extensions\n    this.createDOMOverlayDecorations(activeLeaf, changes);\n    \n    // Also create temporary notification bubbles\n    changes.forEach((change, index) => {\n      this.createTemporaryHighlight(change, index);\n    });\n  }\n\n  private createDOMOverlayDecorations(markdownView: MarkdownView, changes: EditChange[]) {\n    try {\n      // Get the editor container\n      const editorContainer = markdownView.contentEl.querySelector('.cm-editor');\n      if (!editorContainer) {\n        console.log('Track Edits v2.0: Editor container not found');\n        return;\n      }\n\n      // Create decoration container if it doesn't exist\n      if (!this.decorationContainer) {\n        this.decorationContainer = document.createElement('div');\n        this.decorationContainer.className = 'track-edits-decoration-overlay';\n        this.decorationContainer.style.cssText = `\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          pointer-events: none;\n          z-index: 5;\n        `;\n        editorContainer.appendChild(this.decorationContainer);\n      }\n\n      // Create decorations for recent changes\n      const now = Date.now();\n      const recentChanges = changes.filter(change => now - change.timestamp < 5000);\n\n      recentChanges.forEach(change => {\n        this.createSafeDecoration(change);\n      });\n\n      console.log('Track Edits v2.0: Created', recentChanges.length, 'DOM overlay decorations');\n    } catch (error) {\n      console.error('Track Edits v2.0: Error creating DOM overlay decorations:', error);\n    }\n  }\n\n  private createSafeDecoration(change: EditChange) {\n    if (!this.decorationContainer) return;\n\n    // Get editor position for the change\n    const position = this.getEditorPosition(change);\n    if (!position || position.left < 0 || position.top < 0) {\n      console.log('Track Edits v2.0: Invalid position for decoration:', position);\n      return;\n    }\n\n    const decoration = document.createElement('div');\n    decoration.className = this.getDecorationClass(change);\n    decoration.style.cssText = `\n      position: absolute;\n      left: ${position.left}px;\n      top: ${position.top}px;\n      width: ${Math.max(position.width, 20)}px;\n      height: ${position.height}px;\n      pointer-events: none;\n      z-index: 10;\n      border-radius: 3px;\n      animation: track-edits-highlight-fade 3s ease-out forwards;\n    `;\n\n    decoration.title = `${change.type} at ${new Date(change.timestamp).toLocaleTimeString()}`;\n    \n    this.decorationContainer.appendChild(decoration);\n    this.activeDecorations.push(decoration);\n\n    // Auto-remove after animation\n    setTimeout(() => {\n      if (decoration.parentNode) {\n        decoration.remove();\n        this.activeDecorations = this.activeDecorations.filter(d => d !== decoration);\n      }\n    }, 3000);\n  }\n\n  private getEditorPosition(change: EditChange): { left: number; top: number; width: number; height: number } | null {\n    try {\n      const activeLeaf = this.plugin.app.workspace.getActiveViewOfType(MarkdownView);\n      if (!activeLeaf || !activeLeaf.editor) return null;\n\n      const editor = activeLeaf.editor;\n      \n      // Convert document position to editor coordinates\n      const pos = editor.offsetToPos(change.from);\n      // Use Obsidian's proper API instead of direct CodeMirror access\n      const coords = editor.coordsAtPos(pos, false);\n      \n      if (!coords) {\n        console.log('Track Edits v2.0: No coordinates returned for position', pos);\n        return null;\n      }\n\n      // Get the editor container to calculate relative positioning\n      const editorContainer = activeLeaf.contentEl.querySelector('.cm-editor');\n      if (!editorContainer) return null;\n\n      const editorRect = editorContainer.getBoundingClientRect();\n\n      // Convert absolute coordinates to relative coordinates within the editor with bounds checking\n      const result = {\n        left: Math.max(0, coords.left - editorRect.left),\n        top: Math.max(0, coords.top - editorRect.top),\n        width: Math.max((change.text?.length || 1) * 8, 20), // Approximate character width\n        height: Math.max(coords.bottom - coords.top, 16) // Minimum height\n      };\n      \n      console.log('Track Edits v2.0: Calculated position:', result, 'for change at', change.from);\n      return result;\n    } catch (error) {\n      console.error('Track Edits v2.0: Error getting editor position:', error);\n      return null;\n    }\n  }\n\n  private getDecorationClass(change: EditChange): string {\n    let className = 'track-edits-decoration';\n    \n    switch (change.type) {\n      case 'insert':\n        className += ' track-edits-decoration-insert';\n        break;\n      case 'delete':\n        className += ' track-edits-decoration-delete';\n        break;\n      case 'replace':\n        className += ' track-edits-decoration-replace';\n        break;\n    }\n\n    // Apply color scheme\n    className += ` track-edits-decoration-${this.plugin.settings.colorScheme}`;\n\n    return className;\n  }\n  \n  private createTemporaryHighlight(change: EditChange, index: number) {\n    const highlight = document.createElement('div');\n    highlight.className = 'track-edits-temp-highlight';\n    highlight.style.cssText = `\n      position: fixed;\n      top: ${60 + (index * 25)}px;\n      right: 60px;\n      background: var(--background-modifier-success);\n      color: var(--text-on-accent);\n      padding: 2px 6px;\n      border-radius: 3px;\n      font-size: 10px;\n      z-index: 999;\n      opacity: 0.9;\n      animation: fadeInOut 3s ease-in-out;\n    `;\n    highlight.textContent = `${change.type}: \"${change.text || ''}\"`;\n    \n    document.body.appendChild(highlight);\n    this.activeDecorations.push(highlight);\n    \n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      if (highlight.parentNode) {\n        highlight.remove();\n        this.activeDecorations = this.activeDecorations.filter(el => el !== highlight);\n      }\n    }, 3000);\n  }\n  \n  clearDecorations() {\n    // Remove all active decorations\n    this.activeDecorations.forEach(decoration => {\n      if (decoration.parentNode) {\n        decoration.remove();\n      }\n    });\n    this.activeDecorations = [];\n\n    // Remove decoration container if it exists\n    if (this.decorationContainer && this.decorationContainer.parentNode) {\n      this.decorationContainer.remove();\n      this.decorationContainer = null;\n    }\n  }\n\n  // Method for backward compatibility - no longer returns CodeMirror extension\n  getCodeMirrorExtension() {\n    // Return null to avoid conflicts - we use DOM overlay instead\n    return null;\n  }\n}", "import { ItemView, WorkspaceLeaf } from 'obsidian';\nimport TrackEditsPlugin from './main';\nimport { EditCluster } from './edit-cluster-manager';\n\nexport const SIDE_PANEL_VIEW_TYPE = 'track-edits-side-panel';\n\nexport class EditSidePanelView extends ItemView {\n  plugin: TrackEditsPlugin;\n  private clusters: EditCluster[] = [];\n  private runOnceBtn: HTMLElement | null = null;\n\n  constructor(leaf: WorkspaceLeaf, plugin: TrackEditsPlugin) {\n    super(leaf);\n    this.plugin = plugin;\n  }\n\n  getViewType(): string {\n    return SIDE_PANEL_VIEW_TYPE;\n  }\n\n  getDisplayText(): string {\n    return 'Track Edits';\n  }\n\n  getIcon(): string {\n    return 'edit';\n  }\n\n  async onOpen() {\n    const container = this.containerEl.children[1];\n    container.empty();\n    container.addClass('track-edits-side-panel');\n\n    this.renderView();\n  }\n\n  async onClose() {\n    // Cleanup when panel is closed\n  }\n\n  updateClusters(clusters: EditCluster[]) {\n    this.clusters = clusters;\n    this.renderView();\n  }\n\n  private renderView() {\n    const container = this.containerEl.children[1];\n    container.empty();\n\n    // Header - v2.0 style with status indicator\n    const header = container.createEl('h2');\n    header.createEl('span', { text: 'Track Edits' });\n    \n    // Add status dot\n    const statusDot = header.createEl('span', {\n      cls: 'track-edits-status-dot'\n    });\n    \n    if (this.plugin.currentSession) {\n      statusDot.addClass('track-edits-status-active');\n      statusDot.setAttribute('title', 'Tracking active');\n    } else {\n      statusDot.addClass('track-edits-status-inactive');\n      statusDot.setAttribute('title', 'Tracking stopped');\n    }\n\n    // Edit count summary - v2.0 style\n    const countText = this.clusters.length === 0 \n      ? 'No edits to review'\n      : `${this.clusters.length} cluster${this.clusters.length !== 1 ? 's' : ''} to review`;\n    container.createEl('p', { \n      text: countText,\n      cls: 'track-edits-count'\n    });\n\n    // AI Controls section (matching v2.0 design)\n    this.createAIControlsSection(container);\n\n    // Accept All / Reject All controls (v1.0 addition that v2.0 doesn't have)\n    if (this.clusters.length > 0) {\n      const bulkControls = container.createEl('div', { cls: 'track-edits-bulk-controls' });\n      \n      // Left side: text labels\n      bulkControls.createEl('span', {\n        text: 'Accept / Reject All',\n        cls: 'track-edits-bulk-text'\n      });\n      \n      // Right side: action buttons (aligned with individual buttons)\n      const buttonsContainer = bulkControls.createEl('div', { cls: 'track-edits-bulk-buttons' });\n      \n      const acceptAllBtn = buttonsContainer.createEl('button', {\n        text: '\u2713',\n        cls: 'track-edits-bulk-btn track-edits-bulk-accept',\n        title: 'Accept all edits'\n      });\n      acceptAllBtn.onclick = () => this.acceptAllClusters();\n      \n      const rejectAllBtn = buttonsContainer.createEl('button', {\n        text: '\u2717',\n        cls: 'track-edits-bulk-btn track-edits-bulk-reject',\n        title: 'Reject all edits'\n      });\n      rejectAllBtn.onclick = () => this.rejectAllClusters();\n    }\n\n    // Edits list - v2.0 style\n    const editsList = container.createEl('div', { cls: 'track-edits-list' });\n    \n    if (this.clusters.length === 0) {\n      return;\n    }\n\n    // Render each cluster - v2.0 style\n    this.clusters.forEach((cluster, index) => {\n      this.renderCluster(editsList, cluster, index);\n    });\n  }\n\n  private renderCluster(container: HTMLElement, cluster: EditCluster, index: number) {\n    // v2.0 style: Clean cluster item with flexbox layout\n    const clusterItem = container.createEl('div', { cls: 'track-edit-item track-cluster-item' });\n    const clusterRow = clusterItem.createEl('div', { cls: 'track-cluster-row' });\n    \n    // Left side: edit display (v2.0 style)\n    const clusterContent = clusterRow.createEl('div', { cls: 'track-cluster-content' });\n    \n    const previewText = this.getClusterPreview(cluster);\n    \n    if (cluster.type === 'word_replacement') {\n      // Show deletion \u2192 insertion cleanly\n      const deleteSpan = clusterContent.createEl('code', { \n        text: previewText.before || '',\n        cls: 'track-edit-deleted'\n      });\n      clusterContent.appendText(' \u2192 ');\n      const addSpan = clusterContent.createEl('code', {\n        text: previewText.after || '',\n        cls: 'track-edit-added'\n      });\n    } else {\n      // Show addition cleanly\n      clusterContent.createEl('code', {\n        text: previewText.text || '',\n        cls: 'track-edit-added'\n      });\n    }\n    \n    // Right side: action buttons (v2.0 style - minimal)\n    const buttonsContainer = clusterRow.createEl('div', { cls: 'track-edit-buttons' });\n    \n    const acceptBtn = buttonsContainer.createEl('button', {\n      text: '\u2713',\n      cls: 'track-edit-btn track-edit-btn-accept',\n      title: 'Accept edit'\n    });\n    acceptBtn.onclick = () => this.acceptCluster(cluster.id);\n    \n    const rejectBtn = buttonsContainer.createEl('button', {\n      text: '\u2717',\n      cls: 'track-edit-btn track-edit-btn-reject',\n      title: 'Reject edit'\n    });\n    rejectBtn.onclick = () => this.rejectCluster(cluster.id);\n  }\n\n  private getClusterTitle(cluster: EditCluster): string {\n    switch (cluster.type) {\n      case 'word_replacement':\n        return 'Word Replacement';\n      case 'consecutive_typing':\n        return 'Consecutive Typing';\n      case 'deletion':\n        return 'Text Deletion';\n      default:\n        return 'Text Edit';\n    }\n  }\n\n  private getClusterTime(cluster: EditCluster): string {\n    const now = Date.now();\n    const timeDiff = now - cluster.startTime;\n    \n    if (timeDiff < 1000) {\n      return 'Just now';\n    } else if (timeDiff < 60000) {\n      return `${Math.floor(timeDiff / 1000)}s ago`;\n    } else {\n      return `${Math.floor(timeDiff / 60000)}m ago`;\n    }\n  }\n\n  private getClusterPreview(cluster: EditCluster): { text?: string; before?: string; after?: string } {\n    if (cluster.type === 'word_replacement') {\n      return {\n        before: cluster.metadata?.originalWord || '',\n        after: cluster.metadata?.newWord || ''\n      };\n    } else {\n      const text = cluster.edits\n        .map(edit => edit.text || '')\n        .join('')\n        .slice(0, 50);\n      return { text: text + (text.length === 50 ? '...' : '') };\n    }\n  }\n\n  private acceptCluster(clusterId: string) {\n    this.plugin.acceptEditCluster(clusterId);\n  }\n\n  private rejectCluster(clusterId: string) {\n    this.plugin.rejectEditCluster(clusterId);\n  }\n\n  private acceptAllClusters() {\n    // Take a snapshot of cluster IDs to avoid issues with array changing during iteration\n    const clusterIds = this.clusters.map(cluster => cluster.id);\n    \n    // Use batch processing method for better performance\n    this.plugin.acceptAllEditClusters(clusterIds);\n  }\n\n  private rejectAllClusters() {\n    // Add confirmation for destructive action\n    if (this.clusters.length > 3) {\n      const confirmed = confirm(`Are you sure you want to reject all ${this.clusters.length} edits? This cannot be undone.`);\n      if (!confirmed) return;\n    }\n    \n    // Take a snapshot of cluster IDs to avoid issues with array changing during iteration\n    const clusterIds = this.clusters.map(cluster => cluster.id);\n    \n    // Use batch processing method for better performance\n    this.plugin.rejectAllEditClusters(clusterIds);\n  }\n\n  private createAIControlsSection(container: HTMLElement): void {\n    const controlsDiv = container.createEl('div', { cls: 'track-edits-ai-simple' });\n    const controlsLine = controlsDiv.createEl('div', { cls: 'ai-simple-line' });\n    \n    // Left side: \"AI\" label with toggle right next to it\n    const labelToggleGroup = controlsLine.createEl('div', { cls: 'ai-label-toggle-group' });\n    \n    // \"AI\" label - more prominent\n    labelToggleGroup.createEl('span', { text: 'AI', cls: 'ai-simple-label' });\n    \n    // Toggle switch right next to label\n    const toggleSwitch = labelToggleGroup.createEl('div', { cls: 'ai-simple-toggle' });\n    toggleSwitch.addClass(this.plugin.settings.aiAlwaysEnabled ? 'on' : 'off');\n    toggleSwitch.setAttribute('title', this.plugin.settings.aiAlwaysEnabled ? 'AI Always On' : 'AI Manual Only');\n    \n    // Toggle click handler\n    toggleSwitch.onclick = () => {\n      this.plugin.settings.aiAlwaysEnabled = !this.plugin.settings.aiAlwaysEnabled;\n      this.plugin.saveSettings();\n      this.renderView(); // Re-render to update toggle state\n    };\n    \n    // Right side: \"Run Once\" button - more prominent\n    this.runOnceBtn = controlsLine.createEl('button', {\n      text: 'Run Once',\n      cls: this.plugin.settings.aiAlwaysEnabled ? 'ai-simple-btn disabled' : 'ai-simple-btn enabled',\n      title: 'Run AI analysis once on current edits'\n    });\n    \n    // Run Once click handler (only if not always enabled)\n    this.runOnceBtn.onclick = () => {\n      if (!this.plugin.settings.aiAlwaysEnabled) {\n        this.runAIAnalysisOnce();\n      }\n    };\n  }\n\n  private async runAIAnalysisOnce(): Promise<void> {\n    if (!this.runOnceBtn) return;\n    \n    // Update button state\n    this.runOnceBtn.textContent = 'Running...';\n    this.runOnceBtn.addClass('running');\n    \n    try {\n      // TODO: Call AI analysis method when implemented\n      await this.plugin.runAIAnalysisOnce();\n      \n      // Provide user feedback\n      this.runOnceBtn.textContent = 'Done!';\n      setTimeout(() => {\n        if (this.runOnceBtn) {\n          this.runOnceBtn.textContent = 'Run Once';\n          this.runOnceBtn.removeClass('running');\n        }\n      }, 2000);\n      \n    } catch (error) {\n      console.error('AI analysis failed:', error);\n      this.runOnceBtn.textContent = 'Error';\n      setTimeout(() => {\n        if (this.runOnceBtn) {\n          this.runOnceBtn.textContent = 'Run Once';\n          this.runOnceBtn.removeClass('running');\n        }\n      }, 2000);\n    }\n  }\n}", "import { EditChange } from '@shared/types';\nimport { generateId } from '@shared/utils';\nimport TrackEditsPlugin from './main';\n\nexport interface EditCluster {\n  id: string;\n  type: 'consecutive_typing' | 'word_replacement' | 'deletion' | 'mixed';\n  edits: EditChange[];\n  startTime: number;\n  endTime: number;\n  wordCount: number;\n  characterCount: number;\n  metadata?: {\n    originalWord?: string;\n    newWord?: string;\n    position?: number;\n  };\n}\n\nexport class EditClusterManager {\n  private plugin: TrackEditsPlugin;\n  private activeClusters: Map<string, EditCluster> = new Map();\n\n  constructor(plugin: TrackEditsPlugin) {\n    this.plugin = plugin;\n  }\n\n  clusterEdits(edits: EditChange[]): EditCluster[] {\n    if (!this.plugin.settings.enableClustering || edits.length === 0) {\n      return [];\n    }\n\n    // Clear old clusters\n    this.activeClusters.clear();\n\n    // Sort edits by timestamp\n    const sortedEdits = [...edits].sort((a, b) => a.timestamp - b.timestamp);\n\n    // Group edits into clusters\n    const clusters: EditCluster[] = [];\n    let currentCluster: EditChange[] = [];\n    let lastTimestamp = 0;\n\n    for (const edit of sortedEdits) {\n      const timeDiff = edit.timestamp - lastTimestamp;\n      \n      // Start new cluster if time window exceeded or first edit\n      if (timeDiff > this.plugin.settings.clusterTimeWindow || currentCluster.length === 0) {\n        if (currentCluster.length > 0) {\n          const cluster = this.createCluster(currentCluster);\n          if (cluster) {\n            clusters.push(cluster);\n            this.activeClusters.set(cluster.id, cluster);\n          }\n        }\n        currentCluster = [edit];\n      } else {\n        // Check if edit belongs to same word/context\n        if (this.areEditsInSameWord(currentCluster[currentCluster.length - 1], edit)) {\n          currentCluster.push(edit);\n        } else {\n          // Create cluster from current edits and start new one\n          const cluster = this.createCluster(currentCluster);\n          if (cluster) {\n            clusters.push(cluster);\n            this.activeClusters.set(cluster.id, cluster);\n          }\n          currentCluster = [edit];\n        }\n      }\n      \n      lastTimestamp = edit.timestamp;\n    }\n\n    // Process final cluster\n    if (currentCluster.length > 0) {\n      const cluster = this.createCluster(currentCluster);\n      if (cluster) {\n        clusters.push(cluster);\n        this.activeClusters.set(cluster.id, cluster);\n      }\n    }\n\n    return clusters;\n  }\n\n  private createCluster(edits: EditChange[]): EditCluster | null {\n    if (edits.length === 0) return null;\n\n    const startTime = Math.min(...edits.map(e => e.timestamp));\n    const endTime = Math.max(...edits.map(e => e.timestamp));\n    const clusterType = this.determineClusterType(edits);\n    \n    const cluster: EditCluster = {\n      id: generateId(),\n      type: clusterType,\n      edits: edits,\n      startTime,\n      endTime,\n      wordCount: this.calculateWordCount(edits),\n      characterCount: this.calculateCharacterCount(edits),\n      metadata: this.generateClusterMetadata(edits, clusterType)\n    };\n\n    return cluster;\n  }\n\n  private areEditsInSameWord(edit1: EditChange, edit2: EditChange): boolean {\n    // Check if positions are close (within word boundary)\n    const positionDiff = Math.abs(edit1.to - edit2.from);\n    \n    // Allow small gaps (like backspace then type)\n    if (positionDiff <= 5) {\n      return true;\n    }\n\n    // Check if both edits are in consecutive character positions\n    if (edit1.type === 'insert' && edit2.type === 'insert') {\n      return edit1.to === edit2.from || edit1.to === edit2.from - 1;\n    }\n\n    return false;\n  }\n\n  private determineClusterType(edits: EditChange[]): EditCluster['type'] {\n    const insertCount = edits.filter(e => e.type === 'insert').length;\n    const deleteCount = edits.filter(e => e.type === 'delete').length;\n    const replaceCount = edits.filter(e => e.type === 'replace').length;\n\n    // Word replacement pattern: delete followed by insert(s)\n    if (deleteCount > 0 && insertCount > 0) {\n      return 'word_replacement';\n    }\n\n    // Pure deletion\n    if (deleteCount > 0 && insertCount === 0) {\n      return 'deletion';\n    }\n\n    // Consecutive typing\n    if (insertCount > 0 && deleteCount === 0) {\n      return 'consecutive_typing';\n    }\n\n    return 'mixed';\n  }\n\n  private calculateWordCount(edits: EditChange[]): number {\n    const text = edits\n      .filter(e => e.text)\n      .map(e => e.text!)\n      .join('');\n    \n    return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  }\n\n  private calculateCharacterCount(edits: EditChange[]): number {\n    return edits\n      .filter(e => e.text)\n      .reduce((count, edit) => count + (edit.text?.length || 0), 0);\n  }\n\n  private generateClusterMetadata(edits: EditChange[], type: EditCluster['type']): EditCluster['metadata'] {\n    const metadata: EditCluster['metadata'] = {};\n\n    if (type === 'word_replacement') {\n      const deletedEdits = edits.filter(e => e.type === 'delete');\n      const insertedEdits = edits.filter(e => e.type === 'insert');\n      \n      if (deletedEdits.length > 0) {\n        metadata.originalWord = deletedEdits\n          .map(e => e.removedText || '')\n          .join('');\n      }\n      \n      if (insertedEdits.length > 0) {\n        metadata.newWord = insertedEdits\n          .map(e => e.text || '')\n          .join('');\n      }\n    }\n\n    if (edits.length > 0) {\n      metadata.position = edits[0].from;\n    }\n\n    return metadata;\n  }\n\n  getCluster(clusterId: string): EditCluster | undefined {\n    return this.activeClusters.get(clusterId);\n  }\n\n  removeCluster(clusterId: string): boolean {\n    return this.activeClusters.delete(clusterId);\n  }\n\n  getAllClusters(): EditCluster[] {\n    return Array.from(this.activeClusters.values());\n  }\n\n  clearClusters(): void {\n    this.activeClusters.clear();\n  }\n}", "import { App } from 'obsidian';\n\nexport type StateChangeCallback = (enabled: boolean) => void;\n\nexport class ToggleStateManager {\n  private app: App;\n  private trackingEnabled: boolean;\n  private ribbonIcon: HTMLElement | null = null;\n  private statusIndicator: HTMLElement | null = null;\n  private sidePanel: HTMLElement | null = null;\n  private sidePanelOriginalContent: string = '';\n  public onStateChange: StateChangeCallback;\n\n  constructor(app: App, onStateChange: StateChangeCallback) {\n    this.app = app;\n    this.onStateChange = onStateChange;\n    \n    // Load saved state or default to enabled\n    this.trackingEnabled = this.loadSavedState();\n    \n    // Create screen reader announcer element\n    this.createAriaAnnouncer();\n  }\n\n  get isTrackingEnabled(): boolean {\n    return this.trackingEnabled;\n  }\n\n  /**\n   * Set tracking enabled/disabled state\n   */\n  setTrackingEnabled(enabled: boolean): void {\n    if (this.trackingEnabled === enabled) {\n      return; // No change\n    }\n\n    this.trackingEnabled = enabled;\n    \n    // Save state to session storage\n    this.saveState();\n    \n    // Update all UI elements\n    this.updateRibbonIcon();\n    this.updateStatusIndicator();\n    this.updateSidePanel();\n    \n    // Announce to screen readers\n    this.announceStateChange(enabled);\n    \n    // Notify callback\n    this.onStateChange(enabled);\n  }\n\n  /**\n   * Set the ribbon icon element to manage\n   */\n  setRibbonIcon(ribbonElement: HTMLElement): void {\n    this.ribbonIcon = ribbonElement;\n    this.updateRibbonIcon();\n  }\n\n  /**\n   * Set the status indicator element to manage\n   */\n  setStatusIndicator(statusElement: HTMLElement): void {\n    this.statusIndicator = statusElement;\n    this.updateStatusIndicator();\n  }\n\n  /**\n   * Set the side panel element to manage\n   */\n  setSidePanel(sidePanelElement: HTMLElement): void {\n    this.sidePanel = sidePanelElement;\n    // Save original content for restoration\n    this.sidePanelOriginalContent = sidePanelElement.innerHTML;\n    this.updateSidePanel();\n  }\n\n  private updateRibbonIcon(): void {\n    if (!this.ribbonIcon) return;\n\n    // Add transition class for smooth animation\n    this.ribbonIcon.classList.add('state-transition');\n\n    if (this.trackingEnabled) {\n      this.ribbonIcon.classList.add('track-edits-enabled');\n      this.ribbonIcon.classList.remove('track-edits-disabled');\n      this.ribbonIcon.title = 'Track Edits (Active) - Click to manage changes';\n      this.ribbonIcon.setAttribute('aria-label', 'Track Edits is active. Click to manage tracked changes.');\n    } else {\n      this.ribbonIcon.classList.add('track-edits-disabled');\n      this.ribbonIcon.classList.remove('track-edits-enabled');\n      this.ribbonIcon.title = 'Track Edits (Disabled) - Click to enable';\n      this.ribbonIcon.setAttribute('aria-label', 'Track Edits disabled. Click to enable tracking.');\n    }\n\n    // Remove transition class after animation completes\n    setTimeout(() => {\n      if (this.ribbonIcon) {\n        this.ribbonIcon.classList.remove('state-transition');\n      }\n    }, 300);\n  }\n\n  private updateStatusIndicator(): void {\n    if (!this.statusIndicator) return;\n\n    if (this.trackingEnabled) {\n      this.statusIndicator.classList.add('status-active');\n      this.statusIndicator.classList.remove('status-disabled');\n      this.statusIndicator.setAttribute('aria-label', 'Track Edits is active');\n      this.statusIndicator.textContent = 'Active';\n    } else {\n      this.statusIndicator.classList.add('status-disabled');\n      this.statusIndicator.classList.remove('status-active');\n      this.statusIndicator.setAttribute('aria-label', 'Track Edits is disabled');\n      this.statusIndicator.textContent = 'Disabled';\n    }\n  }\n\n  private updateSidePanel(): void {\n    if (!this.sidePanel) return;\n\n    if (this.trackingEnabled) {\n      this.sidePanel.classList.add('track-edits-active');\n      this.sidePanel.classList.remove('track-edits-disabled');\n      // Restore original content when re-enabled\n      if (this.sidePanelOriginalContent) {\n        this.sidePanel.innerHTML = this.sidePanelOriginalContent;\n      }\n    } else {\n      this.sidePanel.classList.add('track-edits-disabled');\n      this.sidePanel.classList.remove('track-edits-active');\n      // Show empty state\n      this.sidePanel.innerHTML = this.createEmptyStateHTML();\n    }\n  }\n\n  private createEmptyStateHTML(): string {\n    return `\n      <div class=\"track-edits-empty-state\">\n        <div class=\"empty-state-icon\">\n          <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            <path d=\"M9 12l2 2 4-4\"></path>\n            <path d=\"M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3\"></path>\n            <path d=\"M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3\"></path>\n            <path d=\"M3 12h6m6 0h6\"></path>\n          </svg>\n        </div>\n        <h3 class=\"empty-state-title\">Tracking disabled</h3>\n        <p class=\"empty-state-description\">\n          Enable Track Edits to see changes and suggestions for your document.\n        </p>\n        <button class=\"empty-state-button\" onclick=\"window.TrackEdits?.enableTracking()\">\n          Enable Track Edits\n        </button>\n      </div>\n    `;\n  }\n\n  private saveState(): void {\n    sessionStorage.setItem('track-edits-enabled', String(this.trackingEnabled));\n  }\n\n  private loadSavedState(): boolean {\n    const saved = sessionStorage.getItem('track-edits-enabled');\n    return saved !== null ? saved === 'true' : true; // Default to enabled\n  }\n\n  private createAriaAnnouncer(): void {\n    // Create hidden element for screen reader announcements\n    let announcer = document.getElementById('track-edits-announcer');\n    if (!announcer) {\n      announcer = document.createElement('div');\n      announcer.id = 'track-edits-announcer';\n      announcer.setAttribute('aria-live', 'polite');\n      announcer.setAttribute('aria-atomic', 'true');\n      announcer.style.position = 'absolute';\n      announcer.style.left = '-10000px';\n      announcer.style.width = '1px';\n      announcer.style.height = '1px';\n      announcer.style.overflow = 'hidden';\n      document.body.appendChild(announcer);\n    }\n  }\n\n  private announceStateChange(enabled: boolean): void {\n    const announcer = document.getElementById('track-edits-announcer');\n    if (announcer) {\n      announcer.textContent = enabled \n        ? 'Track Edits has been enabled'\n        : 'Track Edits has been disabled';\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    const announcer = document.getElementById('track-edits-announcer');\n    if (announcer && announcer.parentNode) {\n      announcer.parentNode.removeChild(announcer);\n    }\n  }\n}", "import { App, Modal } from 'obsidian';\n\nexport interface ToggleConfirmationOptions {\n  editCount: number;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nexport class ToggleConfirmationModal extends Modal {\n  private options: ToggleConfirmationOptions;\n  private keydownHandler: (e: KeyboardEvent) => void;\n\n  constructor(app: App, options: ToggleConfirmationOptions) {\n    super(app);\n    this.options = options;\n    \n    // Bind keyboard handler\n    this.keydownHandler = this.handleKeydown.bind(this);\n  }\n\n  get editCount(): number {\n    return this.options.editCount;\n  }\n\n  get onConfirm(): () => void {\n    return this.options.onConfirm;\n  }\n\n  get onCancel(): () => void {\n    return this.options.onCancel;\n  }\n\n  onOpen(): void {\n    const { contentEl } = this;\n    const { editCount } = this.options;\n\n    // Clear content\n    contentEl.empty();\n    contentEl.addClass('toggle-confirmation-modal');\n\n    // Create header\n    const header = contentEl.createEl('h2', {\n      text: 'Turn Off Track Edits?',\n      cls: 'modal-title'\n    });\n\n    // Create clear, concise message\n    const messageEl = contentEl.createEl('p', {\n      cls: 'modal-message'\n    });\n    \n    const editText = editCount === 1 ? 'edit' : 'edits';\n    messageEl.textContent = `You have ${editCount} pending ${editText}. These changes will be lost if you turn off tracking.`;\n\n    // TODO: Add \"Don't ask again\" option in future update\n\n    // Create button container\n    const buttonContainer = contentEl.createEl('div', {\n      cls: 'modal-button-container'\n    });\n\n    // Create Cancel button (secondary)\n    const cancelButton = buttonContainer.createEl('button', {\n      text: 'Keep Tracking',\n      cls: 'modal-button modal-button-secondary'\n    });\n\n    cancelButton.addEventListener('click', () => {\n      this.handleCancel();\n    });\n\n    // Create Confirm button (primary)\n    const confirmButton = buttonContainer.createEl('button', {\n      text: 'Turn Off Anyway',\n      cls: 'modal-button modal-button-primary'\n    });\n\n    confirmButton.addEventListener('click', () => {\n      this.handleConfirm();\n    });\n\n    // Set focus to cancel button (safe default)\n    cancelButton.focus();\n\n    // Add keyboard event listener\n    document.addEventListener('keydown', this.keydownHandler);\n  }\n\n  onClose(): void {\n    // Remove keyboard event listener\n    document.removeEventListener('keydown', this.keydownHandler);\n  }\n\n  private handleKeydown(e: KeyboardEvent): void {\n    if (e.key === 'Escape') {\n      e.preventDefault();\n      this.handleCancel();\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      this.handleConfirm();\n    }\n  }\n\n  private handleConfirm(): void {\n    this.options.onConfirm();\n    this.close();\n  }\n\n  private handleCancel(): void {\n    this.options.onCancel();\n    this.close();\n  }\n\n  // TODO: Add shouldSkipConfirmation() and resetSessionPreference() methods in future update\n}"],
  "mappings": "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",
  "names": ["import_obsidian", "import_obsidian", "import_obsidian", "import_obsidian", "_a"]
}
