{
  "version": 3,
  "sources": ["src/main.ts", "src/settings.ts", "../../shared/utils/index.ts", "src/chat-view.ts", "src/ai-provider-manager.ts"],
  "sourcesContent": ["import { Plugin, WorkspaceLeaf, TFile, Notice, Modal } from 'obsidian';\nimport { WriterrlChatSettingsTab } from './settings';\nimport { ChatView, VIEW_TYPE_CHAT } from './chat-view';\nimport { ChatSession, ChatMessage, AIProvider, WriterrlGlobalAPI } from '@shared/types';\nimport { generateId } from '@shared/utils';\nimport { AIProviderManager } from './ai-provider-manager';\n\ninterface WriterrlChatSettings {\n  defaultProvider: string;\n  providers: AIProvider[];\n  chatPosition: 'right' | 'left' | 'floating';\n  autoSaveChats: boolean;\n  contextLines: number;\n  maxTokens: number;\n  temperature: number;\n  enableMarkdown: boolean;\n  showTimestamps: boolean;\n  theme: 'default' | 'compact' | 'minimal';\n}\n\nconst DEFAULT_SETTINGS: WriterrlChatSettings = {\n  defaultProvider: 'openai',\n  providers: [\n    {\n      id: 'openai',\n      name: 'OpenAI',\n      model: 'gpt-4',\n      baseUrl: 'https://api.openai.com/v1',\n      apiKey: ''\n    }\n  ],\n  chatPosition: 'right',\n  autoSaveChats: true,\n  contextLines: 10,\n  maxTokens: 2000,\n  temperature: 0.7,\n  enableMarkdown: true,\n  showTimestamps: true,\n  theme: 'default'\n};\n\nexport default class WriterrlChatPlugin extends Plugin {\n  settings: WriterrlChatSettings;\n  aiProviderManager: AIProviderManager;\n  currentSession: ChatSession | null = null;\n  chatSessions: Map<string, ChatSession> = new Map();\n\n  async onload() {\n    await this.loadSettings();\n\n    this.aiProviderManager = new AIProviderManager(this.settings);\n\n    // Initialize global API\n    this.initializeGlobalAPI();\n\n    // Register view\n    this.registerView(VIEW_TYPE_CHAT, (leaf) => new ChatView(leaf, this));\n\n    // Add commands\n    this.addCommands();\n\n    // Add ribbon icon\n    this.addRibbonIcon('message-circle', 'Open Writerr Chat', () => {\n      this.openChat();\n    });\n\n    // Add settings tab\n    this.addSettingTab(new WriterrlChatSettingsTab(this.app, this));\n\n    // Load chat sessions\n    await this.loadChatSessions();\n\n    console.log('Writerr Chat plugin loaded');\n  }\n\n  onunload() {\n    this.cleanupGlobalAPI();\n    console.log('Writerr Chat plugin unloaded');\n  }\n\n  async loadSettings() {\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n  }\n\n  async saveSettings() {\n    await this.saveData(this.settings);\n    if (this.aiProviderManager) {\n      this.aiProviderManager.updateSettings(this.settings);\n    }\n  }\n\n  private initializeGlobalAPI() {\n    if (!window.WriterrlAPI) {\n      window.WriterrlAPI = {} as WriterrlGlobalAPI;\n    }\n\n    window.WriterrlAPI.chat = {\n      openChat: () => this.openChat(),\n      sendMessage: (message: string, context?: string) => this.sendMessage(message, context),\n      getCurrentSession: () => this.currentSession\n    };\n  }\n\n  private cleanupGlobalAPI() {\n    if (window.WriterrlAPI && window.WriterrlAPI.chat) {\n      delete window.WriterrlAPI.chat;\n    }\n  }\n\n  private addCommands() {\n    this.addCommand({\n      id: 'open-chat',\n      name: 'Open chat',\n      callback: () => this.openChat()\n    });\n\n    this.addCommand({\n      id: 'new-chat-session',\n      name: 'New chat session',\n      callback: () => this.newChatSession()\n    });\n\n    this.addCommand({\n      id: 'chat-with-selection',\n      name: 'Chat with selected text',\n      editorCallback: (editor) => {\n        const selection = editor.getSelection();\n        if (selection) {\n          this.chatWithSelection(selection);\n        } else {\n          new Notice('No text selected');\n        }\n      }\n    });\n\n    this.addCommand({\n      id: 'quick-chat',\n      name: 'Quick chat',\n      callback: () => this.quickChat()\n    });\n  }\n\n  async openChat() {\n    const existingLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)[0];\n    \n    if (existingLeaf) {\n      this.app.workspace.revealLeaf(existingLeaf);\n      return;\n    }\n\n    try {\n      // Primary approach: Use setViewState (modern Obsidian API)\n      const leaf = this.app.workspace.getLeaf(false);\n      if (leaf) {\n        await leaf.setViewState({\n          type: VIEW_TYPE_CHAT,\n          active: true\n        });\n        this.app.workspace.revealLeaf(leaf);\n        return;\n      }\n\n      // Fallback 1: Force new leaf creation\n      const newLeaf = this.app.workspace.getLeaf(true);\n      if (newLeaf) {\n        await newLeaf.setViewState({\n          type: VIEW_TYPE_CHAT,\n          active: true\n        });\n        this.app.workspace.revealLeaf(newLeaf);\n        return;\n      }\n\n      // Fallback 2: Create leaf by split\n      const splitLeaf = this.app.workspace.createLeafBySplit(this.app.workspace.activeLeaf);\n      if (splitLeaf) {\n        await splitLeaf.setViewState({\n          type: VIEW_TYPE_CHAT,\n          active: true\n        });\n        this.app.workspace.revealLeaf(splitLeaf);\n        return;\n      }\n\n      console.error('Failed to create chat view - no leaf creation method succeeded');\n\n    } catch (error) {\n      console.error('Error opening chat view:', error);\n    }\n  }\n\n  newChatSession() {\n    this.currentSession = {\n      id: generateId(),\n      title: `Chat ${new Date().toLocaleDateString()}`,\n      messages: [],\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    };\n\n    this.chatSessions.set(this.currentSession.id, this.currentSession);\n    this.saveChatSessions();\n  }\n\n  async chatWithSelection(selectedText: string) {\n    await this.openChat();\n    \n    if (!this.currentSession) {\n      this.newChatSession();\n    }\n\n    const contextMessage = `Here's the selected text I'd like to discuss:\\n\\n${selectedText}\\n\\nWhat would you like to know about this text?`;\n    await this.sendMessage(contextMessage);\n  }\n\n  async quickChat() {\n    const modal = new QuickChatModal(this.app, async (message: string) => {\n      if (!this.currentSession) {\n        this.newChatSession();\n      }\n      await this.sendMessage(message);\n    });\n    modal.open();\n  }\n\n  async sendMessage(content: string, context?: string): Promise<void> {\n    if (!this.currentSession) {\n      this.newChatSession();\n    }\n\n    if (!this.currentSession) return;\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: Date.now()\n    };\n\n    this.currentSession.messages.push(userMessage);\n\n    // Get context from current file if requested\n    let fullContext = context;\n    if (!fullContext && this.settings.contextLines > 0) {\n      fullContext = await this.getDocumentContext();\n    }\n\n    try {\n      // Get AI response\n      const response = await this.aiProviderManager.sendMessage(\n        this.currentSession.messages,\n        fullContext\n      );\n\n      const assistantMessage: ChatMessage = {\n        id: generateId(),\n        role: 'assistant',\n        content: response,\n        timestamp: Date.now()\n      };\n\n      this.currentSession.messages.push(assistantMessage);\n      this.currentSession.updatedAt = Date.now();\n\n      if (this.settings.autoSaveChats) {\n        await this.saveChatSessions();\n      }\n\n      // Refresh chat view if open\n      this.refreshChatView();\n\n    } catch (error) {\n      new Notice(`Error sending message: ${error.message}`);\n      console.error('Chat error:', error);\n    }\n  }\n\n  private async getDocumentContext(): Promise<string | undefined> {\n    const activeFile = this.app.workspace.getActiveFile();\n    if (!activeFile) return undefined;\n\n    try {\n      const content = await this.app.vault.read(activeFile);\n      const lines = content.split('\\n');\n      \n      if (lines.length <= this.settings.contextLines * 2) {\n        return content;\n      }\n\n      // Get lines around cursor or selection\n      const editor = this.app.workspace.getActiveViewOfType(require('obsidian').MarkdownView)?.editor;\n      if (editor) {\n        const cursor = editor.getCursor();\n        const start = Math.max(0, cursor.line - this.settings.contextLines);\n        const end = Math.min(lines.length, cursor.line + this.settings.contextLines);\n        return lines.slice(start, end).join('\\n');\n      }\n\n      return lines.slice(0, this.settings.contextLines).join('\\n');\n    } catch (error) {\n      console.error('Error getting document context:', error);\n      return undefined;\n    }\n  }\n\n  private refreshChatView() {\n    const chatLeaf = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT)[0];\n    if (chatLeaf && chatLeaf.view instanceof ChatView) {\n      chatLeaf.view.refresh();\n    }\n  }\n\n  async loadChatSessions() {\n    try {\n      const data = await this.loadData();\n      if (data && data.chatSessions) {\n        for (const session of data.chatSessions) {\n          this.chatSessions.set(session.id, session);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load chat sessions:', error);\n    }\n  }\n\n  async saveChatSessions() {\n    try {\n      const sessionsArray = Array.from(this.chatSessions.values());\n      const currentData = await this.loadData() || {};\n      currentData.chatSessions = sessionsArray;\n      await this.saveData(currentData);\n    } catch (error) {\n      console.error('Failed to save chat sessions:', error);\n    }\n  }\n\n  getChatSessions(): ChatSession[] {\n    return Array.from(this.chatSessions.values()).sort((a, b) => b.updatedAt - a.updatedAt);\n  }\n\n  deleteSession(sessionId: string) {\n    this.chatSessions.delete(sessionId);\n    if (this.currentSession && this.currentSession.id === sessionId) {\n      this.currentSession = null;\n    }\n    this.saveChatSessions();\n  }\n\n  setCurrentSession(sessionId: string) {\n    const session = this.chatSessions.get(sessionId);\n    if (session) {\n      this.currentSession = session;\n    }\n  }\n}\n\nclass QuickChatModal extends Modal {\n  private onSubmit: (message: string) => Promise<void>;\n  private inputEl: HTMLTextAreaElement;\n\n  constructor(app: any, onSubmit: (message: string) => Promise<void>) {\n    super(app);\n    this.onSubmit = onSubmit;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n    contentEl.empty();\n\n    contentEl.createEl('h2', { text: 'Quick Chat' });\n\n    this.inputEl = contentEl.createEl('textarea', {\n      attr: {\n        placeholder: 'Type your message here...',\n        rows: '4',\n        style: 'width: 100%; margin: 10px 0; padding: 8px; border: 1px solid var(--background-modifier-border); border-radius: 4px;'\n      }\n    });\n\n    const buttonContainer = contentEl.createEl('div', {\n      attr: { style: 'display: flex; justify-content: flex-end; gap: 10px; margin-top: 10px;' }\n    });\n\n    buttonContainer.createEl('button', {\n      text: 'Cancel',\n      attr: { style: 'padding: 6px 12px;' }\n    }).onclick = () => this.close();\n\n    const sendButton = buttonContainer.createEl('button', {\n      text: 'Send',\n      attr: { style: 'padding: 6px 12px; background: var(--interactive-accent); color: var(--text-on-accent); border: none; border-radius: 4px;' }\n    });\n    \n    sendButton.onclick = async () => {\n      const message = this.inputEl.value.trim();\n      if (message) {\n        await this.onSubmit(message);\n        this.close();\n      }\n    };\n\n    this.inputEl.focus();\n  }\n\n  onClose() {\n    const { contentEl } = this;\n    contentEl.empty();\n  }\n}", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport WriterrlChatPlugin from './main';\nimport { AIProvider } from '@shared/types';\nimport { generateId } from '@shared/utils';\n\nexport class WriterrlChatSettingsTab extends PluginSettingTab {\n  plugin: WriterrlChatPlugin;\n\n  constructor(app: App, plugin: WriterrlChatPlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display(): void {\n    const { containerEl } = this;\n    containerEl.empty();\n\n    containerEl.createEl('h2', { text: 'Writerr Chat Settings' });\n\n    // AI Provider Settings\n    containerEl.createEl('h3', { text: 'AI Provider Configuration' });\n\n    new Setting(containerEl)\n      .setName('Default provider')\n      .setDesc('Select the default AI provider for chat')\n      .addDropdown(dropdown => {\n        for (const provider of this.plugin.settings.providers) {\n          dropdown.addOption(provider.id, provider.name);\n        }\n        dropdown.setValue(this.plugin.settings.defaultProvider)\n          .onChange(async (value) => {\n            this.plugin.settings.defaultProvider = value;\n            await this.plugin.saveSettings();\n          });\n      });\n\n    // Provider management\n    for (let i = 0; i < this.plugin.settings.providers.length; i++) {\n      const provider = this.plugin.settings.providers[i];\n      this.createProviderSetting(containerEl, provider, i);\n    }\n\n    new Setting(containerEl)\n      .setName('Add new provider')\n      .setDesc('Add a new AI provider')\n      .addButton(button => button\n        .setButtonText('Add Provider')\n        .setCta()\n        .onClick(() => {\n          this.plugin.settings.providers.push({\n            id: generateId(),\n            name: 'New Provider',\n            model: 'gpt-3.5-turbo',\n            baseUrl: '',\n            apiKey: ''\n          });\n          this.display(); // Refresh settings\n        }));\n\n    // Chat Interface Settings\n    containerEl.createEl('h3', { text: 'Chat Interface' });\n\n    new Setting(containerEl)\n      .setName('Chat position')\n      .setDesc('Choose where the chat panel appears')\n      .addDropdown(dropdown => dropdown\n        .addOption('right', 'Right sidebar')\n        .addOption('left', 'Left sidebar')\n        .addOption('floating', 'Floating window')\n        .setValue(this.plugin.settings.chatPosition)\n        .onChange(async (value: 'right' | 'left' | 'floating') => {\n          this.plugin.settings.chatPosition = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Theme')\n      .setDesc('Choose the chat interface theme')\n      .addDropdown(dropdown => dropdown\n        .addOption('default', 'Default')\n        .addOption('compact', 'Compact')\n        .addOption('minimal', 'Minimal')\n        .setValue(this.plugin.settings.theme)\n        .onChange(async (value: 'default' | 'compact' | 'minimal') => {\n          this.plugin.settings.theme = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Show timestamps')\n      .setDesc('Display timestamps for chat messages')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.showTimestamps)\n        .onChange(async (value) => {\n          this.plugin.settings.showTimestamps = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Enable markdown')\n      .setDesc('Render markdown in chat messages')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.enableMarkdown)\n        .onChange(async (value) => {\n          this.plugin.settings.enableMarkdown = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Behavior Settings\n    containerEl.createEl('h3', { text: 'Behavior' });\n\n    new Setting(containerEl)\n      .setName('Auto-save chats')\n      .setDesc('Automatically save chat sessions')\n      .addToggle(toggle => toggle\n        .setValue(this.plugin.settings.autoSaveChats)\n        .onChange(async (value) => {\n          this.plugin.settings.autoSaveChats = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Context lines')\n      .setDesc('Number of lines to include as context from the current document')\n      .addSlider(slider => slider\n        .setLimits(0, 50, 1)\n        .setValue(this.plugin.settings.contextLines)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.contextLines = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Max tokens')\n      .setDesc('Maximum number of tokens for AI responses')\n      .addSlider(slider => slider\n        .setLimits(100, 4000, 100)\n        .setValue(this.plugin.settings.maxTokens)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.maxTokens = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(containerEl)\n      .setName('Temperature')\n      .setDesc('Creativity level for AI responses (0 = focused, 1 = creative)')\n      .addSlider(slider => slider\n        .setLimits(0, 1, 0.1)\n        .setValue(this.plugin.settings.temperature)\n        .setDynamicTooltip()\n        .onChange(async (value) => {\n          this.plugin.settings.temperature = value;\n          await this.plugin.saveSettings();\n        }));\n\n    // Actions\n    containerEl.createEl('h3', { text: 'Actions' });\n\n    new Setting(containerEl)\n      .setName('Clear all chat history')\n      .setDesc('Delete all saved chat sessions (cannot be undone)')\n      .addButton(button => button\n        .setButtonText('Clear All')\n        .setWarning()\n        .onClick(() => {\n          this.plugin.chatSessions.clear();\n          this.plugin.currentSession = null;\n          this.plugin.saveChatSessions();\n        }));\n  }\n\n  private createProviderSetting(containerEl: HTMLElement, provider: AIProvider, index: number) {\n    const providerContainer = containerEl.createDiv('provider-setting');\n    providerContainer.createEl('h4', { text: provider.name });\n\n    new Setting(providerContainer)\n      .setName('Provider name')\n      .addText(text => text\n        .setValue(provider.name)\n        .onChange(async (value) => {\n          provider.name = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(providerContainer)\n      .setName('Model')\n      .addText(text => text\n        .setValue(provider.model)\n        .onChange(async (value) => {\n          provider.model = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(providerContainer)\n      .setName('Base URL')\n      .addText(text => text\n        .setValue(provider.baseUrl || '')\n        .onChange(async (value) => {\n          provider.baseUrl = value;\n          await this.plugin.saveSettings();\n        }));\n\n    new Setting(providerContainer)\n      .setName('API Key')\n      .addText(text => {\n        text.inputEl.type = 'password';\n        text.setValue(provider.apiKey || '')\n          .onChange(async (value) => {\n            provider.apiKey = value;\n            await this.plugin.saveSettings();\n          });\n      });\n\n    new Setting(providerContainer)\n      .addButton(button => button\n        .setButtonText('Remove')\n        .setWarning()\n        .onClick(async () => {\n          this.plugin.settings.providers.splice(index, 1);\n          await this.plugin.saveSettings();\n          this.display(); // Refresh settings\n        }));\n  }\n}", "// Shared utilities for all Writerr Obsidian plugins\n\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\nexport function formatTimestamp(timestamp: number): string {\n  return new Date(timestamp).toLocaleString();\n}\n\nexport function getWordCount(text: string): number {\n  return text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n}\n\nexport function getCharacterCount(text: string): number {\n  return text.length;\n}\n\nexport function sanitizeFilename(filename: string): string {\n  return filename.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n}\n\nexport function exportToJSON(data: any): string {\n  return JSON.stringify(data, null, 2);\n}\n\nexport function parseMarkdown(content: string): { frontmatter: Record<string, any>; body: string } {\n  const frontmatterRegex = /^---\\s*\\n(.*?)\\n---\\s*\\n(.*)$/s;\n  const match = content.match(frontmatterRegex);\n  \n  if (match) {\n    try {\n      const frontmatter = JSON.parse(match[1]);\n      return { frontmatter, body: match[2] };\n    } catch {\n      // If JSON parsing fails, treat as YAML or plain text\n      return { frontmatter: {}, body: content };\n    }\n  }\n  \n  return { frontmatter: {}, body: content };\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}", "import { ItemView, WorkspaceLeaf, MarkdownRenderer, Component } from 'obsidian';\nimport { ChatMessage, ChatSession } from '@shared/types';\nimport WriterrlChatPlugin from './main';\n\nexport const VIEW_TYPE_CHAT = 'writerr-chat-view';\n\nexport class ChatView extends ItemView {\n  plugin: WriterrlChatPlugin;\n  private chatContainer: HTMLElement;\n  private inputContainer: HTMLElement;\n  private messageInput: HTMLTextAreaElement;\n  private sendButton: HTMLButtonElement;\n  private sessionSelect: HTMLSelectElement;\n\n  constructor(leaf: WorkspaceLeaf, plugin: WriterrlChatPlugin) {\n    super(leaf);\n    this.plugin = plugin;\n  }\n\n  getViewType(): string {\n    return VIEW_TYPE_CHAT;\n  }\n\n  getDisplayText(): string {\n    return 'Writerr Chat';\n  }\n\n  getIcon(): string {\n    return 'message-circle';\n  }\n\n  async onOpen() {\n    const container = this.containerEl.children[1];\n    container.empty();\n    container.addClass('writerr-chat-view');\n\n    // Create header\n    const header = container.createEl('div', { cls: 'chat-header' });\n    this.createHeader(header);\n\n    // Create chat messages container\n    this.chatContainer = container.createEl('div', { cls: 'chat-messages' });\n    this.chatContainer.style.cssText = `\n      flex: 1;\n      overflow-y: auto;\n      padding: 10px;\n      border-bottom: 1px solid var(--background-modifier-border);\n    `;\n\n    // Create input container\n    this.inputContainer = container.createEl('div', { cls: 'chat-input-container' });\n    this.createInputArea(this.inputContainer);\n\n    // Apply theme\n    this.applyTheme();\n\n    // Load current session or create new one\n    if (!this.plugin.currentSession) {\n      this.plugin.newChatSession();\n    }\n\n    this.refresh();\n  }\n\n  private createHeader(header: HTMLElement) {\n    header.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 10px;\n      border-bottom: 1px solid var(--background-modifier-border);\n    `;\n\n    // Session selector\n    this.sessionSelect = header.createEl('select', { cls: 'chat-session-select' });\n    this.sessionSelect.style.cssText = `\n      flex: 1;\n      margin-right: 10px;\n      padding: 4px 8px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      background: var(--background-primary);\n      color: var(--text-normal);\n    `;\n\n    this.sessionSelect.addEventListener('change', () => {\n      const sessionId = this.sessionSelect.value;\n      if (sessionId === 'new') {\n        this.plugin.newChatSession();\n      } else {\n        this.plugin.setCurrentSession(sessionId);\n      }\n      this.refresh();\n    });\n\n    // New session button\n    const newButton = header.createEl('button', { text: 'New', cls: 'chat-new-button' });\n    newButton.style.cssText = `\n      padding: 4px 8px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      background: var(--background-primary);\n      color: var(--text-normal);\n      cursor: pointer;\n      margin-right: 5px;\n    `;\n    newButton.onclick = () => {\n      this.plugin.newChatSession();\n      this.refresh();\n    };\n\n    // Clear button\n    const clearButton = header.createEl('button', { text: 'Clear', cls: 'chat-clear-button' });\n    clearButton.style.cssText = `\n      padding: 4px 8px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      background: var(--background-primary);\n      color: var(--text-normal);\n      cursor: pointer;\n    `;\n    clearButton.onclick = () => {\n      if (this.plugin.currentSession) {\n        this.plugin.currentSession.messages = [];\n        this.plugin.saveChatSessions();\n        this.refresh();\n      }\n    };\n  }\n\n  private createInputArea(container: HTMLElement) {\n    container.style.cssText = `\n      display: flex;\n      padding: 10px;\n      gap: 10px;\n      background: var(--background-primary);\n    `;\n\n    this.messageInput = container.createEl('textarea', { \n      cls: 'chat-message-input',\n      attr: { placeholder: 'Type your message...' }\n    });\n    this.messageInput.style.cssText = `\n      flex: 1;\n      min-height: 60px;\n      max-height: 200px;\n      padding: 8px;\n      border: 1px solid var(--background-modifier-border);\n      border-radius: 4px;\n      background: var(--background-primary);\n      color: var(--text-normal);\n      resize: vertical;\n    `;\n\n    this.messageInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n        this.sendMessage();\n      }\n    });\n\n    this.sendButton = container.createEl('button', { \n      text: 'Send', \n      cls: 'chat-send-button' \n    });\n    this.sendButton.style.cssText = `\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      background: var(--interactive-accent);\n      color: var(--text-on-accent);\n      cursor: pointer;\n      align-self: flex-end;\n    `;\n    this.sendButton.onclick = () => this.sendMessage();\n  }\n\n  private async sendMessage() {\n    const message = this.messageInput.value.trim();\n    if (!message) return;\n\n    this.messageInput.value = '';\n    this.sendButton.disabled = true;\n    this.sendButton.textContent = 'Sending...';\n\n    try {\n      await this.plugin.sendMessage(message);\n      this.refresh();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      this.sendButton.disabled = false;\n      this.sendButton.textContent = 'Send';\n    }\n  }\n\n  refresh() {\n    this.updateSessionSelect();\n    this.renderMessages();\n  }\n\n  private updateSessionSelect() {\n    this.sessionSelect.empty();\n    \n    const sessions = this.plugin.getChatSessions();\n    \n    for (const session of sessions) {\n      const option = this.sessionSelect.createEl('option', { \n        value: session.id, \n        text: session.title \n      });\n      if (this.plugin.currentSession && session.id === this.plugin.currentSession.id) {\n        option.selected = true;\n      }\n    }\n  }\n\n  private async renderMessages() {\n    this.chatContainer.empty();\n\n    if (!this.plugin.currentSession || this.plugin.currentSession.messages.length === 0) {\n      const emptyState = this.chatContainer.createEl('div', { \n        cls: 'chat-empty-state',\n        text: 'Start a conversation by typing a message below.'\n      });\n      emptyState.style.cssText = `\n        text-align: center;\n        padding: 20px;\n        color: var(--text-muted);\n        font-style: italic;\n      `;\n      return;\n    }\n\n    for (const message of this.plugin.currentSession.messages) {\n      await this.renderMessage(message);\n    }\n\n    // Scroll to bottom\n    this.chatContainer.scrollTop = this.chatContainer.scrollHeight;\n  }\n\n  private async renderMessage(message: ChatMessage) {\n    const messageEl = this.chatContainer.createEl('div', { \n      cls: `chat-message chat-message-${message.role}` \n    });\n\n    const isUser = message.role === 'user';\n    messageEl.style.cssText = `\n      display: flex;\n      margin: 10px 0;\n      ${isUser ? 'justify-content: flex-end;' : 'justify-content: flex-start;'}\n    `;\n\n    const bubble = messageEl.createEl('div', { cls: 'chat-message-bubble' });\n    bubble.style.cssText = `\n      max-width: 80%;\n      padding: 10px 15px;\n      border-radius: 18px;\n      ${isUser \n        ? 'background: var(--interactive-accent); color: var(--text-on-accent);'\n        : 'background: var(--background-secondary); color: var(--text-normal);'\n      }\n      word-wrap: break-word;\n    `;\n\n    if (this.plugin.settings.enableMarkdown && !isUser) {\n      // Render markdown for assistant messages\n      const component = new Component();\n      await MarkdownRenderer.renderMarkdown(\n        message.content, \n        bubble, \n        '', \n        component\n      );\n    } else {\n      bubble.textContent = message.content;\n    }\n\n    if (this.plugin.settings.showTimestamps) {\n      const timestamp = messageEl.createEl('div', { \n        cls: 'chat-timestamp',\n        text: new Date(message.timestamp).toLocaleTimeString()\n      });\n      timestamp.style.cssText = `\n        font-size: 11px;\n        color: var(--text-muted);\n        margin: 5px ${isUser ? '15px' : '0'} 0 ${isUser ? '0' : '15px'};\n        align-self: ${isUser ? 'flex-end' : 'flex-start'};\n      `;\n    }\n  }\n\n  private applyTheme() {\n    const container = this.containerEl;\n    container.removeClass('theme-default', 'theme-compact', 'theme-minimal');\n    container.addClass(`theme-${this.plugin.settings.theme}`);\n\n    if (this.plugin.settings.theme === 'compact') {\n      this.chatContainer.style.fontSize = '14px';\n      this.messageInput.style.minHeight = '40px';\n    } else if (this.plugin.settings.theme === 'minimal') {\n      this.chatContainer.style.fontSize = '13px';\n      this.messageInput.style.minHeight = '35px';\n    }\n  }\n\n  async onClose() {\n    // Clean up\n  }\n}", "import { ChatMessage, AIProvider } from '@shared/types';\n\ninterface WriterrlChatSettings {\n  defaultProvider: string;\n  providers: AIProvider[];\n  maxTokens: number;\n  temperature: number;\n}\n\nexport class AIProviderManager {\n  private settings: WriterrlChatSettings;\n\n  constructor(settings: WriterrlChatSettings) {\n    this.settings = settings;\n  }\n\n  updateSettings(settings: WriterrlChatSettings) {\n    this.settings = settings;\n  }\n\n  async sendMessage(messages: ChatMessage[], context?: string): Promise<string> {\n    const provider = this.getProvider(this.settings.defaultProvider);\n    if (!provider) {\n      throw new Error('No AI provider configured');\n    }\n\n    if (!provider.apiKey) {\n      throw new Error(`API key not configured for ${provider.name}`);\n    }\n\n    // Build the request payload based on provider\n    const requestMessages = this.buildRequestMessages(messages, context);\n    \n    try {\n      if (provider.id === 'openai' || provider.baseUrl?.includes('openai')) {\n        return await this.sendOpenAIMessage(provider, requestMessages);\n      } else if (provider.id === 'anthropic' || provider.baseUrl?.includes('anthropic')) {\n        return await this.sendAnthropicMessage(provider, requestMessages);\n      } else {\n        // Generic OpenAI-compatible API\n        return await this.sendOpenAIMessage(provider, requestMessages);\n      }\n    } catch (error) {\n      console.error('AI Provider Error:', error);\n      throw new Error(`AI Provider failed: ${error.message}`);\n    }\n  }\n\n  private buildRequestMessages(messages: ChatMessage[], context?: string): any[] {\n    const requestMessages: any[] = [];\n\n    // Add context as system message if provided\n    if (context) {\n      requestMessages.push({\n        role: 'system',\n        content: `Here's the current document context:\\n\\n${context}\\n\\nPlease use this context to inform your responses.`\n      });\n    }\n\n    // Convert chat messages to API format\n    for (const message of messages) {\n      if (message.role !== 'system') {\n        requestMessages.push({\n          role: message.role,\n          content: message.content\n        });\n      }\n    }\n\n    return requestMessages;\n  }\n\n  private async sendOpenAIMessage(provider: AIProvider, messages: any[]): Promise<string> {\n    const baseUrl = provider.baseUrl || 'https://api.openai.com/v1';\n    const url = `${baseUrl}/chat/completions`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${provider.apiKey}`\n      },\n      body: JSON.stringify({\n        model: provider.model,\n        messages,\n        max_tokens: this.settings.maxTokens,\n        temperature: this.settings.temperature,\n        stream: false\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`HTTP ${response.status}: ${error}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n      throw new Error('Invalid response format from AI provider');\n    }\n\n    return data.choices[0].message.content;\n  }\n\n  private async sendAnthropicMessage(provider: AIProvider, messages: any[]): Promise<string> {\n    const baseUrl = provider.baseUrl || 'https://api.anthropic.com';\n    const url = `${baseUrl}/v1/messages`;\n\n    // Anthropic has a different message format\n    const systemMessages = messages.filter(m => m.role === 'system');\n    const conversationMessages = messages.filter(m => m.role !== 'system');\n\n    const systemPrompt = systemMessages.map(m => m.content).join('\\n\\n');\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': provider.apiKey!,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: provider.model,\n        max_tokens: this.settings.maxTokens,\n        temperature: this.settings.temperature,\n        system: systemPrompt,\n        messages: conversationMessages\n      })\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`HTTP ${response.status}: ${error}`);\n    }\n\n    const data = await response.json();\n    \n    if (!data.content || !data.content[0] || !data.content[0].text) {\n      throw new Error('Invalid response format from Anthropic API');\n    }\n\n    return data.content[0].text;\n  }\n\n  private getProvider(providerId: string): AIProvider | undefined {\n    return this.settings.providers.find(p => p.id === providerId);\n  }\n\n  getProviders(): AIProvider[] {\n    return [...this.settings.providers];\n  }\n\n  validateProvider(provider: AIProvider): { valid: boolean; error?: string } {\n    if (!provider.name || !provider.model) {\n      return { valid: false, error: 'Provider name and model are required' };\n    }\n\n    if (!provider.apiKey) {\n      return { valid: false, error: 'API key is required' };\n    }\n\n    // Basic URL validation if baseUrl is provided\n    if (provider.baseUrl) {\n      try {\n        new URL(provider.baseUrl);\n      } catch {\n        return { valid: false, error: 'Invalid base URL format' };\n      }\n    }\n\n    return { valid: true };\n  }\n}"],
  "mappings": "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",
  "names": ["import_obsidian", "import_obsidian"]
}
